Script started on Sun Oct 18 20:20:09 2020
[?1034hbash-3.2$ ssh efarkas@146.245.252.28
Access to Brooklyn College computers is restricted to authorized users
        and approved educational and research purposes, only.
efarkas@146.245.252.28's password: 

Last login: Mon Oct  5 23:48:39 2020 from pool-100-12-109-46.nycmny.fios.verizon.net

]0;efarkas@sol28:~[?1034h[efarkas@sol28 ~]$ 
]0;efarkas@sol28:~[efarkas@sol28 ~]$ git help
usage: git [--version] [--help] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

The most commonly used git commands are:
   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty Git repository or reinitialize an existing one
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and merge with another repository or a local branch
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

'git help -a' and 'git help -g' lists available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
]0;efarkas@sol28:~[efarkas@sol28 ~]$ ls
[0m[38;5;27mCISC-3140[0m         helloworld.java     [38;5;27mpublic_html[0m  [38;5;27mRepoMEta2[0m     session2.log    session3.2.log  session3.4.log  session.log
helloworld.class  lab6.2session1.log  [38;5;27mRepoMeta[0m     session1.log  session3.1.log  session3.3.log  session4.log    testSession.log
]0;efarkas@sol28:~[efarkas@sol28 ~]$ cd CISC314[K[K[K-3140/[K
]0;efarkas@sol28:~/CISC-3140[efarkas@sol28 CISC-3140]$ ls
[0m[38;5;27mLab5[0m  [38;5;27mLab6[0m  [38;5;27mTest[0m
]0;efarkas@sol28:~/CISC-3140[efarkas@sol28 CISC-3140]$ mkdri[K[Kir Lab7
]0;efarkas@sol28:~/CISC-3140[efarkas@sol28 CISC-3140]$ ls[K[Kcd Laby[K7
]0;efarkas@sol28:~/CISC-3140/Lab7[efarkas@sol28 Lab7]$ git init L[KRepo7
Initialized empty Git repository in /users1/st/efarkas/CISC-3140/Lab7/Repo7/.git/
]0;efarkas@sol28:~/CISC-3140/Lab7[efarkas@sol28 Lab7]$ make [K[K[K[K[Kinfo make
[?1h=[?1049h[H[2J[63;1HWelcome to Info version 5.1. Type h for help, m for menu item.[1;1HFile: make.info,  Node: Top,  Next: Overview,  Prev: (dir),  Up: (dir)[3;1HGNU `make'[4;1H**********[6;1HThis file documents the GNU `make' utility, which determines[7;1Hautomatically which pieces of a large program need to be recompiled,[8;1Hand issues the commands to recompile them.[10;1H   This is Edition 0.71, last updated 19 July 2010, of `The GNU Make[11;1HManual', for GNU `make' version 3.82.[13;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[14;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[15;1H2010 Free Software Foundation, Inc.[17;1H     Permission is granted to copy, distribute and/or modify this[18;1H     document under the terms of the GNU Free Documentation License,[19;1H     Version 1.2 or any later version published by the Free Software[20;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[21;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[22;1H     below.  A copy of the license is included in the section entitled[23;1H     "GNU Free Documentation License."[25;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[26;1H     modify this GNU manual.  Buying copies from the FSF supports it in[27;1H     developing GNU and promoting software freedom."[29;1H* Menu:[31;1H* Overview::                    Overview of `make'.[32;1H* Introduction::                An introduction to `make'.[33;1H* Makefiles::                   Makefiles tell `make' what to do.[34;1H* Rules::                       Rules describe when a file must be remade.[35;1H* Recipes::                     Recipes say how to remake a file.[36;1H* Using Variables::             You can use variables to avoid repetition.[37;1H* Conditionals::                Use or ignore parts of the makefile based[38;1H                                  on the values of variables.[39;1H* Functions::                   Many powerful ways to manipulate text.[40;1H* Invoking make: Running.       How to invoke `make' on the command line.[41;1H* Implicit Rules::              Use implicit rules to treat many files alike,[42;1H                                  based on their file names.[43;1H* Archives::                    How `make' can update library archives.[44;1H* Features::                    Features GNU `make' has over other `make's.[45;1H* Missing::                     What GNU `make' lacks from other `make's.[46;1H* Makefile Conventions::        Conventions for writing makefiles for[47;1H                                  GNU programs.[48;1H* Quick Reference::             A quick reference for experienced users.[49;1H* Error Messages::              A list of common errors generated by `make'.[50;1H* Complex Makefile::            A real example of a straightforward,[51;1H                                  but nontrivial, makefile.[53;1H* GNU Free Documentation License::  License for copying this manual[54;1H* Concept Index::               Index of Concepts[55;1H* Name Index::                  Index of Functions, Variables, & Directives[57;1H --- The Detailed Node Listing ---[59;1HOverview of `make'[61;1H* Preparing::                   Preparing and running make[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --Top-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[63;1HWelcome to Info version 5.1. Type h for help, m for menu item.[63;1HWelcome to Info version 5.1. Type h for help, m for menu item.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[2;1H[2;1H[3;1H[3;1H[4;1H[4;1H[5;1H[5;1H[6;1H[6;1H[7;1H[7;1H[8;1H[8;1H[9;1H[9;1H[10;1H[10;1H[11;1H[11;1H[12;1H[12;1H[13;1H[13;1H[14;1H[14;1H[15;1H[15;1H[16;1H[16;1H[17;1H[17;1H[18;1H[18;1H[19;1H[19;1H[20;1H[20;1H[21;1H[21;1H[22;1H[22;1H[23;1H[23;1H[24;1H[24;1H[25;1H[25;1H[26;1H[26;1H[27;1H[27;1H[28;1H[28;1H[29;1H[29;1H[30;1H[30;1H[31;1H[31;1H[32;1H[32;1H[33;1H[33;1H[34;1H[34;1H[35;1H[35;1H[36;1H[36;1H[37;1H[37;1H[38;1H[38;1H[39;1H[39;1H[40;1H[40;1H[41;1H[41;1H[42;1H[42;1H[43;1H[43;1H[44;1H[44;1H[45;1H[45;1H[46;1H[46;1H[47;1H[47;1H[48;1H[48;1H[49;1H[49;1H[50;1H[50;1H[51;1H[51;1H[52;1H[52;1H[53;1H[53;1H[54;1H[54;1H[53;1H[53;1H[52;1H[52;1H[51;1H[51;1H[50;1H[50;1H[49;1H[49;1H[48;1H[48;1H[47;1H[47;1H[46;1H[46;1H[45;1H[45;1H[44;1H[44;1H[43;1H[43;1H[42;1H[42;1H[41;1H[41;1H[40;1H[40;1H[39;1H[39;1H[38;1H[38;1H[37;1H[37;1H[36;1H[36;1H[35;1H[35;1H[34;1H[34;1H[33;1H[33;1H[32;1H[32;1H[31;1H[31;1H[30;1H[30;1H[29;1H[29;1H[28;1H[28;1H[27;1H[27;1H[26;1H[26;1H[25;1H[25;1H[24;1H[24;1H[23;1H[23;1H[22;1H[22;1H[21;1H[21;1H[20;1H[20;1H[19;1H[19;1H[18;1H[18;1H[17;1H[17;1H[16;1H[16;1H[15;1H[15;1H[14;1H[14;1H[13;1H[13;1H[12;1H[12;1H[11;1H[11;1H[10;1H[10;1H[9;1H[9;1H[8;1H[8;1H[7;1H[7;1H[6;1H[6;1H[5;1H[5;1H[4;1H[4;1H[3;1H[3;1H[2;1H[2;1H[1;1H[1;1H[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[63;1HNo `Prev' or `Up' for this node within this document.[63;1HNo `Prev' or `Up' for this node within this document.[1;1H[63;1H[K[2;1H[2;1H[3;1H[3;1H[4;1H[4;1H[5;1H[5;1H[6;1H[6;1H[7;1H[7;1H[8;1H[8;1H[9;1H[9;1H[10;1H[10;1H[11;1H[11;1H[12;1H[12;1H[13;1H[13;1H[14;1H[14;1H[15;1H[15;1H[16;1H[16;1H[17;1H[17;1H[18;1H[18;1H[19;1H[19;1H[20;1H[20;1H[21;1H[21;1H[22;1H[22;1H[23;1H[23;1H[24;1H[24;1H[25;1H[25;1H[26;1H[26;1H[27;1H[27;1H[28;1H[28;1H[29;1H[29;1H[30;1H[30;1H[31;1H[31;1H[32;1H[32;1H[33;1H[33;1H[34;1H[34;1H[35;1H[35;1H[36;1H[36;1H[37;1H[37;1H[38;1H[38;1H[39;1H[39;1H[40;1H[40;1H[41;1H[41;1H[42;1H[42;1H[43;1H[43;1H[44;1H[44;1H[45;1H[45;1H[46;1H[46;1H[47;1H[47;1H[48;1H[48;1H[49;1H[49;1H[50;1H[50;1H[51;1H[51;1H[52;1H[52;1H[53;1H[53;1H[54;1H[54;1H[55;1H[55;1H[56;1H[56;1H[57;1H[57;1H[58;1H[58;1H[59;1H[59;1H[60;1H[60;1H[61;1H[61;1H[1;1H[K[61;1H[61;1H[1;1HGNU `make'[2;1H**********[3;1H[K[4;1HThis file documents the GNU `make' utility, which determines[5;1Hautomatically which pieces of a large program need to be recompiled,[6;1Hand issues the commands to recompile them.[K[7;1H[K[8;1H   This is Edition 0.71, last updated 19 July 2010, of `The GNU Make[9;1HManual', for GNU `make' version 3.82.[10;1H[K[11;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[12;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[13;1H2010 Free Software Foundation, Inc.[K[14;1H[K[15;1H     Permission is granted to copy, distribute and/or modify this[16;1H     document under the terms of the GNU Free Documentation License,[17;1H     Version 1.2 or any later version published by the Free Software[18;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[19;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[20;1H     below.  A copy of the license is included in the section entitled[K[21;1H     "GNU Free Documentation License."[K[22;1H[K[23;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[24;1H     modify this GNU manual.  Buying copies from the FSF supports it in[25;1H     developing GNU and promoting software freedom."[K[26;1H[K[27;1H* Menu:[K[29;1H* Overview::                    Overview of `make'.[30;1H* Introduction::                An introduction to `make'.[31;1H* Makefiles::                   Makefiles tell `make' what to do.[32;1H* Rules::                       Rules describe when a file must be remade.[33;1H* Recipes::                     Recipes say how to remake a file.[34;1H* Using Variables::             You can use variables to avoid repetition.[35;1H* Conditionals::                Use or ignore parts of the makefile based[36;1H                                  on the values of variables.[K[37;1H* Functions::                   Many powerful ways to manipulate text.[K[38;1H* Invoking make: Running.       How to invoke `make' on the command line.[39;1H* Implicit Rules::              Use implicit rules to treat many files alike,[40;1H                                  based on their file names.[K[41;1H* Archives::                    How `make' can update library archives.[K[42;1H* Features::                    Features GNU `make' has over other `make's.[43;1H* Missing::                     What GNU `make' lacks from other `make's.[44;1H* Makefile Conventions::        Conventions for writing makefiles for[K[45;1H                                  GNU programs.[K[46;1H* Quick Reference::             A quick reference for experienced users.[47;1H* Error Messages::              A list of common errors generated by `make'.[48;1H* Complex Makefile::            A real example of a straightforward,[K[49;1H                                  but nontrivial, makefile.[K[50;1H[K[51;1H* GNU Free Documentation License::  License for copying this manual[52;1H* Concept Index::               Index of Concepts[53;1H* Name Index::                  Index of Functions, Variables, & Directives[54;1H[K[55;1H --- The Detailed Node Listing ---[K[57;1HOverview of `make'[K[59;1H* Preparing::                   Preparing and running make[60;1H* Reading::                     On reading this text[61;1H* Bugs::                        Problems and bugs[K[61;1H[1;1HGNU `make'[2;1H**********[4;1HThis file documents the GNU `make' utility, which determines[5;1Hautomatically which pieces of a large program need to be recompiled,[6;1Hand issues the commands to recompile them.[8;1H   This is Edition 0.71, last updated 19 July 2010, of `The GNU Make[9;1HManual', for GNU `make' version 3.82.[11;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[12;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[13;1H2010 Free Software Foundation, Inc.[15;1H     Permission is granted to copy, distribute and/or modify this[16;1H     document under the terms of the GNU Free Documentation License,[17;1H     Version 1.2 or any later version published by the Free Software[18;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[19;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[20;1H     below.  A copy of the license is included in the section entitled[21;1H     "GNU Free Documentation License."[23;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[24;1H     modify this GNU manual.  Buying copies from the FSF supports it in[25;1H     developing GNU and promoting software freedom."[27;1H* Menu:[29;1H* Overview::                    Overview of `make'.[30;1H* Introduction::                An introduction to `make'.[31;1H* Makefiles::                   Makefiles tell `make' what to do.[32;1H* Rules::                       Rules describe when a file must be remade.[33;1H* Recipes::                     Recipes say how to remake a file.[34;1H* Using Variables::             You can use variables to avoid repetition.[35;1H* Conditionals::                Use or ignore parts of the makefile based[36;1H                                  on the values of variables.[37;1H* Functions::                   Many powerful ways to manipulate text.[38;1H* Invoking make: Running.       How to invoke `make' on the command line.[39;1H* Implicit Rules::              Use implicit rules to treat many files alike,[40;1H                                  based on their file names.[41;1H* Archives::                    How `make' can update library archives.[42;1H* Features::                    Features GNU `make' has over other `make's.[43;1H* Missing::                     What GNU `make' lacks from other `make's.[44;1H* Makefile Conventions::        Conventions for writing makefiles for[45;1H                                  GNU programs.[46;1H* Quick Reference::             A quick reference for experienced users.[47;1H* Error Messages::              A list of common errors generated by `make'.[48;1H* Complex Makefile::            A real example of a straightforward,[49;1H                                  but nontrivial, makefile.[51;1H* GNU Free Documentation License::  License for copying this manual[52;1H* Concept Index::               Index of Concepts[53;1H* Name Index::                  Index of Functions, Variables, & Directives[55;1H --- The Detailed Node Listing ---[57;1HOverview of `make'[59;1H* Preparing::                   Preparing and running make[60;1H* Reading::                     On reading this text[61;1H* Bugs::                        Problems and bugs[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines -- 0%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H**********[2;1H[K[3;1HThis file documents the GNU `make' utility, which determines[4;1Hautomatically which pieces of a large program need to be recompiled,[5;1Hand issues the commands to recompile them.[K[6;1H[K[7;1H   This is Edition 0.71, last updated 19 July 2010, of `The GNU Make[8;1HManual', for GNU `make' version 3.82.[K[9;1H[K[10;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[61;1H[61;1H[1;1H[K[2;1HThis file documents the GNU `make' utility, which determines[3;1Hautomatically which pieces of a large program need to be recompiled,[4;1Hand issues the commands to recompile them.[K[5;1H[K[6;1H   This is Edition 0.71, last updated 19 July 2010, of `The GNU Make[7;1HManual', for GNU `make' version 3.82.[K[8;1H[K[9;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[10;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[11;1H2010 Free Software Foundation, Inc.[K[12;1H[K[13;1H     Permission is granted to copy, distribute and/or modify this[14;1H     document under the terms of the GNU Free Documentation License,[15;1H     Version 1.2 or any later version published by the Free Software[16;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[17;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[18;1H     below.  A copy of the license is included in the section entitled[K[19;1H     "GNU Free Documentation License."[K[20;1H[K[21;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[22;1H     modify this GNU manual.  Buying copies from the FSF supports it in[23;1H     developing GNU and promoting software freedom."[K[24;1H[K[25;1H* Menu:[K[27;1H* Overview::                    Overview of `make'.[28;1H* Introduction::                An introduction to `make'.[29;1H* Makefiles::                   Makefiles tell `make' what to do.[30;1H* Rules::                       Rules describe when a file must be remade.[31;1H* Recipes::                     Recipes say how to remake a file.[32;1H* Using Variables::             You can use variables to avoid repetition.[33;1H* Conditionals::                Use or ignore parts of the makefile based[34;1H                                  on the values of variables.[K[35;1H* Functions::                   Many powerful ways to manipulate text.[K[36;1H* Invoking make: Running.       How to invoke `make' on the command line.[37;1H* Implicit Rules::              Use implicit rules to treat many files alike,[38;1H                                  based on their file names.[K[39;1H* Archives::                    How `make' can update library archives.[K[40;1H* Features::                    Features GNU `make' has over other `make's.[41;1H* Missing::                     What GNU `make' lacks from other `make's.[42;1H* Makefile Conventions::        Conventions for writing makefiles for[K[43;1H                                  GNU programs.[K[44;1H* Quick Reference::             A quick reference for experienced users.[45;1H* Error Messages::              A list of common errors generated by `make'.[46;1H* Complex Makefile::            A real example of a straightforward,[K[47;1H                                  but nontrivial, makefile.[K[48;1H[K[49;1H* GNU Free Documentation License::  License for copying this manual[50;1H* Concept Index::               Index of Concepts[51;1H* Name Index::                  Index of Functions, Variables, & Directives[52;1H[K[53;1H --- The Detailed Node Listing ---[K[55;1HOverview of `make'[K[57;1H* Preparing::                   Preparing and running make[58;1H* Reading::                     On reading this text[59;1H* Bugs::                        Problems and bugs[K[60;1H[K[61;1HAn Introduction to Makefiles[K[61;1H[2;1HThis file documents the GNU `make' utility, which determines[3;1Hautomatically which pieces of a large program need to be recompiled,[4;1Hand issues the commands to recompile them.[6;1H   This is Edition 0.71, last updated 19 July 2010, of `The GNU Make[7;1HManual', for GNU `make' version 3.82.[9;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[10;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[11;1H2010 Free Software Foundation, Inc.[13;1H     Permission is granted to copy, distribute and/or modify this[14;1H     document under the terms of the GNU Free Documentation License,[15;1H     Version 1.2 or any later version published by the Free Software[16;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[17;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[18;1H     below.  A copy of the license is included in the section entitled[19;1H     "GNU Free Documentation License."[21;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[22;1H     modify this GNU manual.  Buying copies from the FSF supports it in[23;1H     developing GNU and promoting software freedom."[25;1H* Menu:[27;1H* Overview::                    Overview of `make'.[28;1H* Introduction::                An introduction to `make'.[29;1H* Makefiles::                   Makefiles tell `make' what to do.[30;1H* Rules::                       Rules describe when a file must be remade.[31;1H* Recipes::                     Recipes say how to remake a file.[32;1H* Using Variables::             You can use variables to avoid repetition.[33;1H* Conditionals::                Use or ignore parts of the makefile based[34;1H                                  on the values of variables.[35;1H* Functions::                   Many powerful ways to manipulate text.[36;1H* Invoking make: Running.       How to invoke `make' on the command line.[37;1H* Implicit Rules::              Use implicit rules to treat many files alike,[38;1H                                  based on their file names.[39;1H* Archives::                    How `make' can update library archives.[40;1H* Features::                    Features GNU `make' has over other `make's.[41;1H* Missing::                     What GNU `make' lacks from other `make's.[42;1H* Makefile Conventions::        Conventions for writing makefiles for[43;1H                                  GNU programs.[44;1H* Quick Reference::             A quick reference for experienced users.[45;1H* Error Messages::              A list of common errors generated by `make'.[46;1H* Complex Makefile::            A real example of a straightforward,[47;1H                                  but nontrivial, makefile.[49;1H* GNU Free Documentation License::  License for copying this manual[50;1H* Concept Index::               Index of Concepts[51;1H* Name Index::                  Index of Functions, Variables, & Directives[53;1H --- The Detailed Node Listing ---[55;1HOverview of `make'[57;1H* Preparing::                   Preparing and running make[58;1H* Reading::                     On reading this text[59;1H* Bugs::                        Problems and bugs[61;1HAn Introduction to Makefiles[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines -- 1%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1HThis file documents the GNU `make' utility, which determines[2;1Hautomatically which pieces of a large program need to be recompiled,[3;1Hand issues the commands to recompile them.[K[4;1H[K[5;1H   This is Edition 0.71, last updated 19 July 2010, of `The GNU Make[6;1HManual', for GNU `make' version 3.82.[K[7;1H[K[8;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[9;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[10;1H2010 Free Software Foundation, Inc.[K[11;1H[K[12;1H     Permission is granted to copy, distribute and/or modify this[13;1H     document under the terms of the GNU Free Documentation License,[14;1H     Version 1.2 or any later version published by the Free Software[15;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[16;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[17;1H     below.  A copy of the license is included in the section entitled[18;1H     "GNU Free Documentation License."[K[19;1H[K[20;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[21;1H     modify this GNU manual.  Buying copies from the FSF supports it in[K[22;1H     developing GNU and promoting software freedom."[K[23;1H[K[24;1H* Menu:[25;1H[K[26;1H* Overview::                    Overview of `make'.[27;1H* Introduction::                An introduction to `make'.[28;1H* Makefiles::                   Makefiles tell `make' what to do.[29;1H* Rules::                       Rules describe when a file must be remade.[30;1H* Recipes::                     Recipes say how to remake a file.[K[31;1H* Using Variables::             You can use variables to avoid repetition.[32;1H* Conditionals::                Use or ignore parts of the makefile based[K[33;1H                                  on the values of variables.[K[34;1H* Functions::                   Many powerful ways to manipulate text.[35;1H* Invoking make: Running.       How to invoke `make' on the command line.[36;1H* Implicit Rules::              Use implicit rules to treat many files alike,[37;1H                                  based on their file names.[K[38;1H* Archives::                    How `make' can update library archives.[39;1H* Features::                    Features GNU `make' has over other `make's.[40;1H* Missing::                     What GNU `make' lacks from other `make's.[K[41;1H* Makefile Conventions::        Conventions for writing makefiles for[K[42;1H                                  GNU programs.[K[43;1H* Quick Reference::             A quick reference for experienced users.[44;1H* Error Messages::              A list of common errors generated by `make'.[45;1H* Complex Makefile::            A real example of a straightforward,[K[46;1H                                  but nontrivial, makefile.[K[47;1H[K[48;1H* GNU Free Documentation License::  License for copying this manual[49;1H* Concept Index::               Index of Concepts[K[50;1H* Name Index::                  Index of Functions, Variables, & Directives[51;1H[K[52;1H --- The Detailed Node Listing ---[53;1H[K[54;1HOverview of `make'[55;1H[K[56;1H* Preparing::                   Preparing and running make[57;1H* Reading::                     On reading this text[K[58;1H* Bugs::                        Problems and bugs[K[59;1H[K[60;1HAn Introduction to Makefiles[61;1H[K[61;1H[61;1H[1;1Hautomatically which pieces of a large program need to be recompiled,[2;1Hand issues the commands to recompile them.[K[3;1H[K[4;1H   This is Edition 0.71, last updated 19 July 2010, of `The GNU Make[5;1HManual', for GNU `make' version 3.82.[K[6;1H[K[7;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[8;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[9;1H2010 Free Software Foundation, Inc.[K[10;1H[K[11;1H     Permission is granted to copy, distribute and/or modify this[12;1H     document under the terms of the GNU Free Documentation License,[13;1H     Version 1.2 or any later version published by the Free Software[61;1H[61;1H[1;1Hand issues the commands to recompile them.[K[2;1H[K[3;1H   This is Edition 0.71, last updated 19 July 2010, of `The GNU Make[4;1HManual', for GNU `make' version 3.82.[K[5;1H[K[6;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[7;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[8;1H2010 Free Software Foundation, Inc.[K[9;1H[K[10;1H     Permission is granted to copy, distribute and/or modify this[11;1H     document under the terms of the GNU Free Documentation License,[12;1H     Version 1.2 or any later version published by the Free Software[13;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[14;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[15;1H     below.  A copy of the license is included in the section entitled[K[16;1H     "GNU Free Documentation License."[K[17;1H[K[18;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[19;1H     modify this GNU manual.  Buying copies from the FSF supports it in[20;1H     developing GNU and promoting software freedom."[K[21;1H[K[22;1H* Menu:[K[24;1H* Overview::                    Overview of `make'.[25;1H* Introduction::                An introduction to `make'.[26;1H* Makefiles::                   Makefiles tell `make' what to do.[27;1H* Rules::                       Rules describe when a file must be remade.[28;1H* Recipes::                     Recipes say how to remake a file.[29;1H* Using Variables::             You can use variables to avoid repetition.[30;1H* Conditionals::                Use or ignore parts of the makefile based[31;1H                                  on the values of variables.[K[32;1H* Functions::                   Many powerful ways to manipulate text.[K[33;1H* Invoking make: Running.       How to invoke `make' on the command line.[34;1H* Implicit Rules::              Use implicit rules to treat many files alike,[35;1H                                  based on their file names.[K[36;1H* Archives::                    How `make' can update library archives.[K[37;1H* Features::                    Features GNU `make' has over other `make's.[38;1H* Missing::                     What GNU `make' lacks from other `make's.[39;1H* Makefile Conventions::        Conventions for writing makefiles for[K[40;1H                                  GNU programs.[K[61;1H[61;1H[1;1H[K[2;1H   This is Edition 0.71, last updated 19 July 2010, of `The GNU Make[3;1HManual', for GNU `make' version 3.82.[K[4;1H[K[5;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[6;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[7;1H2010 Free Software Foundation, Inc.[K[8;1H[K[9;1H     Permission is granted to copy, distribute and/or modify this[10;1H     document under the terms of the GNU Free Documentation License,[11;1H     Version 1.2 or any later version published by the Free Software[12;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[13;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[61;1H[61;1H[1;1H   This is Edition 0.71, last updated 19 July 2010, of `The GNU Make[61;1H[61;1H[1;1HManual', for GNU `make' version 3.82.[K[2;1H[K[3;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[4;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[5;1H2010 Free Software Foundation, Inc.[K[6;1H[K[7;1H     Permission is granted to copy, distribute and/or modify this[8;1H     document under the terms of the GNU Free Documentation License,[9;1H     Version 1.2 or any later version published by the Free Software[10;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[11;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[12;1H     below.  A copy of the license is included in the section entitled[K[13;1H     "GNU Free Documentation License."[K[14;1H[K[15;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[16;1H     modify this GNU manual.  Buying copies from the FSF supports it in[17;1H     developing GNU and promoting software freedom."[18;1H[K[19;1H* Menu:[K[20;1H[K[21;1H* Overview::                    Overview of `make'.[22;1H* Introduction::                An introduction to `make'.[23;1H* Makefiles::                   Makefiles tell `make' what to do.[24;1H* Rules::                       Rules describe when a file must be remade.[61;1H[61;1H[1;1H[K[61;1H[61;1H[1;1H   Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,[2;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[3;1H2010 Free Software Foundation, Inc.[K[4;1H[K[5;1H     Permission is granted to copy, distribute and/or modify this[6;1H     document under the terms of the GNU Free Documentation License,[7;1H     Version 1.2 or any later version published by the Free Software[8;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[61;1H[61;1H[1;1H1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,[2;1H2010 Free Software Foundation, Inc.[K[3;1H[K[4;1H     Permission is granted to copy, distribute and/or modify this[5;1H     document under the terms of the GNU Free Documentation License,[6;1H     Version 1.2 or any later version published by the Free Software[7;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[8;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[9;1H     below.  A copy of the license is included in the section entitled[10;1H     "GNU Free Documentation License."[K[11;1H[K[12;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[13;1H     modify this GNU manual.  Buying copies from the FSF supports it in[61;1H[61;1H[1;1H2010 Free Software Foundation, Inc.[K[2;1H[K[3;1H     Permission is granted to copy, distribute and/or modify this[4;1H     document under the terms of the GNU Free Documentation License,[5;1H     Version 1.2 or any later version published by the Free Software[6;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[7;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[8;1H     below.  A copy of the license is included in the section entitled[9;1H     "GNU Free Documentation License."[K[10;1H[K[11;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[12;1H     modify this GNU manual.  Buying copies from the FSF supports it in[K[13;1H     developing GNU and promoting software freedom."[K[15;1H* Menu:[K[16;1H[K[17;1H* Overview::                    Overview of `make'.[K[18;1H* Introduction::                An introduction to `make'.[19;1H* Makefiles::                   Makefiles tell `make' what to do.[20;1H* Rules::                       Rules describe when a file must be remade.[21;1H* Recipes::                     Recipes say how to remake a file.[22;1H* Using Variables::             You can use variables to avoid repetition.[23;1H* Conditionals::                Use or ignore parts of the makefile based[24;1H                                  on the values of variables.[K[25;1H* Functions::                   Many powerful ways to manipulate text.[26;1H* Invoking make: Running.       How to invoke `make' on the command line.[27;1H* Implicit Rules::              Use implicit rules to treat many files alike,[28;1H                                  based on their file names.[K[29;1H* Archives::                    How `make' can update library archives.[K[30;1H* Features::                    Features GNU `make' has over other `make's.[31;1H* Missing::                     What GNU `make' lacks from other `make's.[32;1H* Makefile Conventions::        Conventions for writing makefiles for[K[33;1H                                  GNU programs.[K[34;1H* Quick Reference::             A quick reference for experienced users.[K[35;1H* Error Messages::              A list of common errors generated by `make'.[36;1H* Complex Makefile::            A real example of a straightforward,[K[37;1H                                  but nontrivial, makefile.[K[38;1H[K[39;1H* GNU Free Documentation License::  License for copying this manual[K[40;1H* Concept Index::               Index of Concepts[41;1H* Name Index::                  Index of Functions, Variables, & Directives[42;1H[K[43;1H --- The Detailed Node Listing ---[K[44;1H[K[45;1HOverview of `make'[K[46;1H[K[47;1H* Preparing::                   Preparing and running make[48;1H* Reading::                     On reading this text[K[49;1H* Bugs::                        Problems and bugs[50;1H[K[51;1HAn Introduction to Makefiles[52;1H[K[53;1H* Rule Introduction::           What a rule looks like.[54;1H* Simple Makefile::             A simple makefile[55;1H* How Make Works::              How `make' processes this makefile[56;1H* Variables Simplify::          Variables make makefiles simpler[57;1H* make Deduces::                Letting `make' deduce the recipe[58;1H* Combine By Prerequisite::     Another style of makefile[59;1H* Cleanup::                     Rules for cleaning the directory[60;1H[K[61;1HWriting Makefiles[61;1H[1;1H2010 Free Software Foundation, Inc.[3;1H     Permission is granted to copy, distribute and/or modify this[4;1H     document under the terms of the GNU Free Documentation License,[5;1H     Version 1.2 or any later version published by the Free Software[6;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[7;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[8;1H     below.  A copy of the license is included in the section entitled[9;1H     "GNU Free Documentation License."[11;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[12;1H     modify this GNU manual.  Buying copies from the FSF supports it in[13;1H     developing GNU and promoting software freedom."[15;1H* Menu:[17;1H* Overview::                    Overview of `make'.[18;1H* Introduction::                An introduction to `make'.[19;1H* Makefiles::                   Makefiles tell `make' what to do.[20;1H* Rules::                       Rules describe when a file must be remade.[21;1H* Recipes::                     Recipes say how to remake a file.[22;1H* Using Variables::             You can use variables to avoid repetition.[23;1H* Conditionals::                Use or ignore parts of the makefile based[24;1H                                  on the values of variables.[25;1H* Functions::                   Many powerful ways to manipulate text.[26;1H* Invoking make: Running.       How to invoke `make' on the command line.[27;1H* Implicit Rules::              Use implicit rules to treat many files alike,[28;1H                                  based on their file names.[29;1H* Archives::                    How `make' can update library archives.[30;1H* Features::                    Features GNU `make' has over other `make's.[31;1H* Missing::                     What GNU `make' lacks from other `make's.[32;1H* Makefile Conventions::        Conventions for writing makefiles for[33;1H                                  GNU programs.[34;1H* Quick Reference::             A quick reference for experienced users.[35;1H* Error Messages::              A list of common errors generated by `make'.[36;1H* Complex Makefile::            A real example of a straightforward,[37;1H                                  but nontrivial, makefile.[39;1H* GNU Free Documentation License::  License for copying this manual[40;1H* Concept Index::               Index of Concepts[41;1H* Name Index::                  Index of Functions, Variables, & Directives[43;1H --- The Detailed Node Listing ---[45;1HOverview of `make'[47;1H* Preparing::                   Preparing and running make[48;1H* Reading::                     On reading this text[49;1H* Bugs::                        Problems and bugs[51;1HAn Introduction to Makefiles[53;1H* Rule Introduction::           What a rule looks like.[54;1H* Simple Makefile::             A simple makefile[55;1H* How Make Works::              How `make' processes this makefile[56;1H* Variables Simplify::          Variables make makefiles simpler[57;1H* make Deduces::                Letting `make' deduce the recipe[58;1H* Combine By Prerequisite::     Another style of makefile[59;1H* Cleanup::                     Rules for cleaning the directory[61;1HWriting Makefiles[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines -- 5%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H[K[2;1H     Permission is granted to copy, distribute and/or modify this[3;1H     document under the terms of the GNU Free Documentation License,[4;1H     Version 1.2 or any later version published by the Free Software[5;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[6;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[7;1H     below.  A copy of the license is included in the section entitled[8;1H     "GNU Free Documentation License."[K[9;1H[K[10;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[11;1H     modify this GNU manual.  Buying copies from the FSF supports it in[K[12;1H     developing GNU and promoting software freedom."[K[61;1H[61;1H[1;1H     Permission is granted to copy, distribute and/or modify this[2;1H     document under the terms of the GNU Free Documentation License,[3;1H     Version 1.2 or any later version published by the Free Software[4;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[5;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[6;1H     below.  A copy of the license is included in the section entitled[7;1H     "GNU Free Documentation License."[K[8;1H[K[9;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[10;1H     modify this GNU manual.  Buying copies from the FSF supports it in[K[11;1H     developing GNU and promoting software freedom."[K[12;1H[K[13;1H* Menu:[K[15;1H* Overview::                    Overview of `make'.[16;1H* Introduction::                An introduction to `make'.[17;1H* Makefiles::                   Makefiles tell `make' what to do.[18;1H* Rules::                       Rules describe when a file must be remade.[19;1H* Recipes::                     Recipes say how to remake a file.[20;1H* Using Variables::             You can use variables to avoid repetition.[21;1H* Conditionals::                Use or ignore parts of the makefile based[22;1H                                  on the values of variables.[K[23;1H* Functions::                   Many powerful ways to manipulate text.[K[24;1H* Invoking make: Running.       How to invoke `make' on the command line.[25;1H* Implicit Rules::              Use implicit rules to treat many files alike,[26;1H                                  based on their file names.[K[27;1H* Archives::                    How `make' can update library archives.[K[28;1H* Features::                    Features GNU `make' has over other `make's.[29;1H* Missing::                     What GNU `make' lacks from other `make's.[30;1H* Makefile Conventions::        Conventions for writing makefiles for[K[31;1H                                  GNU programs.[K[32;1H* Quick Reference::             A quick reference for experienced users.[33;1H* Error Messages::              A list of common errors generated by `make'.[34;1H* Complex Makefile::            A real example of a straightforward,[K[35;1H                                  but nontrivial, makefile.[K[36;1H[K[37;1H* GNU Free Documentation License::  License for copying this manual[38;1H* Concept Index::               Index of Concepts[39;1H* Name Index::                  Index of Functions, Variables, & Directives[40;1H[K[41;1H --- The Detailed Node Listing ---[K[43;1HOverview of `make'[K[45;1H* Preparing::                   Preparing and running make[46;1H* Reading::                     On reading this text[47;1H* Bugs::                        Problems and bugs[K[48;1H[K[49;1HAn Introduction to Makefiles[K[51;1H* Rule Introduction::           What a rule looks like.[52;1H* Simple Makefile::             A simple makefile[53;1H* How Make Works::              How `make' processes this makefile[54;1H* Variables Simplify::          Variables make makefiles simpler[55;1H* make Deduces::                Letting `make' deduce the recipe[K[56;1H* Combine By Prerequisite::     Another style of makefile[K[57;1H* Cleanup::                     Rules for cleaning the directory[58;1H[K[59;1HWriting Makefiles[K[61;1H* Makefile Contents::           What makefiles contain.[61;1H[1;1H     Permission is granted to copy, distribute and/or modify this[2;1H     document under the terms of the GNU Free Documentation License,[3;1H     Version 1.2 or any later version published by the Free Software[4;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[5;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[6;1H     below.  A copy of the license is included in the section entitled[7;1H     "GNU Free Documentation License."[9;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[10;1H     modify this GNU manual.  Buying copies from the FSF supports it in[11;1H     developing GNU and promoting software freedom."[13;1H* Menu:[15;1H* Overview::                    Overview of `make'.[16;1H* Introduction::                An introduction to `make'.[17;1H* Makefiles::                   Makefiles tell `make' what to do.[18;1H* Rules::                       Rules describe when a file must be remade.[19;1H* Recipes::                     Recipes say how to remake a file.[20;1H* Using Variables::             You can use variables to avoid repetition.[21;1H* Conditionals::                Use or ignore parts of the makefile based[22;1H                                  on the values of variables.[23;1H* Functions::                   Many powerful ways to manipulate text.[24;1H* Invoking make: Running.       How to invoke `make' on the command line.[25;1H* Implicit Rules::              Use implicit rules to treat many files alike,[26;1H                                  based on their file names.[27;1H* Archives::                    How `make' can update library archives.[28;1H* Features::                    Features GNU `make' has over other `make's.[29;1H* Missing::                     What GNU `make' lacks from other `make's.[30;1H* Makefile Conventions::        Conventions for writing makefiles for[31;1H                                  GNU programs.[32;1H* Quick Reference::             A quick reference for experienced users.[33;1H* Error Messages::              A list of common errors generated by `make'.[34;1H* Complex Makefile::            A real example of a straightforward,[35;1H                                  but nontrivial, makefile.[37;1H* GNU Free Documentation License::  License for copying this manual[38;1H* Concept Index::               Index of Concepts[39;1H* Name Index::                  Index of Functions, Variables, & Directives[41;1H --- The Detailed Node Listing ---[43;1HOverview of `make'[45;1H* Preparing::                   Preparing and running make[46;1H* Reading::                     On reading this text[47;1H* Bugs::                        Problems and bugs[49;1HAn Introduction to Makefiles[51;1H* Rule Introduction::           What a rule looks like.[52;1H* Simple Makefile::             A simple makefile[53;1H* How Make Works::              How `make' processes this makefile[54;1H* Variables Simplify::          Variables make makefiles simpler[55;1H* make Deduces::                Letting `make' deduce the recipe[56;1H* Combine By Prerequisite::     Another style of makefile[57;1H* Cleanup::                     Rules for cleaning the directory[59;1HWriting Makefiles[61;1H* Makefile Contents::           What makefiles contain.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines -- 6%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H     document under the terms of the GNU Free Documentation License,[2;1H     Version 1.2 or any later version published by the Free Software[3;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[4;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[5;1H     below.  A copy of the license is included in the section entitled[6;1H     "GNU Free Documentation License."[K[7;1H[K[8;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[9;1H     modify this GNU manual.  Buying copies from the FSF supports it in[K[10;1H     developing GNU and promoting software freedom."[K[11;1H[K[12;1H* Menu:[13;1H[K[14;1H* Overview::                    Overview of `make'.[15;1H* Introduction::                An introduction to `make'.[16;1H* Makefiles::                   Makefiles tell `make' what to do.[17;1H* Rules::                       Rules describe when a file must be remade.[18;1H* Recipes::                     Recipes say how to remake a file.[K[19;1H* Using Variables::             You can use variables to avoid repetition.[20;1H* Conditionals::                Use or ignore parts of the makefile based[K[21;1H                                  on the values of variables.[K[22;1H* Functions::                   Many powerful ways to manipulate text.[23;1H* Invoking make: Running.       How to invoke `make' on the command line.[24;1H* Implicit Rules::              Use implicit rules to treat many files alike,[25;1H                                  based on their file names.[K[26;1H* Archives::                    How `make' can update library archives.[27;1H* Features::                    Features GNU `make' has over other `make's.[28;1H* Missing::                     What GNU `make' lacks from other `make's.[K[29;1H* Makefile Conventions::        Conventions for writing makefiles for[K[30;1H                                  GNU programs.[K[31;1H* Quick Reference::             A quick reference for experienced users.[32;1H* Error Messages::              A list of common errors generated by `make'.[33;1H* Complex Makefile::            A real example of a straightforward,[K[34;1H                                  but nontrivial, makefile.[K[35;1H[K[36;1H* GNU Free Documentation License::  License for copying this manual[37;1H* Concept Index::               Index of Concepts[K[38;1H* Name Index::                  Index of Functions, Variables, & Directives[39;1H[K[40;1H --- The Detailed Node Listing ---[41;1H[K[42;1HOverview of `make'[43;1H[K[44;1H* Preparing::                   Preparing and running make[45;1H* Reading::                     On reading this text[K[46;1H* Bugs::                        Problems and bugs[K[47;1H[K[48;1HAn Introduction to Makefiles[61;1H[61;1H[1;1H     Version 1.2 or any later version published by the Free Software[2;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[3;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[4;1H     below.  A copy of the license is included in the section entitled[5;1H     "GNU Free Documentation License."[K[6;1H[K[7;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[8;1H     modify this GNU manual.  Buying copies from the FSF supports it in[K[9;1H     developing GNU and promoting software freedom."[K[10;1H[K[11;1H* Menu:[12;1H[K[13;1H* Overview::                    Overview of `make'.[14;1H* Introduction::                An introduction to `make'.[15;1H* Makefiles::                   Makefiles tell `make' what to do.[16;1H* Rules::                       Rules describe when a file must be remade.[17;1H* Recipes::                     Recipes say how to remake a file.[K[18;1H* Using Variables::             You can use variables to avoid repetition.[19;1H* Conditionals::                Use or ignore parts of the makefile based[K[20;1H                                  on the values of variables.[K[21;1H* Functions::                   Many powerful ways to manipulate text.[22;1H* Invoking make: Running.       How to invoke `make' on the command line.[23;1H* Implicit Rules::              Use implicit rules to treat many files alike,[24;1H                                  based on their file names.[K[25;1H* Archives::                    How `make' can update library archives.[26;1H* Features::                    Features GNU `make' has over other `make's.[27;1H* Missing::                     What GNU `make' lacks from other `make's.[K[28;1H* Makefile Conventions::        Conventions for writing makefiles for[K[29;1H                                  GNU programs.[K[30;1H* Quick Reference::             A quick reference for experienced users.[31;1H* Error Messages::              A list of common errors generated by `make'.[32;1H* Complex Makefile::            A real example of a straightforward,[K[33;1H                                  but nontrivial, makefile.[K[34;1H[K[35;1H* GNU Free Documentation License::  License for copying this manual[36;1H* Concept Index::               Index of Concepts[K[37;1H* Name Index::                  Index of Functions, Variables, & Directives[38;1H[K[39;1H --- The Detailed Node Listing ---[40;1H[K[41;1HOverview of `make'[42;1H[K[43;1H* Preparing::                   Preparing and running make[44;1H* Reading::                     On reading this text[K[45;1H* Bugs::                        Problems and bugs[K[46;1H[K[47;1HAn Introduction to Makefiles[48;1H[K[49;1H* Rule Introduction::           What a rule looks like.[50;1H* Simple Makefile::             A simple makefile[51;1H* How Make Works::              How `make' processes this makefile[52;1H* Variables Simplify::          Variables make makefiles simpler[53;1H* make Deduces::                Letting `make' deduce the recipe[K[54;1H* Combine By Prerequisite::     Another style of makefile[K[55;1H* Cleanup::                     Rules for cleaning the directory[56;1H[K[57;1HWriting Makefiles[K[59;1H* Makefile Contents::           What makefiles contain.[60;1H* Makefile Names::              How to name your makefile.[61;1H* Include::                     How one makefile can use another makefile.[61;1H[1;1H     Version 1.2 or any later version published by the Free Software[2;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[3;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[4;1H     below.  A copy of the license is included in the section entitled[5;1H     "GNU Free Documentation License."[7;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[8;1H     modify this GNU manual.  Buying copies from the FSF supports it in[9;1H     developing GNU and promoting software freedom."[11;1H* Menu:[13;1H* Overview::                    Overview of `make'.[14;1H* Introduction::                An introduction to `make'.[15;1H* Makefiles::                   Makefiles tell `make' what to do.[16;1H* Rules::                       Rules describe when a file must be remade.[17;1H* Recipes::                     Recipes say how to remake a file.[18;1H* Using Variables::             You can use variables to avoid repetition.[19;1H* Conditionals::                Use or ignore parts of the makefile based[20;1H                                  on the values of variables.[21;1H* Functions::                   Many powerful ways to manipulate text.[22;1H* Invoking make: Running.       How to invoke `make' on the command line.[23;1H* Implicit Rules::              Use implicit rules to treat many files alike,[24;1H                                  based on their file names.[25;1H* Archives::                    How `make' can update library archives.[26;1H* Features::                    Features GNU `make' has over other `make's.[27;1H* Missing::                     What GNU `make' lacks from other `make's.[28;1H* Makefile Conventions::        Conventions for writing makefiles for[29;1H                                  GNU programs.[30;1H* Quick Reference::             A quick reference for experienced users.[31;1H* Error Messages::              A list of common errors generated by `make'.[32;1H* Complex Makefile::            A real example of a straightforward,[33;1H                                  but nontrivial, makefile.[35;1H* GNU Free Documentation License::  License for copying this manual[36;1H* Concept Index::               Index of Concepts[37;1H* Name Index::                  Index of Functions, Variables, & Directives[39;1H --- The Detailed Node Listing ---[41;1HOverview of `make'[43;1H* Preparing::                   Preparing and running make[44;1H* Reading::                     On reading this text[45;1H* Bugs::                        Problems and bugs[47;1HAn Introduction to Makefiles[49;1H* Rule Introduction::           What a rule looks like.[50;1H* Simple Makefile::             A simple makefile[51;1H* How Make Works::              How `make' processes this makefile[52;1H* Variables Simplify::          Variables make makefiles simpler[53;1H* make Deduces::                Letting `make' deduce the recipe[54;1H* Combine By Prerequisite::     Another style of makefile[55;1H* Cleanup::                     Rules for cleaning the directory[57;1HWriting Makefiles[59;1H* Makefile Contents::           What makefiles contain.[60;1H* Makefile Names::              How to name your makefile.[61;1H* Include::                     How one makefile can use another makefile.[61;1H[1;1H     Foundation; with no Invariant Sections, with the Front-Cover Texts[2;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[3;1H     below.  A copy of the license is included in the section entitled[4;1H     "GNU Free Documentation License."[K[5;1H[K[6;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[7;1H     modify this GNU manual.  Buying copies from the FSF supports it in[K[8;1H     developing GNU and promoting software freedom."[K[9;1H[K[10;1H* Menu:[11;1H[K[12;1H* Overview::                    Overview of `make'.[13;1H* Introduction::                An introduction to `make'.[14;1H* Makefiles::                   Makefiles tell `make' what to do.[15;1H* Rules::                       Rules describe when a file must be remade.[16;1H* Recipes::                     Recipes say how to remake a file.[K[17;1H* Using Variables::             You can use variables to avoid repetition.[61;1H[61;1H[1;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[K[2;1H     below.  A copy of the license is included in the section entitled[3;1H     "GNU Free Documentation License."[K[4;1H[K[5;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[6;1H     modify this GNU manual.  Buying copies from the FSF supports it in[K[7;1H     developing GNU and promoting software freedom."[K[8;1H[K[9;1H* Menu:[10;1H[K[11;1H* Overview::                    Overview of `make'.[12;1H* Introduction::                An introduction to `make'.[13;1H* Makefiles::                   Makefiles tell `make' what to do.[14;1H* Rules::                       Rules describe when a file must be remade.[15;1H* Recipes::                     Recipes say how to remake a file.[K[16;1H* Using Variables::             You can use variables to avoid repetition.[17;1H* Conditionals::                Use or ignore parts of the makefile based[K[18;1H                                  on the values of variables.[K[19;1H* Functions::                   Many powerful ways to manipulate text.[K[20;1H* Invoking make: Running.       How to invoke `make' on the command line.[21;1H* Implicit Rules::              Use implicit rules to treat many files alike,[22;1H                                  based on their file names.[K[23;1H* Archives::                    How `make' can update library archives.[K[24;1H* Features::                    Features GNU `make' has over other `make's.[25;1H* Missing::                     What GNU `make' lacks from other `make's.[26;1H* Makefile Conventions::        Conventions for writing makefiles for[K[27;1H                                  GNU programs.[K[28;1H* Quick Reference::             A quick reference for experienced users.[29;1H* Error Messages::              A list of common errors generated by `make'.[30;1H* Complex Makefile::            A real example of a straightforward,[K[31;1H                                  but nontrivial, makefile.[K[32;1H[K[33;1H* GNU Free Documentation License::  License for copying this manual[34;1H* Concept Index::               Index of Concepts[35;1H* Name Index::                  Index of Functions, Variables, & Directives[36;1H[K[37;1H --- The Detailed Node Listing ---[K[39;1HOverview of `make'[K[41;1H* Preparing::                   Preparing and running make[42;1H* Reading::                     On reading this text[43;1H* Bugs::                        Problems and bugs[K[44;1H[K[45;1HAn Introduction to Makefiles[K[47;1H* Rule Introduction::           What a rule looks like.[48;1H* Simple Makefile::             A simple makefile[49;1H* How Make Works::              How `make' processes this makefile[50;1H* Variables Simplify::          Variables make makefiles simpler[51;1H* make Deduces::                Letting `make' deduce the recipe[K[52;1H* Combine By Prerequisite::     Another style of makefile[K[53;1H* Cleanup::                     Rules for cleaning the directory[54;1H[K[55;1HWriting Makefiles[K[57;1H* Makefile Contents::           What makefiles contain.[58;1H* Makefile Names::              How to name your makefile.[59;1H* Include::                     How one makefile can use another makefile.[60;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[61;1H* Remaking Makefiles::          How makefiles get remade.[K[61;1H[1;1H     being "A GNU Manual," and with the Back-Cover Texts as in (a)[2;1H     below.  A copy of the license is included in the section entitled[3;1H     "GNU Free Documentation License."[5;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[6;1H     modify this GNU manual.  Buying copies from the FSF supports it in[7;1H     developing GNU and promoting software freedom."[9;1H* Menu:[11;1H* Overview::                    Overview of `make'.[12;1H* Introduction::                An introduction to `make'.[13;1H* Makefiles::                   Makefiles tell `make' what to do.[14;1H* Rules::                       Rules describe when a file must be remade.[15;1H* Recipes::                     Recipes say how to remake a file.[16;1H* Using Variables::             You can use variables to avoid repetition.[17;1H* Conditionals::                Use or ignore parts of the makefile based[18;1H                                  on the values of variables.[19;1H* Functions::                   Many powerful ways to manipulate text.[20;1H* Invoking make: Running.       How to invoke `make' on the command line.[21;1H* Implicit Rules::              Use implicit rules to treat many files alike,[22;1H                                  based on their file names.[23;1H* Archives::                    How `make' can update library archives.[24;1H* Features::                    Features GNU `make' has over other `make's.[25;1H* Missing::                     What GNU `make' lacks from other `make's.[26;1H* Makefile Conventions::        Conventions for writing makefiles for[27;1H                                  GNU programs.[28;1H* Quick Reference::             A quick reference for experienced users.[29;1H* Error Messages::              A list of common errors generated by `make'.[30;1H* Complex Makefile::            A real example of a straightforward,[31;1H                                  but nontrivial, makefile.[33;1H* GNU Free Documentation License::  License for copying this manual[34;1H* Concept Index::               Index of Concepts[35;1H* Name Index::                  Index of Functions, Variables, & Directives[37;1H --- The Detailed Node Listing ---[39;1HOverview of `make'[41;1H* Preparing::                   Preparing and running make[42;1H* Reading::                     On reading this text[43;1H* Bugs::                        Problems and bugs[45;1HAn Introduction to Makefiles[47;1H* Rule Introduction::           What a rule looks like.[48;1H* Simple Makefile::             A simple makefile[49;1H* How Make Works::              How `make' processes this makefile[50;1H* Variables Simplify::          Variables make makefiles simpler[51;1H* make Deduces::                Letting `make' deduce the recipe[52;1H* Combine By Prerequisite::     Another style of makefile[53;1H* Cleanup::                     Rules for cleaning the directory[55;1HWriting Makefiles[57;1H* Makefile Contents::           What makefiles contain.[58;1H* Makefile Names::              How to name your makefile.[59;1H* Include::                     How one makefile can use another makefile.[60;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[61;1H* Remaking Makefiles::          How makefiles get remade.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines -- 7%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H     below.  A copy of the license is included in the section entitled[61;1H[61;1H[1;1H     "GNU Free Documentation License."[K[2;1H[K[3;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[4;1H     modify this GNU manual.  Buying copies from the FSF supports it in[5;1H     developing GNU and promoting software freedom."[K[6;1H[K[7;1H* Menu:[K[9;1H* Overview::                    Overview of `make'.[10;1H* Introduction::                An introduction to `make'.[11;1H* Makefiles::                   Makefiles tell `make' what to do.[12;1H* Rules::                       Rules describe when a file must be remade.[13;1H* Recipes::                     Recipes say how to remake a file.[14;1H* Using Variables::             You can use variables to avoid repetition.[61;1H[61;1H[1;1H[K[2;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[3;1H     modify this GNU manual.  Buying copies from the FSF supports it in[K[4;1H     developing GNU and promoting software freedom."[K[5;1H[K[6;1H* Menu:[7;1H[K[8;1H* Overview::                    Overview of `make'.[9;1H* Introduction::                An introduction to `make'.[10;1H* Makefiles::                   Makefiles tell `make' what to do.[11;1H* Rules::                       Rules describe when a file must be remade.[12;1H* Recipes::                     Recipes say how to remake a file.[K[13;1H* Using Variables::             You can use variables to avoid repetition.[14;1H* Conditionals::                Use or ignore parts of the makefile based[K[15;1H                                  on the values of variables.[K[16;1H* Functions::                   Many powerful ways to manipulate text.[K[17;1H* Invoking make: Running.       How to invoke `make' on the command line.[18;1H* Implicit Rules::              Use implicit rules to treat many files alike,[19;1H                                  based on their file names.[K[20;1H* Archives::                    How `make' can update library archives.[K[21;1H* Features::                    Features GNU `make' has over other `make's.[K[22;1H* Missing::                     What GNU `make' lacks from other `make's.[23;1H* Makefile Conventions::        Conventions for writing makefiles for[K[24;1H                                  GNU programs.[K[25;1H* Quick Reference::             A quick reference for experienced users.[K[26;1H* Error Messages::              A list of common errors generated by `make'.[27;1H* Complex Makefile::            A real example of a straightforward,[28;1H                                  but nontrivial, makefile.[K[29;1H[K[30;1H* GNU Free Documentation License::  License for copying this manual[K[31;1H* Concept Index::               Index of Concepts[K[32;1H* Name Index::                  Index of Functions, Variables, & Directives[33;1H[K[34;1H --- The Detailed Node Listing ---[K[35;1H[K[36;1HOverview of `make'[37;1H[K[38;1H* Preparing::                   Preparing and running make[39;1H* Reading::                     On reading this text[40;1H* Bugs::                        Problems and bugs[41;1H[K[42;1HAn Introduction to Makefiles[K[43;1H[K[44;1H* Rule Introduction::           What a rule looks like.[45;1H* Simple Makefile::             A simple makefile[46;1H* How Make Works::              How `make' processes this makefile[47;1H* Variables Simplify::          Variables make makefiles simpler[48;1H* make Deduces::                Letting `make' deduce the recipe[49;1H* Combine By Prerequisite::     Another style of makefile[K[50;1H* Cleanup::                     Rules for cleaning the directory[51;1H[K[52;1HWriting Makefiles[K[53;1H[K[54;1H* Makefile Contents::           What makefiles contain.[55;1H* Makefile Names::              How to name your makefile.[56;1H* Include::                     How one makefile can use another makefile.[57;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[58;1H* Remaking Makefiles::          How makefiles get remade.[K[59;1H* Overriding Makefiles::        How to override part of one makefile[K[60;1H                                  with another makefile.[K[61;1H* Reading Makefiles::           How makefiles are parsed.[61;1H[2;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[3;1H     modify this GNU manual.  Buying copies from the FSF supports it in[4;1H     developing GNU and promoting software freedom."[6;1H* Menu:[8;1H* Overview::                    Overview of `make'.[9;1H* Introduction::                An introduction to `make'.[10;1H* Makefiles::                   Makefiles tell `make' what to do.[11;1H* Rules::                       Rules describe when a file must be remade.[12;1H* Recipes::                     Recipes say how to remake a file.[13;1H* Using Variables::             You can use variables to avoid repetition.[14;1H* Conditionals::                Use or ignore parts of the makefile based[15;1H                                  on the values of variables.[16;1H* Functions::                   Many powerful ways to manipulate text.[17;1H* Invoking make: Running.       How to invoke `make' on the command line.[18;1H* Implicit Rules::              Use implicit rules to treat many files alike,[19;1H                                  based on their file names.[20;1H* Archives::                    How `make' can update library archives.[21;1H* Features::                    Features GNU `make' has over other `make's.[22;1H* Missing::                     What GNU `make' lacks from other `make's.[23;1H* Makefile Conventions::        Conventions for writing makefiles for[24;1H                                  GNU programs.[25;1H* Quick Reference::             A quick reference for experienced users.[26;1H* Error Messages::              A list of common errors generated by `make'.[27;1H* Complex Makefile::            A real example of a straightforward,[28;1H                                  but nontrivial, makefile.[30;1H* GNU Free Documentation License::  License for copying this manual[31;1H* Concept Index::               Index of Concepts[32;1H* Name Index::                  Index of Functions, Variables, & Directives[34;1H --- The Detailed Node Listing ---[36;1HOverview of `make'[38;1H* Preparing::                   Preparing and running make[39;1H* Reading::                     On reading this text[40;1H* Bugs::                        Problems and bugs[42;1HAn Introduction to Makefiles[44;1H* Rule Introduction::           What a rule looks like.[45;1H* Simple Makefile::             A simple makefile[46;1H* How Make Works::              How `make' processes this makefile[47;1H* Variables Simplify::          Variables make makefiles simpler[48;1H* make Deduces::                Letting `make' deduce the recipe[49;1H* Combine By Prerequisite::     Another style of makefile[50;1H* Cleanup::                     Rules for cleaning the directory[52;1HWriting Makefiles[54;1H* Makefile Contents::           What makefiles contain.[55;1H* Makefile Names::              How to name your makefile.[56;1H* Include::                     How one makefile can use another makefile.[57;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[58;1H* Remaking Makefiles::          How makefiles get remade.[59;1H* Overriding Makefiles::        How to override part of one makefile[60;1H                                  with another makefile.[61;1H* Reading Makefiles::           How makefiles are parsed.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines -- 8%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and[2;1H     modify this GNU manual.  Buying copies from the FSF supports it in[K[3;1H     developing GNU and promoting software freedom."[K[4;1H[K[5;1H* Menu:[6;1H[K[7;1H* Overview::                    Overview of `make'.[8;1H* Introduction::                An introduction to `make'.[9;1H* Makefiles::                   Makefiles tell `make' what to do.[10;1H* Rules::                       Rules describe when a file must be remade.[11;1H* Recipes::                     Recipes say how to remake a file.[K[12;1H* Using Variables::             You can use variables to avoid repetition.[13;1H* Conditionals::                Use or ignore parts of the makefile based[K[14;1H                                  on the values of variables.[K[15;1H* Functions::                   Many powerful ways to manipulate text.[16;1H* Invoking make: Running.       How to invoke `make' on the command line.[17;1H* Implicit Rules::              Use implicit rules to treat many files alike,[18;1H                                  based on their file names.[K[19;1H* Archives::                    How `make' can update library archives.[20;1H* Features::                    Features GNU `make' has over other `make's.[21;1H* Missing::                     What GNU `make' lacks from other `make's.[K[22;1H* Makefile Conventions::        Conventions for writing makefiles for[K[23;1H                                  GNU programs.[K[24;1H* Quick Reference::             A quick reference for experienced users.[25;1H* Error Messages::              A list of common errors generated by `make'.[26;1H* Complex Makefile::            A real example of a straightforward,[K[27;1H                                  but nontrivial, makefile.[K[28;1H[K[29;1H* GNU Free Documentation License::  License for copying this manual[30;1H* Concept Index::               Index of Concepts[K[31;1H* Name Index::                  Index of Functions, Variables, & Directives[32;1H[K[33;1H --- The Detailed Node Listing ---[34;1H[K[35;1HOverview of `make'[36;1H[K[37;1H* Preparing::                   Preparing and running make[38;1H* Reading::                     On reading this text[K[39;1H* Bugs::                        Problems and bugs[K[40;1H[K[41;1HAn Introduction to Makefiles[42;1H[K[43;1H* Rule Introduction::           What a rule looks like.[44;1H* Simple Makefile::             A simple makefile[K[45;1H* How Make Works::              How `make' processes this makefile[46;1H* Variables Simplify::          Variables make makefiles simpler[K[47;1H* make Deduces::                Letting `make' deduce the recipe[48;1H* Combine By Prerequisite::     Another style of makefile[K[49;1H* Cleanup::                     Rules for cleaning the directory[50;1H[K[51;1HWriting Makefiles[52;1H[K[53;1H* Makefile Contents::           What makefiles contain.[54;1H* Makefile Names::              How to name your makefile.[55;1H* Include::                     How one makefile can use another makefile.[56;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[57;1H* Remaking Makefiles::          How makefiles get remade.[K[58;1H* Overriding Makefiles::        How to override part of one makefile[59;1H                                  with another makefile.[K[60;1H* Reading Makefiles::           How makefiles are parsed.[61;1H* Secondary Expansion::         How and when secondary expansion is performed.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines -- 9%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[61;1H[1;1H     modify this GNU manual.  Buying copies from the FSF supports it in[K[2;1H     developing GNU and promoting software freedom."[K[3;1H[K[4;1H* Menu:[5;1H[K[6;1H* Overview::                    Overview of `make'.[7;1H* Introduction::                An introduction to `make'.[8;1H* Makefiles::                   Makefiles tell `make' what to do.[9;1H* Rules::                       Rules describe when a file must be remade.[10;1H* Recipes::                     Recipes say how to remake a file.[K[11;1H* Using Variables::             You can use variables to avoid repetition.[12;1H* Conditionals::                Use or ignore parts of the makefile based[K[13;1H                                  on the values of variables.[K[14;1H* Functions::                   Many powerful ways to manipulate text.[15;1H* Invoking make: Running.       How to invoke `make' on the command line.[61;1H[61;1H[1;1H     developing GNU and promoting software freedom."[K[2;1H[K[3;1H* Menu:[4;1H[K[5;1H* Overview::                    Overview of `make'.[6;1H* Introduction::                An introduction to `make'.[7;1H* Makefiles::                   Makefiles tell `make' what to do.[8;1H* Rules::                       Rules describe when a file must be remade.[9;1H* Recipes::                     Recipes say how to remake a file.[K[61;1H[61;1H[1;1H[K[2;1H* Menu:[3;1H[K[4;1H* Overview::                    Overview of `make'.[5;1H* Introduction::                An introduction to `make'.[6;1H* Makefiles::                   Makefiles tell `make' what to do.[7;1H* Rules::                       Rules describe when a file must be remade.[8;1H* Recipes::                     Recipes say how to remake a file.[K[9;1H* Using Variables::             You can use variables to avoid repetition.[10;1H* Conditionals::                Use or ignore parts of the makefile based[11;1H                                  on the values of variables.[K[12;1H* Functions::                   Many powerful ways to manipulate text.[K[13;1H* Invoking make: Running.       How to invoke `make' on the command line.[14;1H* Implicit Rules::              Use implicit rules to treat many files alike,[15;1H                                  based on their file names.[K[16;1H* Archives::                    How `make' can update library archives.[K[17;1H* Features::                    Features GNU `make' has over other `make's.[K[18;1H* Missing::                     What GNU `make' lacks from other `make's.[19;1H* Makefile Conventions::        Conventions for writing makefiles for[K[20;1H                                  GNU programs.[K[21;1H* Quick Reference::             A quick reference for experienced users.[K[22;1H* Error Messages::              A list of common errors generated by `make'.[23;1H* Complex Makefile::            A real example of a straightforward,[24;1H                                  but nontrivial, makefile.[K[25;1H[K[26;1H* GNU Free Documentation License::  License for copying this manual[K[27;1H* Concept Index::               Index of Concepts[K[28;1H* Name Index::                  Index of Functions, Variables, & Directives[29;1H[K[30;1H --- The Detailed Node Listing ---[K[31;1H[K[32;1HOverview of `make'[33;1H[K[34;1H* Preparing::                   Preparing and running make[35;1H* Reading::                     On reading this text[36;1H* Bugs::                        Problems and bugs[37;1H[K[38;1HAn Introduction to Makefiles[K[39;1H[K[40;1H* Rule Introduction::           What a rule looks like.[41;1H* Simple Makefile::             A simple makefile[42;1H* How Make Works::              How `make' processes this makefile[43;1H* Variables Simplify::          Variables make makefiles simpler[44;1H* make Deduces::                Letting `make' deduce the recipe[45;1H* Combine By Prerequisite::     Another style of makefile[K[46;1H* Cleanup::                     Rules for cleaning the directory[47;1H[K[48;1HWriting Makefiles[K[49;1H[K[50;1H* Makefile Contents::           What makefiles contain.[51;1H* Makefile Names::              How to name your makefile.[52;1H* Include::                     How one makefile can use another makefile.[53;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[54;1H* Remaking Makefiles::          How makefiles get remade.[K[55;1H* Overriding Makefiles::        How to override part of one makefile[K[56;1H                                  with another makefile.[K[57;1H* Reading Makefiles::           How makefiles are parsed.[58;1H* Secondary Expansion::         How and when secondary expansion is performed.[59;1H[K[60;1HWriting Rules[K[61;1H[K[61;1H[2;1H* Menu:[4;1H* Overview::                    Overview of `make'.[5;1H* Introduction::                An introduction to `make'.[6;1H* Makefiles::                   Makefiles tell `make' what to do.[7;1H* Rules::                       Rules describe when a file must be remade.[8;1H* Recipes::                     Recipes say how to remake a file.[9;1H* Using Variables::             You can use variables to avoid repetition.[10;1H* Conditionals::                Use or ignore parts of the makefile based[11;1H                                  on the values of variables.[12;1H* Functions::                   Many powerful ways to manipulate text.[13;1H* Invoking make: Running.       How to invoke `make' on the command line.[14;1H* Implicit Rules::              Use implicit rules to treat many files alike,[15;1H                                  based on their file names.[16;1H* Archives::                    How `make' can update library archives.[17;1H* Features::                    Features GNU `make' has over other `make's.[18;1H* Missing::                     What GNU `make' lacks from other `make's.[19;1H* Makefile Conventions::        Conventions for writing makefiles for[20;1H                                  GNU programs.[21;1H* Quick Reference::             A quick reference for experienced users.[22;1H* Error Messages::              A list of common errors generated by `make'.[23;1H* Complex Makefile::            A real example of a straightforward,[24;1H                                  but nontrivial, makefile.[26;1H* GNU Free Documentation License::  License for copying this manual[27;1H* Concept Index::               Index of Concepts[28;1H* Name Index::                  Index of Functions, Variables, & Directives[30;1H --- The Detailed Node Listing ---[32;1HOverview of `make'[34;1H* Preparing::                   Preparing and running make[35;1H* Reading::                     On reading this text[36;1H* Bugs::                        Problems and bugs[38;1HAn Introduction to Makefiles[40;1H* Rule Introduction::           What a rule looks like.[41;1H* Simple Makefile::             A simple makefile[42;1H* How Make Works::              How `make' processes this makefile[43;1H* Variables Simplify::          Variables make makefiles simpler[44;1H* make Deduces::                Letting `make' deduce the recipe[45;1H* Combine By Prerequisite::     Another style of makefile[46;1H* Cleanup::                     Rules for cleaning the directory[48;1HWriting Makefiles[50;1H* Makefile Contents::           What makefiles contain.[51;1H* Makefile Names::              How to name your makefile.[52;1H* Include::                     How one makefile can use another makefile.[53;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[54;1H* Remaking Makefiles::          How makefiles get remade.[55;1H* Overriding Makefiles::        How to override part of one makefile[56;1H                                  with another makefile.[57;1H* Reading Makefiles::           How makefiles are parsed.[58;1H* Secondary Expansion::         How and when secondary expansion is performed.[60;1HWriting Rules[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --10%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* Menu:[2;1H[K[3;1H* Overview::                    Overview of `make'.[4;1H* Introduction::                An introduction to `make'.[5;1H* Makefiles::                   Makefiles tell `make' what to do.[6;1H* Rules::                       Rules describe when a file must be remade.[7;1H* Recipes::                     Recipes say how to remake a file.[K[8;1H* Using Variables::             You can use variables to avoid repetition.[9;1H* Conditionals::                Use or ignore parts of the makefile based[K[10;1H                                  on the values of variables.[K[11;1H* Functions::                   Many powerful ways to manipulate text.[12;1H* Invoking make: Running.       How to invoke `make' on the command line.[13;1H* Implicit Rules::              Use implicit rules to treat many files alike,[14;1H                                  based on their file names.[K[15;1H* Archives::                    How `make' can update library archives.[16;1H* Features::                    Features GNU `make' has over other `make's.[61;1H[61;1H[1;1H[K[2;1H* Overview::                    Overview of `make'.[3;1H* Introduction::                An introduction to `make'.[4;1H* Makefiles::                   Makefiles tell `make' what to do.[5;1H* Rules::                       Rules describe when a file must be remade.[6;1H* Recipes::                     Recipes say how to remake a file.[K[7;1H* Using Variables::             You can use variables to avoid repetition.[8;1H* Conditionals::                Use or ignore parts of the makefile based[K[9;1H                                  on the values of variables.[K[10;1H* Functions::                   Many powerful ways to manipulate text.[11;1H* Invoking make: Running.       How to invoke `make' on the command line.[12;1H* Implicit Rules::              Use implicit rules to treat many files alike,[13;1H                                  based on their file names.[K[14;1H* Archives::                    How `make' can update library archives.[15;1H* Features::                    Features GNU `make' has over other `make's.[16;1H* Missing::                     What GNU `make' lacks from other `make's.[K[17;1H* Makefile Conventions::        Conventions for writing makefiles for[K[18;1H                                  GNU programs.[K[19;1H* Quick Reference::             A quick reference for experienced users.[20;1H* Error Messages::              A list of common errors generated by `make'.[21;1H* Complex Makefile::            A real example of a straightforward,[K[22;1H                                  but nontrivial, makefile.[K[23;1H[K[24;1H* GNU Free Documentation License::  License for copying this manual[25;1H* Concept Index::               Index of Concepts[26;1H* Name Index::                  Index of Functions, Variables, & Directives[27;1H[K[28;1H --- The Detailed Node Listing ---[K[30;1HOverview of `make'[K[32;1H* Preparing::                   Preparing and running make[33;1H* Reading::                     On reading this text[34;1H* Bugs::                        Problems and bugs[K[35;1H[K[36;1HAn Introduction to Makefiles[K[38;1H* Rule Introduction::           What a rule looks like.[39;1H* Simple Makefile::             A simple makefile[40;1H* How Make Works::              How `make' processes this makefile[41;1H* Variables Simplify::          Variables make makefiles simpler[42;1H* make Deduces::                Letting `make' deduce the recipe[K[43;1H* Combine By Prerequisite::     Another style of makefile[K[44;1H* Cleanup::                     Rules for cleaning the directory[45;1H[K[46;1HWriting Makefiles[K[48;1H* Makefile Contents::           What makefiles contain.[49;1H* Makefile Names::              How to name your makefile.[50;1H* Include::                     How one makefile can use another makefile.[51;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[52;1H* Remaking Makefiles::          How makefiles get remade.[K[53;1H* Overriding Makefiles::        How to override part of one makefile[K[54;1H                                  with another makefile.[K[55;1H* Reading Makefiles::           How makefiles are parsed.[K[56;1H* Secondary Expansion::         How and when secondary expansion is performed.[57;1H[K[58;1HWriting Rules[K[60;1H* Rule Example::                An example explained.[61;1H* Rule Syntax::                 General syntax explained.[61;1H[2;1H* Overview::                    Overview of `make'.[3;1H* Introduction::                An introduction to `make'.[4;1H* Makefiles::                   Makefiles tell `make' what to do.[5;1H* Rules::                       Rules describe when a file must be remade.[6;1H* Recipes::                     Recipes say how to remake a file.[7;1H* Using Variables::             You can use variables to avoid repetition.[8;1H* Conditionals::                Use or ignore parts of the makefile based[9;1H                                  on the values of variables.[10;1H* Functions::                   Many powerful ways to manipulate text.[11;1H* Invoking make: Running.       How to invoke `make' on the command line.[12;1H* Implicit Rules::              Use implicit rules to treat many files alike,[13;1H                                  based on their file names.[14;1H* Archives::                    How `make' can update library archives.[15;1H* Features::                    Features GNU `make' has over other `make's.[61;1H[1;1H* Overview::                    Overview of `make'.[2;1H* Introduction::                An introduction to `make'.[3;1H* Makefiles::                   Makefiles tell `make' what to do.[4;1H* Rules::                       Rules describe when a file must be remade.[5;1H* Recipes::                     Recipes say how to remake a file.[K[6;1H* Using Variables::             You can use variables to avoid repetition.[7;1H* Conditionals::                Use or ignore parts of the makefile based[K[8;1H                                  on the values of variables.[K[9;1H* Functions::                   Many powerful ways to manipulate text.[10;1H* Invoking make: Running.       How to invoke `make' on the command line.[11;1H* Implicit Rules::              Use implicit rules to treat many files alike,[12;1H                                  based on their file names.[K[13;1H* Archives::                    How `make' can update library archives.[14;1H* Features::                    Features GNU `make' has over other `make's.[15;1H* Missing::                     What GNU `make' lacks from other `make's.[K[16;1H* Makefile Conventions::        Conventions for writing makefiles for[K[17;1H                                  GNU programs.[K[18;1H* Quick Reference::             A quick reference for experienced users.[19;1H* Error Messages::              A list of common errors generated by `make'.[20;1H* Complex Makefile::            A real example of a straightforward,[K[21;1H                                  but nontrivial, makefile.[K[22;1H[K[23;1H* GNU Free Documentation License::  License for copying this manual[24;1H* Concept Index::               Index of Concepts[K[25;1H* Name Index::                  Index of Functions, Variables, & Directives[26;1H[K[27;1H --- The Detailed Node Listing ---[28;1H[K[29;1HOverview of `make'[30;1H[K[31;1H* Preparing::                   Preparing and running make[32;1H* Reading::                     On reading this text[K[33;1H* Bugs::                        Problems and bugs[K[34;1H[K[35;1HAn Introduction to Makefiles[36;1H[K[37;1H* Rule Introduction::           What a rule looks like.[38;1H* Simple Makefile::             A simple makefile[K[39;1H* How Make Works::              How `make' processes this makefile[40;1H* Variables Simplify::          Variables make makefiles simpler[K[41;1H* make Deduces::                Letting `make' deduce the recipe[42;1H* Combine By Prerequisite::     Another style of makefile[K[43;1H* Cleanup::                     Rules for cleaning the directory[44;1H[K[45;1HWriting Makefiles[46;1H[K[47;1H* Makefile Contents::           What makefiles contain.[48;1H* Makefile Names::              How to name your makefile.[49;1H* Include::                     How one makefile can use another makefile.[50;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[51;1H* Remaking Makefiles::          How makefiles get remade.[K[52;1H* Overriding Makefiles::        How to override part of one makefile[53;1H                                  with another makefile.[K[54;1H* Reading Makefiles::           How makefiles are parsed.[55;1H* Secondary Expansion::         How and when secondary expansion is performed.[56;1H[K[57;1HWriting Rules[58;1H[K[59;1H* Rule Example::                An example explained.[60;1H* Rule Syntax::                 General syntax explained.[61;1H* Prerequisite Types::          There are two types of prerequisites.[61;1H[1;1H* Overview::                    Overview of `make'.[2;1H* Introduction::                An introduction to `make'.[3;1H* Makefiles::                   Makefiles tell `make' what to do.[4;1H* Rules::                       Rules describe when a file must be remade.[5;1H* Recipes::                     Recipes say how to remake a file.[6;1H* Using Variables::             You can use variables to avoid repetition.[7;1H* Conditionals::                Use or ignore parts of the makefile based[8;1H                                  on the values of variables.[9;1H* Functions::                   Many powerful ways to manipulate text.[10;1H* Invoking make: Running.       How to invoke `make' on the command line.[11;1H* Implicit Rules::              Use implicit rules to treat many files alike,[12;1H                                  based on their file names.[13;1H* Archives::                    How `make' can update library archives.[14;1H* Features::                    Features GNU `make' has over other `make's.[15;1H* Missing::                     What GNU `make' lacks from other `make's.[16;1H* Makefile Conventions::        Conventions for writing makefiles for[17;1H                                  GNU programs.[18;1H* Quick Reference::             A quick reference for experienced users.[19;1H* Error Messages::              A list of common errors generated by `make'.[20;1H* Complex Makefile::            A real example of a straightforward,[21;1H                                  but nontrivial, makefile.[23;1H* GNU Free Documentation License::  License for copying this manual[24;1H* Concept Index::               Index of Concepts[25;1H* Name Index::                  Index of Functions, Variables, & Directives[27;1H --- The Detailed Node Listing ---[29;1HOverview of `make'[31;1H* Preparing::                   Preparing and running make[32;1H* Reading::                     On reading this text[33;1H* Bugs::                        Problems and bugs[35;1HAn Introduction to Makefiles[37;1H* Rule Introduction::           What a rule looks like.[38;1H* Simple Makefile::             A simple makefile[39;1H* How Make Works::              How `make' processes this makefile[40;1H* Variables Simplify::          Variables make makefiles simpler[41;1H* make Deduces::                Letting `make' deduce the recipe[42;1H* Combine By Prerequisite::     Another style of makefile[43;1H* Cleanup::                     Rules for cleaning the directory[45;1HWriting Makefiles[47;1H* Makefile Contents::           What makefiles contain.[48;1H* Makefile Names::              How to name your makefile.[49;1H* Include::                     How one makefile can use another makefile.[50;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[51;1H* Remaking Makefiles::          How makefiles get remade.[52;1H* Overriding Makefiles::        How to override part of one makefile[53;1H                                  with another makefile.[54;1H* Reading Makefiles::           How makefiles are parsed.[55;1H* Secondary Expansion::         How and when secondary expansion is performed.[57;1HWriting Rules[59;1H* Rule Example::                An example explained.[60;1H* Rule Syntax::                 General syntax explained.[61;1H* Prerequisite Types::          There are two types of prerequisites.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --11%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* Introduction::                An introduction to `make'.[2;1H* Makefiles::                   Makefiles tell `make' what to do.[3;1H* Rules::                       Rules describe when a file must be remade.[4;1H* Recipes::                     Recipes say how to remake a file.[K[5;1H* Using Variables::             You can use variables to avoid repetition.[6;1H* Conditionals::                Use or ignore parts of the makefile based[K[7;1H                                  on the values of variables.[K[8;1H* Functions::                   Many powerful ways to manipulate text.[9;1H* Invoking make: Running.       How to invoke `make' on the command line.[10;1H* Implicit Rules::              Use implicit rules to treat many files alike,[11;1H                                  based on their file names.[K[12;1H* Archives::                    How `make' can update library archives.[13;1H* Features::                    Features GNU `make' has over other `make's.[14;1H* Missing::                     What GNU `make' lacks from other `make's.[K[61;1H[61;1H[1;1H* Makefiles::                   Makefiles tell `make' what to do.[2;1H* Rules::                       Rules describe when a file must be remade.[3;1H* Recipes::                     Recipes say how to remake a file.[K[4;1H* Using Variables::             You can use variables to avoid repetition.[5;1H* Conditionals::                Use or ignore parts of the makefile based[K[6;1H                                  on the values of variables.[K[7;1H* Functions::                   Many powerful ways to manipulate text.[8;1H* Invoking make: Running.       How to invoke `make' on the command line.[9;1H* Implicit Rules::              Use implicit rules to treat many files alike,[10;1H                                  based on their file names.[K[61;1H[61;1H[1;1H* Rules::                       Rules describe when a file must be remade.[2;1H* Recipes::                     Recipes say how to remake a file.[K[3;1H* Using Variables::             You can use variables to avoid repetition.[4;1H* Conditionals::                Use or ignore parts of the makefile based[K[5;1H                                  on the values of variables.[K[6;1H* Functions::                   Many powerful ways to manipulate text.[7;1H* Invoking make: Running.       How to invoke `make' on the command line.[8;1H* Implicit Rules::              Use implicit rules to treat many files alike,[9;1H                                  based on their file names.[K[10;1H* Archives::                    How `make' can update library archives.[11;1H* Features::                    Features GNU `make' has over other `make's.[12;1H* Missing::                     What GNU `make' lacks from other `make's.[13;1H* Makefile Conventions::        Conventions for writing makefiles for[K[14;1H                                  GNU programs.[K[61;1H[61;1H[1;1H* Recipes::                     Recipes say how to remake a file.[K[61;1H[61;1H[1;1H* Using Variables::             You can use variables to avoid repetition.[2;1H* Conditionals::                Use or ignore parts of the makefile based[3;1H                                  on the values of variables.[K[4;1H* Functions::                   Many powerful ways to manipulate text.[K[5;1H* Invoking make: Running.       How to invoke `make' on the command line.[6;1H* Implicit Rules::              Use implicit rules to treat many files alike,[7;1H                                  based on their file names.[K[8;1H* Archives::                    How `make' can update library archives.[K[9;1H* Features::                    Features GNU `make' has over other `make's.[10;1H* Missing::                     What GNU `make' lacks from other `make's.[11;1H* Makefile Conventions::        Conventions for writing makefiles for[K[12;1H                                  GNU programs.[K[13;1H* Quick Reference::             A quick reference for experienced users.[14;1H* Error Messages::              A list of common errors generated by `make'.[15;1H* Complex Makefile::            A real example of a straightforward,[K[16;1H                                  but nontrivial, makefile.[K[17;1H[K[18;1H* GNU Free Documentation License::  License for copying this manual[K[19;1H* Concept Index::               Index of Concepts[K[20;1H* Name Index::                  Index of Functions, Variables, & Directives[21;1H[K[22;1H --- The Detailed Node Listing ---[23;1H[K[24;1HOverview of `make'[K[61;1H[61;1H[1;1H* Conditionals::                Use or ignore parts of the makefile based[K[2;1H                                  on the values of variables.[K[3;1H* Functions::                   Many powerful ways to manipulate text.[4;1H* Invoking make: Running.       How to invoke `make' on the command line.[5;1H* Implicit Rules::              Use implicit rules to treat many files alike,[6;1H                                  based on their file names.[K[7;1H* Archives::                    How `make' can update library archives.[8;1H* Features::                    Features GNU `make' has over other `make's.[9;1H* Missing::                     What GNU `make' lacks from other `make's.[K[10;1H* Makefile Conventions::        Conventions for writing makefiles for[K[11;1H                                  GNU programs.[K[12;1H* Quick Reference::             A quick reference for experienced users.[13;1H* Error Messages::              A list of common errors generated by `make'.[14;1H* Complex Makefile::            A real example of a straightforward,[K[15;1H                                  but nontrivial, makefile.[K[16;1H[K[17;1H* GNU Free Documentation License::  License for copying this manual[18;1H* Concept Index::               Index of Concepts[K[19;1H* Name Index::                  Index of Functions, Variables, & Directives[20;1H[K[21;1H --- The Detailed Node Listing ---[22;1H[K[23;1HOverview of `make'[24;1H[K[25;1H* Preparing::                   Preparing and running make[K[26;1H* Reading::                     On reading this text[27;1H* Bugs::                        Problems and bugs[29;1HAn Introduction to Makefiles[31;1H* Rule Introduction::           What a rule looks like.[K[32;1H* Simple Makefile::             A simple makefile[K[33;1H* How Make Works::              How `make' processes this makefile[34;1H* Variables Simplify::          Variables make makefiles simpler[35;1H* make Deduces::                Letting `make' deduce the recipe[36;1H* Combine By Prerequisite::     Another style of makefile[37;1H* Cleanup::                     Rules for cleaning the directory[38;1H[K[39;1HWriting Makefiles[K[40;1H[K[41;1H* Makefile Contents::           What makefiles contain.[K[42;1H* Makefile Names::              How to name your makefile.[43;1H* Include::                     How one makefile can use another makefile.[44;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[45;1H* Remaking Makefiles::          How makefiles get remade.[46;1H* Overriding Makefiles::        How to override part of one makefile[47;1H                                  with another makefile.[48;1H* Reading Makefiles::           How makefiles are parsed.[K[49;1H* Secondary Expansion::         How and when secondary expansion is performed.[50;1H[K[51;1HWriting Rules[K[52;1H[K[53;1H* Rule Example::                An example explained.[K[54;1H* Rule Syntax::                 General syntax explained.[55;1H* Prerequisite Types::          There are two types of prerequisites.[K[56;1H* Wildcards::                   Using wildcard characters such as `*'.[57;1H* Directory Search::            Searching other directories for source files.[58;1H* Phony Targets::               Using a target that is not a real file's name.[59;1H* Force Targets::               You can use a target without a recipe[60;1H                                  or prerequisites to mark other targets[61;1H                                  as phony.[K[61;1H[1;1H* Conditionals::                Use or ignore parts of the makefile based[2;1H                                  on the values of variables.[3;1H* Functions::                   Many powerful ways to manipulate text.[4;1H* Invoking make: Running.       How to invoke `make' on the command line.[5;1H* Implicit Rules::              Use implicit rules to treat many files alike,[6;1H                                  based on their file names.[7;1H* Archives::                    How `make' can update library archives.[8;1H* Features::                    Features GNU `make' has over other `make's.[9;1H* Missing::                     What GNU `make' lacks from other `make's.[10;1H* Makefile Conventions::        Conventions for writing makefiles for[11;1H                                  GNU programs.[12;1H* Quick Reference::             A quick reference for experienced users.[13;1H* Error Messages::              A list of common errors generated by `make'.[14;1H* Complex Makefile::            A real example of a straightforward,[15;1H                                  but nontrivial, makefile.[17;1H* GNU Free Documentation License::  License for copying this manual[18;1H* Concept Index::               Index of Concepts[19;1H* Name Index::                  Index of Functions, Variables, & Directives[21;1H --- The Detailed Node Listing ---[23;1HOverview of `make'[25;1H* Preparing::                   Preparing and running make[26;1H* Reading::                     On reading this text[27;1H* Bugs::                        Problems and bugs[29;1HAn Introduction to Makefiles[31;1H* Rule Introduction::           What a rule looks like.[32;1H* Simple Makefile::             A simple makefile[33;1H* How Make Works::              How `make' processes this makefile[34;1H* Variables Simplify::          Variables make makefiles simpler[35;1H* make Deduces::                Letting `make' deduce the recipe[36;1H* Combine By Prerequisite::     Another style of makefile[37;1H* Cleanup::                     Rules for cleaning the directory[39;1HWriting Makefiles[41;1H* Makefile Contents::           What makefiles contain.[42;1H* Makefile Names::              How to name your makefile.[43;1H* Include::                     How one makefile can use another makefile.[44;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[45;1H* Remaking Makefiles::          How makefiles get remade.[46;1H* Overriding Makefiles::        How to override part of one makefile[47;1H                                  with another makefile.[48;1H* Reading Makefiles::           How makefiles are parsed.[49;1H* Secondary Expansion::         How and when secondary expansion is performed.[51;1HWriting Rules[53;1H* Rule Example::                An example explained.[54;1H* Rule Syntax::                 General syntax explained.[55;1H* Prerequisite Types::          There are two types of prerequisites.[56;1H* Wildcards::                   Using wildcard characters such as `*'.[57;1H* Directory Search::            Searching other directories for source files.[58;1H* Phony Targets::               Using a target that is not a real file's name.[59;1H* Force Targets::               You can use a target without a recipe[60;1H                                  or prerequisites to mark other targets[61;1H                                  as phony.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --13%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H                                  on the values of variables.[K[2;1H* Functions::                   Many powerful ways to manipulate text.[3;1H* Invoking make: Running.       How to invoke `make' on the command line.[4;1H* Implicit Rules::              Use implicit rules to treat many files alike,[5;1H                                  based on their file names.[K[6;1H* Archives::                    How `make' can update library archives.[7;1H* Features::                    Features GNU `make' has over other `make's.[8;1H* Missing::                     What GNU `make' lacks from other `make's.[K[9;1H* Makefile Conventions::        Conventions for writing makefiles for[K[10;1H                                  GNU programs.[K[11;1H* Quick Reference::             A quick reference for experienced users.[12;1H* Error Messages::              A list of common errors generated by `make'.[13;1H* Complex Makefile::            A real example of a straightforward,[K[14;1H                                  but nontrivial, makefile.[K[15;1H[K[16;1H* GNU Free Documentation License::  License for copying this manual[17;1H* Concept Index::               Index of Concepts[K[61;1H[61;1H[1;1H* Functions::                   Many powerful ways to manipulate text.[2;1H* Invoking make: Running.       How to invoke `make' on the command line.[3;1H* Implicit Rules::              Use implicit rules to treat many files alike,[4;1H                                  based on their file names.[K[5;1H* Archives::                    How `make' can update library archives.[6;1H* Features::                    Features GNU `make' has over other `make's.[7;1H* Missing::                     What GNU `make' lacks from other `make's.[K[61;1H[61;1H[1;1H* Invoking make: Running.       How to invoke `make' on the command line.[2;1H* Implicit Rules::              Use implicit rules to treat many files alike,[3;1H                                  based on their file names.[K[4;1H* Archives::                    How `make' can update library archives.[5;1H* Features::                    Features GNU `make' has over other `make's.[6;1H* Missing::                     What GNU `make' lacks from other `make's.[K[7;1H* Makefile Conventions::        Conventions for writing makefiles for[K[8;1H                                  GNU programs.[K[9;1H* Quick Reference::             A quick reference for experienced users.[10;1H* Error Messages::              A list of common errors generated by `make'.[11;1H* Complex Makefile::            A real example of a straightforward,[K[12;1H                                  but nontrivial, makefile.[K[13;1H[K[14;1H* GNU Free Documentation License::  License for copying this manual[15;1H* Concept Index::               Index of Concepts[16;1H* Name Index::                  Index of Functions, Variables, & Directives[17;1H[K[18;1H --- The Detailed Node Listing ---[K[19;1H[K[20;1HOverview of `make'[21;1H[K[22;1H* Preparing::                   Preparing and running make[23;1H* Reading::                     On reading this text[24;1H* Bugs::                        Problems and bugs[25;1H[K[26;1HAn Introduction to Makefiles[K[27;1H[K[28;1H* Rule Introduction::           What a rule looks like.[29;1H* Simple Makefile::             A simple makefile[30;1H* How Make Works::              How `make' processes this makefile[31;1H* Variables Simplify::          Variables make makefiles simpler[32;1H* make Deduces::                Letting `make' deduce the recipe[33;1H* Combine By Prerequisite::     Another style of makefile[K[34;1H* Cleanup::                     Rules for cleaning the directory[35;1H[K[36;1HWriting Makefiles[K[37;1H[K[38;1H* Makefile Contents::           What makefiles contain.[39;1H* Makefile Names::              How to name your makefile.[40;1H* Include::                     How one makefile can use another makefile.[41;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[42;1H* Remaking Makefiles::          How makefiles get remade.[K[43;1H* Overriding Makefiles::        How to override part of one makefile[K[44;1H                                  with another makefile.[K[45;1H* Reading Makefiles::           How makefiles are parsed.[46;1H* Secondary Expansion::         How and when secondary expansion is performed.[47;1H[K[48;1HWriting Rules[K[49;1H[K[50;1H* Rule Example::                An example explained.[51;1H* Rule Syntax::                 General syntax explained.[52;1H* Prerequisite Types::          There are two types of prerequisites.[53;1H* Wildcards::                   Using wildcard characters such as `*'.[54;1H* Directory Search::            Searching other directories for source files.[55;1H* Phony Targets::               Using a target that is not a real file's name.[56;1H* Force Targets::               You can use a target without a recipe[K[57;1H                                  or prerequisites to mark other targets[K[58;1H                                  as phony.[K[59;1H* Empty Targets::               When only the date matters and the[K[60;1H                                  files are empty.[K[61;1H* Special Targets::             Targets with special built-in meanings.[61;1H[1;1H* Invoking make: Running.       How to invoke `make' on the command line.[2;1H* Implicit Rules::              Use implicit rules to treat many files alike,[3;1H                                  based on their file names.[4;1H* Archives::                    How `make' can update library archives.[5;1H* Features::                    Features GNU `make' has over other `make's.[6;1H* Missing::                     What GNU `make' lacks from other `make's.[7;1H* Makefile Conventions::        Conventions for writing makefiles for[8;1H                                  GNU programs.[9;1H* Quick Reference::             A quick reference for experienced users.[10;1H* Error Messages::              A list of common errors generated by `make'.[11;1H* Complex Makefile::            A real example of a straightforward,[12;1H                                  but nontrivial, makefile.[14;1H* GNU Free Documentation License::  License for copying this manual[15;1H* Concept Index::               Index of Concepts[16;1H* Name Index::                  Index of Functions, Variables, & Directives[18;1H --- The Detailed Node Listing ---[20;1HOverview of `make'[22;1H* Preparing::                   Preparing and running make[23;1H* Reading::                     On reading this text[24;1H* Bugs::                        Problems and bugs[26;1HAn Introduction to Makefiles[28;1H* Rule Introduction::           What a rule looks like.[29;1H* Simple Makefile::             A simple makefile[30;1H* How Make Works::              How `make' processes this makefile[31;1H* Variables Simplify::          Variables make makefiles simpler[32;1H* make Deduces::                Letting `make' deduce the recipe[33;1H* Combine By Prerequisite::     Another style of makefile[34;1H* Cleanup::                     Rules for cleaning the directory[36;1HWriting Makefiles[38;1H* Makefile Contents::           What makefiles contain.[39;1H* Makefile Names::              How to name your makefile.[40;1H* Include::                     How one makefile can use another makefile.[41;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[42;1H* Remaking Makefiles::          How makefiles get remade.[43;1H* Overriding Makefiles::        How to override part of one makefile[44;1H                                  with another makefile.[45;1H* Reading Makefiles::           How makefiles are parsed.[46;1H* Secondary Expansion::         How and when secondary expansion is performed.[48;1HWriting Rules[50;1H* Rule Example::                An example explained.[51;1H* Rule Syntax::                 General syntax explained.[52;1H* Prerequisite Types::          There are two types of prerequisites.[53;1H* Wildcards::                   Using wildcard characters such as `*'.[54;1H* Directory Search::            Searching other directories for source files.[55;1H* Phony Targets::               Using a target that is not a real file's name.[56;1H* Force Targets::               You can use a target without a recipe[57;1H                                  or prerequisites to mark other targets[58;1H                                  as phony.[59;1H* Empty Targets::               When only the date matters and the[60;1H                                  files are empty.[61;1H* Special Targets::             Targets with special built-in meanings.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --14%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* Implicit Rules::              Use implicit rules to treat many files alike,[2;1H                                  based on their file names.[K[3;1H* Archives::                    How `make' can update library archives.[4;1H* Features::                    Features GNU `make' has over other `make's.[5;1H* Missing::                     What GNU `make' lacks from other `make's.[K[6;1H* Makefile Conventions::        Conventions for writing makefiles for[K[7;1H                                  GNU programs.[K[8;1H* Quick Reference::             A quick reference for experienced users.[9;1H* Error Messages::              A list of common errors generated by `make'.[10;1H* Complex Makefile::            A real example of a straightforward,[K[11;1H                                  but nontrivial, makefile.[K[12;1H[K[13;1H* GNU Free Documentation License::  License for copying this manual[14;1H* Concept Index::               Index of Concepts[K[61;1H[61;1H[1;1H                                  based on their file names.[K[2;1H* Archives::                    How `make' can update library archives.[3;1H* Features::                    Features GNU `make' has over other `make's.[4;1H* Missing::                     What GNU `make' lacks from other `make's.[K[5;1H* Makefile Conventions::        Conventions for writing makefiles for[K[6;1H                                  GNU programs.[K[7;1H* Quick Reference::             A quick reference for experienced users.[8;1H* Error Messages::              A list of common errors generated by `make'.[9;1H* Complex Makefile::            A real example of a straightforward,[K[10;1H                                  but nontrivial, makefile.[K[11;1H[K[12;1H* GNU Free Documentation License::  License for copying this manual[13;1H* Concept Index::               Index of Concepts[K[14;1H* Name Index::                  Index of Functions, Variables, & Directives[15;1H[K[16;1H --- The Detailed Node Listing ---[K[18;1HOverview of `make'[K[20;1H* Preparing::                   Preparing and running make[21;1H* Reading::                     On reading this text[22;1H* Bugs::                        Problems and bugs[K[23;1H[K[24;1HAn Introduction to Makefiles[K[26;1H* Rule Introduction::           What a rule looks like.[27;1H* Simple Makefile::             A simple makefile[28;1H* How Make Works::              How `make' processes this makefile[29;1H* Variables Simplify::          Variables make makefiles simpler[30;1H* make Deduces::                Letting `make' deduce the recipe[K[31;1H* Combine By Prerequisite::     Another style of makefile[K[32;1H* Cleanup::                     Rules for cleaning the directory[33;1H[K[34;1HWriting Makefiles[K[36;1H* Makefile Contents::           What makefiles contain.[37;1H* Makefile Names::              How to name your makefile.[38;1H* Include::                     How one makefile can use another makefile.[39;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[40;1H* Remaking Makefiles::          How makefiles get remade.[K[41;1H* Overriding Makefiles::        How to override part of one makefile[K[42;1H                                  with another makefile.[K[43;1H* Reading Makefiles::           How makefiles are parsed.[K[44;1H* Secondary Expansion::         How and when secondary expansion is performed.[45;1H[K[61;1H[61;1H[1;1H* Archives::                    How `make' can update library archives.[2;1H* Features::                    Features GNU `make' has over other `make's.[3;1H* Missing::                     What GNU `make' lacks from other `make's.[K[4;1H* Makefile Conventions::        Conventions for writing makefiles for[K[5;1H                                  GNU programs.[K[6;1H* Quick Reference::             A quick reference for experienced users.[7;1H* Error Messages::              A list of common errors generated by `make'.[8;1H* Complex Makefile::            A real example of a straightforward,[K[9;1H                                  but nontrivial, makefile.[K[10;1H[K[11;1H* GNU Free Documentation License::  License for copying this manual[12;1H* Concept Index::               Index of Concepts[K[13;1H* Name Index::                  Index of Functions, Variables, & Directives[14;1H[K[15;1H --- The Detailed Node Listing ---[16;1H[K[17;1HOverview of `make'[18;1H[K[19;1H* Preparing::                   Preparing and running make[20;1H* Reading::                     On reading this text[K[21;1H* Bugs::                        Problems and bugs[K[22;1H[K[23;1HAn Introduction to Makefiles[24;1H[K[25;1H* Rule Introduction::           What a rule looks like.[26;1H* Simple Makefile::             A simple makefile[K[27;1H* How Make Works::              How `make' processes this makefile[28;1H* Variables Simplify::          Variables make makefiles simpler[K[29;1H* make Deduces::                Letting `make' deduce the recipe[30;1H* Combine By Prerequisite::     Another style of makefile[K[31;1H* Cleanup::                     Rules for cleaning the directory[32;1H[K[33;1HWriting Makefiles[34;1H[K[35;1H* Makefile Contents::           What makefiles contain.[36;1H* Makefile Names::              How to name your makefile.[37;1H* Include::                     How one makefile can use another makefile.[38;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[39;1H* Remaking Makefiles::          How makefiles get remade.[K[40;1H* Overriding Makefiles::        How to override part of one makefile[41;1H                                  with another makefile.[K[42;1H* Reading Makefiles::           How makefiles are parsed.[43;1H* Secondary Expansion::         How and when secondary expansion is performed.[44;1H[K[45;1HWriting Rules[46;1H[K[47;1H* Rule Example::                An example explained.[48;1H* Rule Syntax::                 General syntax explained.[49;1H* Prerequisite Types::          There are two types of prerequisites.[50;1H* Wildcards::                   Using wildcard characters such as `*'.[51;1H* Directory Search::            Searching other directories for source files.[52;1H* Phony Targets::               Using a target that is not a real file's name.[53;1H* Force Targets::               You can use a target without a recipe[K[54;1H                                  or prerequisites to mark other targets[K[55;1H                                  as phony.[K[56;1H* Empty Targets::               When only the date matters and the[K[57;1H                                  files are empty.[K[58;1H* Special Targets::             Targets with special built-in meanings.[59;1H* Multiple Targets::            When to make use of several targets in a rule.[60;1H* Multiple Rules::              How to use several rules with the same target.[61;1H* Static Pattern::              Static pattern rules apply to multiple targets[61;1H[1;1H* Archives::                    How `make' can update library archives.[2;1H* Features::                    Features GNU `make' has over other `make's.[3;1H* Missing::                     What GNU `make' lacks from other `make's.[4;1H* Makefile Conventions::        Conventions for writing makefiles for[5;1H                                  GNU programs.[6;1H* Quick Reference::             A quick reference for experienced users.[7;1H* Error Messages::              A list of common errors generated by `make'.[8;1H* Complex Makefile::            A real example of a straightforward,[9;1H                                  but nontrivial, makefile.[11;1H* GNU Free Documentation License::  License for copying this manual[12;1H* Concept Index::               Index of Concepts[13;1H* Name Index::                  Index of Functions, Variables, & Directives[15;1H --- The Detailed Node Listing ---[17;1HOverview of `make'[19;1H* Preparing::                   Preparing and running make[20;1H* Reading::                     On reading this text[21;1H* Bugs::                        Problems and bugs[23;1HAn Introduction to Makefiles[25;1H* Rule Introduction::           What a rule looks like.[26;1H* Simple Makefile::             A simple makefile[27;1H* How Make Works::              How `make' processes this makefile[28;1H* Variables Simplify::          Variables make makefiles simpler[29;1H* make Deduces::                Letting `make' deduce the recipe[30;1H* Combine By Prerequisite::     Another style of makefile[31;1H* Cleanup::                     Rules for cleaning the directory[33;1HWriting Makefiles[35;1H* Makefile Contents::           What makefiles contain.[36;1H* Makefile Names::              How to name your makefile.[37;1H* Include::                     How one makefile can use another makefile.[38;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[39;1H* Remaking Makefiles::          How makefiles get remade.[40;1H* Overriding Makefiles::        How to override part of one makefile[41;1H                                  with another makefile.[42;1H* Reading Makefiles::           How makefiles are parsed.[43;1H* Secondary Expansion::         How and when secondary expansion is performed.[45;1HWriting Rules[47;1H* Rule Example::                An example explained.[48;1H* Rule Syntax::                 General syntax explained.[49;1H* Prerequisite Types::          There are two types of prerequisites.[50;1H* Wildcards::                   Using wildcard characters such as `*'.[51;1H* Directory Search::            Searching other directories for source files.[52;1H* Phony Targets::               Using a target that is not a real file's name.[53;1H* Force Targets::               You can use a target without a recipe[54;1H                                  or prerequisites to mark other targets[55;1H                                  as phony.[56;1H* Empty Targets::               When only the date matters and the[57;1H                                  files are empty.[58;1H* Special Targets::             Targets with special built-in meanings.[59;1H* Multiple Targets::            When to make use of several targets in a rule.[60;1H* Multiple Rules::              How to use several rules with the same target.[61;1H* Static Pattern::              Static pattern rules apply to multiple targets[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --15%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* Features::                    Features GNU `make' has over other `make's.[2;1H* Missing::                     What GNU `make' lacks from other `make's.[K[3;1H* Makefile Conventions::        Conventions for writing makefiles for[K[4;1H                                  GNU programs.[K[5;1H* Quick Reference::             A quick reference for experienced users.[6;1H* Error Messages::              A list of common errors generated by `make'.[7;1H* Complex Makefile::            A real example of a straightforward,[K[8;1H                                  but nontrivial, makefile.[K[9;1H[K[10;1H* GNU Free Documentation License::  License for copying this manual[11;1H* Concept Index::               Index of Concepts[K[12;1H* Name Index::                  Index of Functions, Variables, & Directives[13;1H[K[14;1H --- The Detailed Node Listing ---[15;1H[K[16;1HOverview of `make'[17;1H[K[18;1H* Preparing::                   Preparing and running make[61;1H[61;1H[1;1H* Missing::                     What GNU `make' lacks from other `make's.[K[2;1H* Makefile Conventions::        Conventions for writing makefiles for[K[3;1H                                  GNU programs.[K[4;1H* Quick Reference::             A quick reference for experienced users.[5;1H* Error Messages::              A list of common errors generated by `make'.[6;1H* Complex Makefile::            A real example of a straightforward,[K[7;1H                                  but nontrivial, makefile.[K[8;1H[K[9;1H* GNU Free Documentation License::  License for copying this manual[61;1H[61;1H[1;1H* Makefile Conventions::        Conventions for writing makefiles for[K[2;1H                                  GNU programs.[K[3;1H* Quick Reference::             A quick reference for experienced users.[4;1H* Error Messages::              A list of common errors generated by `make'.[5;1H* Complex Makefile::            A real example of a straightforward,[K[6;1H                                  but nontrivial, makefile.[K[7;1H[K[8;1H* GNU Free Documentation License::  License for copying this manual[9;1H* Concept Index::               Index of Concepts[K[10;1H* Name Index::                  Index of Functions, Variables, & Directives[11;1H[K[12;1H --- The Detailed Node Listing ---[K[14;1HOverview of `make'[K[16;1H* Preparing::                   Preparing and running make[17;1H* Reading::                     On reading this text[18;1H* Bugs::                        Problems and bugs[K[19;1H[K[20;1HAn Introduction to Makefiles[K[21;1H[K[22;1H* Rule Introduction::           What a rule looks like.[23;1H* Simple Makefile::             A simple makefile[24;1H* How Make Works::              How `make' processes this makefile[25;1H* Variables Simplify::          Variables make makefiles simpler[26;1H* make Deduces::                Letting `make' deduce the recipe[27;1H* Combine By Prerequisite::     Another style of makefile[K[28;1H* Cleanup::                     Rules for cleaning the directory[29;1H[K[30;1HWriting Makefiles[K[31;1H[K[32;1H* Makefile Contents::           What makefiles contain.[33;1H* Makefile Names::              How to name your makefile.[34;1H* Include::                     How one makefile can use another makefile.[35;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[36;1H* Remaking Makefiles::          How makefiles get remade.[K[37;1H* Overriding Makefiles::        How to override part of one makefile[K[38;1H                                  with another makefile.[K[39;1H* Reading Makefiles::           How makefiles are parsed.[40;1H* Secondary Expansion::         How and when secondary expansion is performed.[41;1H[K[42;1HWriting Rules[K[43;1H[K[44;1H* Rule Example::                An example explained.[45;1H* Rule Syntax::                 General syntax explained.[46;1H* Prerequisite Types::          There are two types of prerequisites.[47;1H* Wildcards::                   Using wildcard characters such as `*'.[48;1H* Directory Search::            Searching other directories for source files.[49;1H* Phony Targets::               Using a target that is not a real file's name.[50;1H* Force Targets::               You can use a target without a recipe[K[51;1H                                  or prerequisites to mark other targets[K[52;1H                                  as phony.[K[53;1H* Empty Targets::               When only the date matters and the[K[54;1H                                  files are empty.[K[55;1H* Special Targets::             Targets with special built-in meanings.[56;1H* Multiple Targets::            When to make use of several targets in a rule.[57;1H* Multiple Rules::              How to use several rules with the same target.[58;1H* Static Pattern::              Static pattern rules apply to multiple targets[59;1H                                  and can vary the prerequisites according to[K[60;1H                                  the target name.[K[61;1H* Double-Colon::                How to use a special kind of rule to allow[K[61;1H[1;1H* Makefile Conventions::        Conventions for writing makefiles for[2;1H                                  GNU programs.[3;1H* Quick Reference::             A quick reference for experienced users.[4;1H* Error Messages::              A list of common errors generated by `make'.[5;1H* Complex Makefile::            A real example of a straightforward,[6;1H                                  but nontrivial, makefile.[8;1H* GNU Free Documentation License::  License for copying this manual[9;1H* Concept Index::               Index of Concepts[10;1H* Name Index::                  Index of Functions, Variables, & Directives[12;1H --- The Detailed Node Listing ---[14;1HOverview of `make'[16;1H* Preparing::                   Preparing and running make[17;1H* Reading::                     On reading this text[18;1H* Bugs::                        Problems and bugs[20;1HAn Introduction to Makefiles[22;1H* Rule Introduction::           What a rule looks like.[23;1H* Simple Makefile::             A simple makefile[24;1H* How Make Works::              How `make' processes this makefile[25;1H* Variables Simplify::          Variables make makefiles simpler[26;1H* make Deduces::                Letting `make' deduce the recipe[27;1H* Combine By Prerequisite::     Another style of makefile[28;1H* Cleanup::                     Rules for cleaning the directory[30;1HWriting Makefiles[32;1H* Makefile Contents::           What makefiles contain.[33;1H* Makefile Names::              How to name your makefile.[34;1H* Include::                     How one makefile can use another makefile.[35;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[36;1H* Remaking Makefiles::          How makefiles get remade.[37;1H* Overriding Makefiles::        How to override part of one makefile[38;1H                                  with another makefile.[39;1H* Reading Makefiles::           How makefiles are parsed.[40;1H* Secondary Expansion::         How and when secondary expansion is performed.[42;1HWriting Rules[44;1H* Rule Example::                An example explained.[45;1H* Rule Syntax::                 General syntax explained.[46;1H* Prerequisite Types::          There are two types of prerequisites.[47;1H* Wildcards::                   Using wildcard characters such as `*'.[48;1H* Directory Search::            Searching other directories for source files.[49;1H* Phony Targets::               Using a target that is not a real file's name.[50;1H* Force Targets::               You can use a target without a recipe[51;1H                                  or prerequisites to mark other targets[52;1H                                  as phony.[53;1H* Empty Targets::               When only the date matters and the[54;1H                                  files are empty.[55;1H* Special Targets::             Targets with special built-in meanings.[56;1H* Multiple Targets::            When to make use of several targets in a rule.[57;1H* Multiple Rules::              How to use several rules with the same target.[58;1H* Static Pattern::              Static pattern rules apply to multiple targets[59;1H                                  and can vary the prerequisites according to[60;1H                                  the target name.[61;1H* Double-Colon::                How to use a special kind of rule to allow[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --16%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H                                  GNU programs.[K[2;1H* Quick Reference::             A quick reference for experienced users.[3;1H* Error Messages::              A list of common errors generated by `make'.[4;1H* Complex Makefile::            A real example of a straightforward,[K[5;1H                                  but nontrivial, makefile.[K[6;1H[K[7;1H* GNU Free Documentation License::  License for copying this manual[8;1H* Concept Index::               Index of Concepts[K[9;1H* Name Index::                  Index of Functions, Variables, & Directives[10;1H[K[11;1H --- The Detailed Node Listing ---[12;1H[K[13;1HOverview of `make'[14;1H[K[15;1H* Preparing::                   Preparing and running make[16;1H* Reading::                     On reading this text[K[17;1H* Bugs::                        Problems and bugs[K[18;1H[K[19;1HAn Introduction to Makefiles[20;1H[K[21;1H* Rule Introduction::           What a rule looks like.[22;1H* Simple Makefile::             A simple makefile[K[23;1H* How Make Works::              How `make' processes this makefile[24;1H* Variables Simplify::          Variables make makefiles simpler[K[25;1H* make Deduces::                Letting `make' deduce the recipe[26;1H* Combine By Prerequisite::     Another style of makefile[K[27;1H* Cleanup::                     Rules for cleaning the directory[28;1H[K[29;1HWriting Makefiles[30;1H[K[31;1H* Makefile Contents::           What makefiles contain.[32;1H* Makefile Names::              How to name your makefile.[33;1H* Include::                     How one makefile can use another makefile.[34;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[35;1H* Remaking Makefiles::          How makefiles get remade.[K[36;1H* Overriding Makefiles::        How to override part of one makefile[37;1H                                  with another makefile.[K[38;1H* Reading Makefiles::           How makefiles are parsed.[39;1H* Secondary Expansion::         How and when secondary expansion is performed.[40;1H[K[41;1HWriting Rules[42;1H[K[43;1H* Rule Example::                An example explained.[44;1H* Rule Syntax::                 General syntax explained.[45;1H* Prerequisite Types::          There are two types of prerequisites.[46;1H* Wildcards::                   Using wildcard characters such as `*'.[47;1H* Directory Search::            Searching other directories for source files.[48;1H* Phony Targets::               Using a target that is not a real file's name.[49;1H* Force Targets::               You can use a target without a recipe[K[50;1H                                  or prerequisites to mark other targets[51;1H                                  as phony.[K[52;1H* Empty Targets::               When only the date matters and the[53;1H                                  files are empty.[K[54;1H* Special Targets::             Targets with special built-in meanings.[55;1H* Multiple Targets::            When to make use of several targets in a rule.[56;1H* Multiple Rules::              How to use several rules with the same target.[57;1H* Static Pattern::              Static pattern rules apply to multiple targets[58;1H                                  and can vary the prerequisites according to[K[59;1H                                  the target name.[K[60;1H* Double-Colon::                How to use a special kind of rule to allow[61;1H                                  several independent rules for one target.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --17%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[61;1H[1;1H* Quick Reference::             A quick reference for experienced users.[2;1H* Error Messages::              A list of common errors generated by `make'.[3;1H* Complex Makefile::            A real example of a straightforward,[K[4;1H                                  but nontrivial, makefile.[K[5;1H[K[6;1H* GNU Free Documentation License::  License for copying this manual[7;1H* Concept Index::               Index of Concepts[K[8;1H* Name Index::                  Index of Functions, Variables, & Directives[61;1H[61;1H[1;1H* Error Messages::              A list of common errors generated by `make'.[2;1H* Complex Makefile::            A real example of a straightforward,[K[3;1H                                  but nontrivial, makefile.[K[4;1H[K[5;1H* GNU Free Documentation License::  License for copying this manual[6;1H* Concept Index::               Index of Concepts[K[7;1H* Name Index::                  Index of Functions, Variables, & Directives[8;1H[K[9;1H --- The Detailed Node Listing ---[K[11;1HOverview of `make'[K[13;1H* Preparing::                   Preparing and running make[14;1H* Reading::                     On reading this text[15;1H* Bugs::                        Problems and bugs[K[16;1H[K[17;1HAn Introduction to Makefiles[K[19;1H* Rule Introduction::           What a rule looks like.[20;1H* Simple Makefile::             A simple makefile[21;1H* How Make Works::              How `make' processes this makefile[22;1H* Variables Simplify::          Variables make makefiles simpler[23;1H* make Deduces::                Letting `make' deduce the recipe[K[24;1H* Combine By Prerequisite::     Another style of makefile[K[25;1H* Cleanup::                     Rules for cleaning the directory[26;1H[K[27;1HWriting Makefiles[K[29;1H* Makefile Contents::           What makefiles contain.[30;1H* Makefile Names::              How to name your makefile.[31;1H* Include::                     How one makefile can use another makefile.[32;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[33;1H* Remaking Makefiles::          How makefiles get remade.[K[34;1H* Overriding Makefiles::        How to override part of one makefile[K[35;1H                                  with another makefile.[K[36;1H* Reading Makefiles::           How makefiles are parsed.[K[37;1H* Secondary Expansion::         How and when secondary expansion is performed.[38;1H[K[39;1HWriting Rules[K[41;1H* Rule Example::                An example explained.[42;1H* Rule Syntax::                 General syntax explained.[43;1H* Prerequisite Types::          There are two types of prerequisites.[44;1H* Wildcards::                   Using wildcard characters such as `*'.[45;1H* Directory Search::            Searching other directories for source files.[46;1H* Phony Targets::               Using a target that is not a real file's name.[47;1H* Force Targets::               You can use a target without a recipe[K[48;1H                                  or prerequisites to mark other targets[K[49;1H                                  as phony.[K[50;1H* Empty Targets::               When only the date matters and the[K[51;1H                                  files are empty.[52;1H* Special Targets::             Targets with special built-in meanings.[53;1H* Multiple Targets::            When to make use of several targets in a rule.[54;1H* Multiple Rules::              How to use several rules with the same target.[55;1H* Static Pattern::              Static pattern rules apply to multiple targets[56;1H                                  and can vary the prerequisites according to[K[57;1H                                  the target name.[K[58;1H* Double-Colon::                How to use a special kind of rule to allow[K[59;1H                                  several independent rules for one target.[60;1H* Automatic Prerequisites::     How to automatically generate rules giving[61;1H                                  prerequisites from source files themselves.[61;1H[1;1H* Error Messages::              A list of common errors generated by `make'.[2;1H* Complex Makefile::            A real example of a straightforward,[3;1H                                  but nontrivial, makefile.[5;1H* GNU Free Documentation License::  License for copying this manual[6;1H* Concept Index::               Index of Concepts[7;1H* Name Index::                  Index of Functions, Variables, & Directives[9;1H --- The Detailed Node Listing ---[11;1HOverview of `make'[13;1H* Preparing::                   Preparing and running make[14;1H* Reading::                     On reading this text[15;1H* Bugs::                        Problems and bugs[17;1HAn Introduction to Makefiles[19;1H* Rule Introduction::           What a rule looks like.[20;1H* Simple Makefile::             A simple makefile[21;1H* How Make Works::              How `make' processes this makefile[22;1H* Variables Simplify::          Variables make makefiles simpler[23;1H* make Deduces::                Letting `make' deduce the recipe[24;1H* Combine By Prerequisite::     Another style of makefile[25;1H* Cleanup::                     Rules for cleaning the directory[27;1HWriting Makefiles[29;1H* Makefile Contents::           What makefiles contain.[30;1H* Makefile Names::              How to name your makefile.[31;1H* Include::                     How one makefile can use another makefile.[32;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[33;1H* Remaking Makefiles::          How makefiles get remade.[34;1H* Overriding Makefiles::        How to override part of one makefile[35;1H                                  with another makefile.[36;1H* Reading Makefiles::           How makefiles are parsed.[37;1H* Secondary Expansion::         How and when secondary expansion is performed.[39;1HWriting Rules[41;1H* Rule Example::                An example explained.[42;1H* Rule Syntax::                 General syntax explained.[43;1H* Prerequisite Types::          There are two types of prerequisites.[44;1H* Wildcards::                   Using wildcard characters such as `*'.[45;1H* Directory Search::            Searching other directories for source files.[46;1H* Phony Targets::               Using a target that is not a real file's name.[47;1H* Force Targets::               You can use a target without a recipe[48;1H                                  or prerequisites to mark other targets[49;1H                                  as phony.[50;1H* Empty Targets::               When only the date matters and the[51;1H                                  files are empty.[52;1H* Special Targets::             Targets with special built-in meanings.[53;1H* Multiple Targets::            When to make use of several targets in a rule.[54;1H* Multiple Rules::              How to use several rules with the same target.[55;1H* Static Pattern::              Static pattern rules apply to multiple targets[56;1H                                  and can vary the prerequisites according to[57;1H                                  the target name.[58;1H* Double-Colon::                How to use a special kind of rule to allow[59;1H                                  several independent rules for one target.[60;1H* Automatic Prerequisites::     How to automatically generate rules giving[61;1H                                  prerequisites from source files themselves.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --18%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* Complex Makefile::            A real example of a straightforward,[K[61;1H[61;1H[1;1H                                  but nontrivial, makefile.[K[61;1H[61;1H[1;1H[K[2;1H* GNU Free Documentation License::  License for copying this manual[K[3;1H* Concept Index::               Index of Concepts[K[4;1H* Name Index::                  Index of Functions, Variables, & Directives[5;1H[K[6;1H --- The Detailed Node Listing ---[K[7;1H[K[8;1HOverview of `make'[9;1H[K[10;1H* Preparing::                   Preparing and running make[11;1H* Reading::                     On reading this text[12;1H* Bugs::                        Problems and bugs[13;1H[K[14;1HAn Introduction to Makefiles[K[15;1H[K[16;1H* Rule Introduction::           What a rule looks like.[17;1H* Simple Makefile::             A simple makefile[18;1H* How Make Works::              How `make' processes this makefile[19;1H* Variables Simplify::          Variables make makefiles simpler[20;1H* make Deduces::                Letting `make' deduce the recipe[21;1H* Combine By Prerequisite::     Another style of makefile[K[22;1H* Cleanup::                     Rules for cleaning the directory[23;1H[K[24;1HWriting Makefiles[K[25;1H[K[26;1H* Makefile Contents::           What makefiles contain.[27;1H* Makefile Names::              How to name your makefile.[28;1H* Include::                     How one makefile can use another makefile.[29;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[30;1H* Remaking Makefiles::          How makefiles get remade.[K[31;1H* Overriding Makefiles::        How to override part of one makefile[K[32;1H                                  with another makefile.[K[33;1H* Reading Makefiles::           How makefiles are parsed.[34;1H* Secondary Expansion::         How and when secondary expansion is performed.[35;1H[K[36;1HWriting Rules[K[37;1H[K[38;1H* Rule Example::                An example explained.[39;1H* Rule Syntax::                 General syntax explained.[40;1H* Prerequisite Types::          There are two types of prerequisites.[41;1H* Wildcards::                   Using wildcard characters such as `*'.[42;1H* Directory Search::            Searching other directories for source files.[43;1H* Phony Targets::               Using a target that is not a real file's name.[44;1H* Force Targets::               You can use a target without a recipe[K[45;1H                                  or prerequisites to mark other targets[K[46;1H                                  as phony.[K[47;1H* Empty Targets::               When only the date matters and the[K[48;1H                                  files are empty.[K[49;1H* Special Targets::             Targets with special built-in meanings.[50;1H* Multiple Targets::            When to make use of several targets in a rule.[51;1H* Multiple Rules::              How to use several rules with the same target.[52;1H* Static Pattern::              Static pattern rules apply to multiple targets[53;1H                                  and can vary the prerequisites according to[K[54;1H                                  the target name.[K[55;1H* Double-Colon::                How to use a special kind of rule to allow[K[56;1H                                  several independent rules for one target.[K[57;1H* Automatic Prerequisites::     How to automatically generate rules giving[58;1H                                  prerequisites from source files themselves.[59;1H[K[60;1HUsing Wildcard Characters in File Names[K[61;1H[K[61;1H[2;1H* GNU Free Documentation License::  License for copying this manual[3;1H* Concept Index::               Index of Concepts[4;1H* Name Index::                  Index of Functions, Variables, & Directives[6;1H --- The Detailed Node Listing ---[8;1HOverview of `make'[10;1H* Preparing::                   Preparing and running make[11;1H* Reading::                     On reading this text[12;1H* Bugs::                        Problems and bugs[14;1HAn Introduction to Makefiles[16;1H* Rule Introduction::           What a rule looks like.[17;1H* Simple Makefile::             A simple makefile[18;1H* How Make Works::              How `make' processes this makefile[19;1H* Variables Simplify::          Variables make makefiles simpler[20;1H* make Deduces::                Letting `make' deduce the recipe[21;1H* Combine By Prerequisite::     Another style of makefile[22;1H* Cleanup::                     Rules for cleaning the directory[24;1HWriting Makefiles[26;1H* Makefile Contents::           What makefiles contain.[27;1H* Makefile Names::              How to name your makefile.[28;1H* Include::                     How one makefile can use another makefile.[29;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[30;1H* Remaking Makefiles::          How makefiles get remade.[31;1H* Overriding Makefiles::        How to override part of one makefile[32;1H                                  with another makefile.[33;1H* Reading Makefiles::           How makefiles are parsed.[34;1H* Secondary Expansion::         How and when secondary expansion is performed.[36;1HWriting Rules[38;1H* Rule Example::                An example explained.[39;1H* Rule Syntax::                 General syntax explained.[40;1H* Prerequisite Types::          There are two types of prerequisites.[41;1H* Wildcards::                   Using wildcard characters such as `*'.[42;1H* Directory Search::            Searching other directories for source files.[43;1H* Phony Targets::               Using a target that is not a real file's name.[44;1H* Force Targets::               You can use a target without a recipe[45;1H                                  or prerequisites to mark other targets[46;1H                                  as phony.[47;1H* Empty Targets::               When only the date matters and the[48;1H                                  files are empty.[49;1H* Special Targets::             Targets with special built-in meanings.[50;1H* Multiple Targets::            When to make use of several targets in a rule.[51;1H* Multiple Rules::              How to use several rules with the same target.[52;1H* Static Pattern::              Static pattern rules apply to multiple targets[53;1H                                  and can vary the prerequisites according to[54;1H                                  the target name.[55;1H* Double-Colon::                How to use a special kind of rule to allow[56;1H                                  several independent rules for one target.[57;1H* Automatic Prerequisites::     How to automatically generate rules giving[58;1H                                  prerequisites from source files themselves.[60;1HUsing Wildcard Characters in File Names[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --19%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* GNU Free Documentation License::  License for copying this manual[61;1H[61;1H[1;1H* Concept Index::               Index of Concepts[K[2;1H* Name Index::                  Index of Functions, Variables, & Directives[3;1H[K[4;1H --- The Detailed Node Listing ---[K[6;1HOverview of `make'[K[8;1H* Preparing::                   Preparing and running make[9;1H* Reading::                     On reading this text[10;1H* Bugs::                        Problems and bugs[K[11;1H[K[12;1HAn Introduction to Makefiles[K[14;1H* Rule Introduction::           What a rule looks like.[15;1H* Simple Makefile::             A simple makefile[16;1H* How Make Works::              How `make' processes this makefile[17;1H* Variables Simplify::          Variables make makefiles simpler[18;1H* make Deduces::                Letting `make' deduce the recipe[K[19;1H* Combine By Prerequisite::     Another style of makefile[K[20;1H* Cleanup::                     Rules for cleaning the directory[21;1H[K[22;1HWriting Makefiles[K[24;1H* Makefile Contents::           What makefiles contain.[25;1H* Makefile Names::              How to name your makefile.[26;1H* Include::                     How one makefile can use another makefile.[27;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[28;1H* Remaking Makefiles::          How makefiles get remade.[K[29;1H* Overriding Makefiles::        How to override part of one makefile[K[30;1H                                  with another makefile.[K[31;1H* Reading Makefiles::           How makefiles are parsed.[K[32;1H* Secondary Expansion::         How and when secondary expansion is performed.[33;1H[K[34;1HWriting Rules[K[36;1H* Rule Example::                An example explained.[37;1H* Rule Syntax::                 General syntax explained.[38;1H* Prerequisite Types::          There are two types of prerequisites.[39;1H* Wildcards::                   Using wildcard characters such as `*'.[40;1H* Directory Search::            Searching other directories for source files.[41;1H* Phony Targets::               Using a target that is not a real file's name.[42;1H* Force Targets::               You can use a target without a recipe[K[43;1H                                  or prerequisites to mark other targets[K[44;1H                                  as phony.[K[45;1H* Empty Targets::               When only the date matters and the[K[46;1H                                  files are empty.[47;1H* Special Targets::             Targets with special built-in meanings.[48;1H* Multiple Targets::            When to make use of several targets in a rule.[49;1H* Multiple Rules::              How to use several rules with the same target.[50;1H* Static Pattern::              Static pattern rules apply to multiple targets[51;1H                                  and can vary the prerequisites according to[K[52;1H                                  the target name.[K[53;1H* Double-Colon::                How to use a special kind of rule to allow[K[54;1H                                  several independent rules for one target.[55;1H* Automatic Prerequisites::     How to automatically generate rules giving[56;1H                                  prerequisites from source files themselves.[57;1H[K[58;1HUsing Wildcard Characters in File Names[K[60;1H* Wildcard Examples::           Several examples[61;1H* Wildcard Pitfall::            Problems to avoid.[61;1H[1;1H* Concept Index::               Index of Concepts[2;1H* Name Index::                  Index of Functions, Variables, & Directives[4;1H --- The Detailed Node Listing ---[6;1HOverview of `make'[8;1H* Preparing::                   Preparing and running make[9;1H* Reading::                     On reading this text[10;1H* Bugs::                        Problems and bugs[12;1HAn Introduction to Makefiles[14;1H* Rule Introduction::           What a rule looks like.[15;1H* Simple Makefile::             A simple makefile[16;1H* How Make Works::              How `make' processes this makefile[17;1H* Variables Simplify::          Variables make makefiles simpler[18;1H* make Deduces::                Letting `make' deduce the recipe[19;1H* Combine By Prerequisite::     Another style of makefile[20;1H* Cleanup::                     Rules for cleaning the directory[22;1HWriting Makefiles[24;1H* Makefile Contents::           What makefiles contain.[25;1H* Makefile Names::              How to name your makefile.[26;1H* Include::                     How one makefile can use another makefile.[27;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[28;1H* Remaking Makefiles::          How makefiles get remade.[29;1H* Overriding Makefiles::        How to override part of one makefile[30;1H                                  with another makefile.[31;1H* Reading Makefiles::           How makefiles are parsed.[32;1H* Secondary Expansion::         How and when secondary expansion is performed.[34;1HWriting Rules[36;1H* Rule Example::                An example explained.[37;1H* Rule Syntax::                 General syntax explained.[38;1H* Prerequisite Types::          There are two types of prerequisites.[39;1H* Wildcards::                   Using wildcard characters such as `*'.[40;1H* Directory Search::            Searching other directories for source files.[41;1H* Phony Targets::               Using a target that is not a real file's name.[42;1H* Force Targets::               You can use a target without a recipe[43;1H                                  or prerequisites to mark other targets[44;1H                                  as phony.[45;1H* Empty Targets::               When only the date matters and the[46;1H                                  files are empty.[47;1H* Special Targets::             Targets with special built-in meanings.[48;1H* Multiple Targets::            When to make use of several targets in a rule.[49;1H* Multiple Rules::              How to use several rules with the same target.[50;1H* Static Pattern::              Static pattern rules apply to multiple targets[51;1H                                  and can vary the prerequisites according to[52;1H                                  the target name.[53;1H* Double-Colon::                How to use a special kind of rule to allow[54;1H                                  several independent rules for one target.[55;1H* Automatic Prerequisites::     How to automatically generate rules giving[56;1H                                  prerequisites from source files themselves.[58;1HUsing Wildcard Characters in File Names[60;1H* Wildcard Examples::           Several examples[61;1H* Wildcard Pitfall::            Problems to avoid.[61;1H[1;1H* Name Index::                  Index of Functions, Variables, & Directives[2;1H[K[3;1H --- The Detailed Node Listing ---[4;1H[K[5;1HOverview of `make'[6;1H[K[7;1H* Preparing::                   Preparing and running make[8;1H* Reading::                     On reading this text[K[9;1H* Bugs::                        Problems and bugs[K[10;1H[K[11;1HAn Introduction to Makefiles[12;1H[K[13;1H* Rule Introduction::           What a rule looks like.[14;1H* Simple Makefile::             A simple makefile[K[15;1H* How Make Works::              How `make' processes this makefile[61;1H[61;1H[1;1H[K[2;1H --- The Detailed Node Listing ---[3;1H[K[4;1HOverview of `make'[5;1H[K[6;1H* Preparing::                   Preparing and running make[7;1H* Reading::                     On reading this text[K[8;1H* Bugs::                        Problems and bugs[K[9;1H[K[10;1HAn Introduction to Makefiles[11;1H[K[12;1H* Rule Introduction::           What a rule looks like.[13;1H* Simple Makefile::             A simple makefile[K[14;1H* How Make Works::              How `make' processes this makefile[15;1H* Variables Simplify::          Variables make makefiles simpler[K[16;1H* make Deduces::                Letting `make' deduce the recipe[K[17;1H* Combine By Prerequisite::     Another style of makefile[K[18;1H* Cleanup::                     Rules for cleaning the directory[19;1H[K[20;1HWriting Makefiles[K[22;1H* Makefile Contents::           What makefiles contain.[23;1H* Makefile Names::              How to name your makefile.[24;1H* Include::                     How one makefile can use another makefile.[25;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[26;1H* Remaking Makefiles::          How makefiles get remade.[K[27;1H* Overriding Makefiles::        How to override part of one makefile[K[28;1H                                  with another makefile.[K[29;1H* Reading Makefiles::           How makefiles are parsed.[K[30;1H* Secondary Expansion::         How and when secondary expansion is performed.[31;1H[K[32;1HWriting Rules[K[34;1H* Rule Example::                An example explained.[35;1H* Rule Syntax::                 General syntax explained.[36;1H* Prerequisite Types::          There are two types of prerequisites.[37;1H* Wildcards::                   Using wildcard characters such as `*'.[38;1H* Directory Search::            Searching other directories for source files.[39;1H* Phony Targets::               Using a target that is not a real file's name.[40;1H* Force Targets::               You can use a target without a recipe[K[41;1H                                  or prerequisites to mark other targets[K[42;1H                                  as phony.[K[43;1H* Empty Targets::               When only the date matters and the[K[44;1H                                  files are empty.[45;1H* Special Targets::             Targets with special built-in meanings.[46;1H* Multiple Targets::            When to make use of several targets in a rule.[47;1H* Multiple Rules::              How to use several rules with the same target.[48;1H* Static Pattern::              Static pattern rules apply to multiple targets[49;1H                                  and can vary the prerequisites according to[K[50;1H                                  the target name.[K[51;1H* Double-Colon::                How to use a special kind of rule to allow[K[52;1H                                  several independent rules for one target.[53;1H* Automatic Prerequisites::     How to automatically generate rules giving[54;1H                                  prerequisites from source files themselves.[55;1H[K[56;1HUsing Wildcard Characters in File Names[K[58;1H* Wildcard Examples::           Several examples[59;1H* Wildcard Pitfall::            Problems to avoid.[60;1H* Wildcard Function::           How to cause wildcard expansion where[61;1H                                  it does not normally take place.[61;1H[2;1H --- The Detailed Node Listing ---[4;1HOverview of `make'[6;1H* Preparing::                   Preparing and running make[7;1H* Reading::                     On reading this text[8;1H* Bugs::                        Problems and bugs[10;1HAn Introduction to Makefiles[12;1H* Rule Introduction::           What a rule looks like.[13;1H* Simple Makefile::             A simple makefile[14;1H* How Make Works::              How `make' processes this makefile[15;1H* Variables Simplify::          Variables make makefiles simpler[16;1H* make Deduces::                Letting `make' deduce the recipe[17;1H* Combine By Prerequisite::     Another style of makefile[18;1H* Cleanup::                     Rules for cleaning the directory[20;1HWriting Makefiles[22;1H* Makefile Contents::           What makefiles contain.[23;1H* Makefile Names::              How to name your makefile.[24;1H* Include::                     How one makefile can use another makefile.[25;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[26;1H* Remaking Makefiles::          How makefiles get remade.[27;1H* Overriding Makefiles::        How to override part of one makefile[28;1H                                  with another makefile.[29;1H* Reading Makefiles::           How makefiles are parsed.[30;1H* Secondary Expansion::         How and when secondary expansion is performed.[32;1HWriting Rules[34;1H* Rule Example::                An example explained.[35;1H* Rule Syntax::                 General syntax explained.[36;1H* Prerequisite Types::          There are two types of prerequisites.[37;1H* Wildcards::                   Using wildcard characters such as `*'.[38;1H* Directory Search::            Searching other directories for source files.[39;1H* Phony Targets::               Using a target that is not a real file's name.[40;1H* Force Targets::               You can use a target without a recipe[41;1H                                  or prerequisites to mark other targets[42;1H                                  as phony.[43;1H* Empty Targets::               When only the date matters and the[44;1H                                  files are empty.[45;1H* Special Targets::             Targets with special built-in meanings.[46;1H* Multiple Targets::            When to make use of several targets in a rule.[47;1H* Multiple Rules::              How to use several rules with the same target.[48;1H* Static Pattern::              Static pattern rules apply to multiple targets[49;1H                                  and can vary the prerequisites according to[50;1H                                  the target name.[51;1H* Double-Colon::                How to use a special kind of rule to allow[52;1H                                  several independent rules for one target.[53;1H* Automatic Prerequisites::     How to automatically generate rules giving[54;1H                                  prerequisites from source files themselves.[56;1HUsing Wildcard Characters in File Names[58;1H* Wildcard Examples::           Several examples[59;1H* Wildcard Pitfall::            Problems to avoid.[60;1H* Wildcard Function::           How to cause wildcard expansion where[61;1H                                  it does not normally take place.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --20%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H --- The Detailed Node Listing ---[2;1H[K[3;1HOverview of `make'[4;1H[K[5;1H* Preparing::                   Preparing and running make[6;1H* Reading::                     On reading this text[K[7;1H* Bugs::                        Problems and bugs[K[8;1H[K[9;1HAn Introduction to Makefiles[10;1H[K[11;1H* Rule Introduction::           What a rule looks like.[12;1H* Simple Makefile::             A simple makefile[K[13;1H* How Make Works::              How `make' processes this makefile[14;1H* Variables Simplify::          Variables make makefiles simpler[K[61;1H[61;1H[1;1H[K[2;1HOverview of `make'[3;1H[K[4;1H* Preparing::                   Preparing and running make[5;1H* Reading::                     On reading this text[K[6;1H* Bugs::                        Problems and bugs[K[7;1H[K[8;1HAn Introduction to Makefiles[9;1H[K[10;1H* Rule Introduction::           What a rule looks like.[11;1H* Simple Makefile::             A simple makefile[K[12;1H* How Make Works::              How `make' processes this makefile[13;1H* Variables Simplify::          Variables make makefiles simpler[K[14;1H* make Deduces::                Letting `make' deduce the recipe[15;1H* Combine By Prerequisite::     Another style of makefile[K[16;1H* Cleanup::                     Rules for cleaning the directory[17;1H[K[18;1HWriting Makefiles[K[20;1H* Makefile Contents::           What makefiles contain.[21;1H* Makefile Names::              How to name your makefile.[22;1H* Include::                     How one makefile can use another makefile.[23;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[24;1H* Remaking Makefiles::          How makefiles get remade.[K[25;1H* Overriding Makefiles::        How to override part of one makefile[K[26;1H                                  with another makefile.[K[27;1H* Reading Makefiles::           How makefiles are parsed.[K[28;1H* Secondary Expansion::         How and when secondary expansion is performed.[29;1H[K[30;1HWriting Rules[K[32;1H* Rule Example::                An example explained.[33;1H* Rule Syntax::                 General syntax explained.[34;1H* Prerequisite Types::          There are two types of prerequisites.[35;1H* Wildcards::                   Using wildcard characters such as `*'.[36;1H* Directory Search::            Searching other directories for source files.[37;1H* Phony Targets::               Using a target that is not a real file's name.[38;1H* Force Targets::               You can use a target without a recipe[K[39;1H                                  or prerequisites to mark other targets[K[40;1H                                  as phony.[K[41;1H* Empty Targets::               When only the date matters and the[K[42;1H                                  files are empty.[43;1H* Special Targets::             Targets with special built-in meanings.[44;1H* Multiple Targets::            When to make use of several targets in a rule.[45;1H* Multiple Rules::              How to use several rules with the same target.[46;1H* Static Pattern::              Static pattern rules apply to multiple targets[47;1H                                  and can vary the prerequisites according to[K[48;1H                                  the target name.[K[49;1H* Double-Colon::                How to use a special kind of rule to allow[K[50;1H                                  several independent rules for one target.[51;1H* Automatic Prerequisites::     How to automatically generate rules giving[52;1H                                  prerequisites from source files themselves.[53;1H[K[54;1HUsing Wildcard Characters in File Names[K[56;1H* Wildcard Examples::           Several examples[57;1H* Wildcard Pitfall::            Problems to avoid.[58;1H* Wildcard Function::           How to cause wildcard expansion where[59;1H                                  it does not normally take place.[60;1H[K[61;1HSearching Directories for Prerequisites[K[61;1H[2;1HOverview of `make'[4;1H* Preparing::                   Preparing and running make[5;1H* Reading::                     On reading this text[6;1H* Bugs::                        Problems and bugs[8;1HAn Introduction to Makefiles[10;1H* Rule Introduction::           What a rule looks like.[11;1H* Simple Makefile::             A simple makefile[12;1H* How Make Works::              How `make' processes this makefile[13;1H* Variables Simplify::          Variables make makefiles simpler[14;1H* make Deduces::                Letting `make' deduce the recipe[15;1H* Combine By Prerequisite::     Another style of makefile[16;1H* Cleanup::                     Rules for cleaning the directory[18;1HWriting Makefiles[20;1H* Makefile Contents::           What makefiles contain.[21;1H* Makefile Names::              How to name your makefile.[22;1H* Include::                     How one makefile can use another makefile.[23;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[24;1H* Remaking Makefiles::          How makefiles get remade.[25;1H* Overriding Makefiles::        How to override part of one makefile[26;1H                                  with another makefile.[27;1H* Reading Makefiles::           How makefiles are parsed.[28;1H* Secondary Expansion::         How and when secondary expansion is performed.[30;1HWriting Rules[32;1H* Rule Example::                An example explained.[33;1H* Rule Syntax::                 General syntax explained.[34;1H* Prerequisite Types::          There are two types of prerequisites.[35;1H* Wildcards::                   Using wildcard characters such as `*'.[36;1H* Directory Search::            Searching other directories for source files.[37;1H* Phony Targets::               Using a target that is not a real file's name.[38;1H* Force Targets::               You can use a target without a recipe[39;1H                                  or prerequisites to mark other targets[40;1H                                  as phony.[41;1H* Empty Targets::               When only the date matters and the[42;1H                                  files are empty.[43;1H* Special Targets::             Targets with special built-in meanings.[44;1H* Multiple Targets::            When to make use of several targets in a rule.[45;1H* Multiple Rules::              How to use several rules with the same target.[46;1H* Static Pattern::              Static pattern rules apply to multiple targets[47;1H                                  and can vary the prerequisites according to[48;1H                                  the target name.[49;1H* Double-Colon::                How to use a special kind of rule to allow[50;1H                                  several independent rules for one target.[51;1H* Automatic Prerequisites::     How to automatically generate rules giving[52;1H                                  prerequisites from source files themselves.[54;1HUsing Wildcard Characters in File Names[56;1H* Wildcard Examples::           Several examples[57;1H* Wildcard Pitfall::            Problems to avoid.[58;1H* Wildcard Function::           How to cause wildcard expansion where[59;1H                                  it does not normally take place.[61;1HSearching Directories for Prerequisites[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --21%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1HOverview of `make'[2;1H[K[3;1H* Preparing::                   Preparing and running make[4;1H* Reading::                     On reading this text[K[5;1H* Bugs::                        Problems and bugs[K[6;1H[K[7;1HAn Introduction to Makefiles[8;1H[K[9;1H* Rule Introduction::           What a rule looks like.[10;1H* Simple Makefile::             A simple makefile[K[11;1H* How Make Works::              How `make' processes this makefile[12;1H* Variables Simplify::          Variables make makefiles simpler[K[13;1H* make Deduces::                Letting `make' deduce the recipe[14;1H* Combine By Prerequisite::     Another style of makefile[K[15;1H* Cleanup::                     Rules for cleaning the directory[16;1H[K[17;1HWriting Makefiles[61;1H[61;1H[1;1H[K[2;1H* Preparing::                   Preparing and running make[3;1H* Reading::                     On reading this text[K[4;1H* Bugs::                        Problems and bugs[K[5;1H[K[6;1HAn Introduction to Makefiles[7;1H[K[8;1H* Rule Introduction::           What a rule looks like.[9;1H* Simple Makefile::             A simple makefile[K[10;1H* How Make Works::              How `make' processes this makefile[11;1H* Variables Simplify::          Variables make makefiles simpler[K[12;1H* make Deduces::                Letting `make' deduce the recipe[13;1H* Combine By Prerequisite::     Another style of makefile[K[14;1H* Cleanup::                     Rules for cleaning the directory[15;1H[K[16;1HWriting Makefiles[17;1H[K[18;1H* Makefile Contents::           What makefiles contain.[19;1H* Makefile Names::              How to name your makefile.[20;1H* Include::                     How one makefile can use another makefile.[21;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[22;1H* Remaking Makefiles::          How makefiles get remade.[K[23;1H* Overriding Makefiles::        How to override part of one makefile[K[24;1H                                  with another makefile.[K[25;1H* Reading Makefiles::           How makefiles are parsed.[K[26;1H* Secondary Expansion::         How and when secondary expansion is performed.[27;1H[K[28;1HWriting Rules[K[30;1H* Rule Example::                An example explained.[31;1H* Rule Syntax::                 General syntax explained.[32;1H* Prerequisite Types::          There are two types of prerequisites.[33;1H* Wildcards::                   Using wildcard characters such as `*'.[34;1H* Directory Search::            Searching other directories for source files.[35;1H* Phony Targets::               Using a target that is not a real file's name.[36;1H* Force Targets::               You can use a target without a recipe[K[37;1H                                  or prerequisites to mark other targets[K[38;1H                                  as phony.[K[39;1H* Empty Targets::               When only the date matters and the[K[40;1H                                  files are empty.[41;1H* Special Targets::             Targets with special built-in meanings.[42;1H* Multiple Targets::            When to make use of several targets in a rule.[43;1H* Multiple Rules::              How to use several rules with the same target.[44;1H* Static Pattern::              Static pattern rules apply to multiple targets[45;1H                                  and can vary the prerequisites according to[K[46;1H                                  the target name.[K[47;1H* Double-Colon::                How to use a special kind of rule to allow[K[48;1H                                  several independent rules for one target.[49;1H* Automatic Prerequisites::     How to automatically generate rules giving[50;1H                                  prerequisites from source files themselves.[51;1H[K[52;1HUsing Wildcard Characters in File Names[K[54;1H* Wildcard Examples::           Several examples[55;1H* Wildcard Pitfall::            Problems to avoid.[56;1H* Wildcard Function::           How to cause wildcard expansion where[57;1H                                  it does not normally take place.[58;1H[K[59;1HSearching Directories for Prerequisites[K[61;1H* General Search::              Specifying a search path that applies[61;1H[2;1H* Preparing::                   Preparing and running make[3;1H* Reading::                     On reading this text[4;1H* Bugs::                        Problems and bugs[6;1HAn Introduction to Makefiles[8;1H* Rule Introduction::           What a rule looks like.[9;1H* Simple Makefile::             A simple makefile[10;1H* How Make Works::              How `make' processes this makefile[11;1H* Variables Simplify::          Variables make makefiles simpler[12;1H* make Deduces::                Letting `make' deduce the recipe[13;1H* Combine By Prerequisite::     Another style of makefile[14;1H* Cleanup::                     Rules for cleaning the directory[16;1HWriting Makefiles[18;1H* Makefile Contents::           What makefiles contain.[19;1H* Makefile Names::              How to name your makefile.[20;1H* Include::                     How one makefile can use another makefile.[21;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[22;1H* Remaking Makefiles::          How makefiles get remade.[23;1H* Overriding Makefiles::        How to override part of one makefile[24;1H                                  with another makefile.[25;1H* Reading Makefiles::           How makefiles are parsed.[26;1H* Secondary Expansion::         How and when secondary expansion is performed.[28;1HWriting Rules[30;1H* Rule Example::                An example explained.[31;1H* Rule Syntax::                 General syntax explained.[32;1H* Prerequisite Types::          There are two types of prerequisites.[33;1H* Wildcards::                   Using wildcard characters such as `*'.[34;1H* Directory Search::            Searching other directories for source files.[35;1H* Phony Targets::               Using a target that is not a real file's name.[36;1H* Force Targets::               You can use a target without a recipe[37;1H                                  or prerequisites to mark other targets[38;1H                                  as phony.[39;1H* Empty Targets::               When only the date matters and the[40;1H                                  files are empty.[41;1H* Special Targets::             Targets with special built-in meanings.[42;1H* Multiple Targets::            When to make use of several targets in a rule.[43;1H* Multiple Rules::              How to use several rules with the same target.[44;1H* Static Pattern::              Static pattern rules apply to multiple targets[45;1H                                  and can vary the prerequisites according to[46;1H                                  the target name.[47;1H* Double-Colon::                How to use a special kind of rule to allow[48;1H                                  several independent rules for one target.[49;1H* Automatic Prerequisites::     How to automatically generate rules giving[50;1H                                  prerequisites from source files themselves.[52;1HUsing Wildcard Characters in File Names[54;1H* Wildcard Examples::           Several examples[55;1H* Wildcard Pitfall::            Problems to avoid.[56;1H* Wildcard Function::           How to cause wildcard expansion where[57;1H                                  it does not normally take place.[59;1HSearching Directories for Prerequisites[61;1H* General Search::              Specifying a search path that applies[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --22%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* Preparing::                   Preparing and running make[2;1H* Reading::                     On reading this text[K[3;1H* Bugs::                        Problems and bugs[K[4;1H[K[5;1HAn Introduction to Makefiles[6;1H[K[7;1H* Rule Introduction::           What a rule looks like.[8;1H* Simple Makefile::             A simple makefile[K[9;1H* How Make Works::              How `make' processes this makefile[10;1H* Variables Simplify::          Variables make makefiles simpler[K[11;1H* make Deduces::                Letting `make' deduce the recipe[12;1H* Combine By Prerequisite::     Another style of makefile[K[13;1H* Cleanup::                     Rules for cleaning the directory[14;1H[K[15;1HWriting Makefiles[16;1H[K[17;1H* Makefile Contents::           What makefiles contain.[18;1H* Makefile Names::              How to name your makefile.[19;1H* Include::                     How one makefile can use another makefile.[20;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[21;1H* Remaking Makefiles::          How makefiles get remade.[K[22;1H* Overriding Makefiles::        How to override part of one makefile[23;1H                                  with another makefile.[K[24;1H* Reading Makefiles::           How makefiles are parsed.[25;1H* Secondary Expansion::         How and when secondary expansion is performed.[26;1H[K[27;1HWriting Rules[28;1H[K[29;1H* Rule Example::                An example explained.[30;1H* Rule Syntax::                 General syntax explained.[31;1H* Prerequisite Types::          There are two types of prerequisites.[32;1H* Wildcards::                   Using wildcard characters such as `*'.[33;1H* Directory Search::            Searching other directories for source files.[34;1H* Phony Targets::               Using a target that is not a real file's name.[35;1H* Force Targets::               You can use a target without a recipe[K[36;1H                                  or prerequisites to mark other targets[37;1H                                  as phony.[K[38;1H* Empty Targets::               When only the date matters and the[39;1H                                  files are empty.[K[40;1H* Special Targets::             Targets with special built-in meanings.[41;1H* Multiple Targets::            When to make use of several targets in a rule.[42;1H* Multiple Rules::              How to use several rules with the same target.[43;1H* Static Pattern::              Static pattern rules apply to multiple targets[44;1H                                  and can vary the prerequisites according to[K[45;1H                                  the target name.[K[46;1H* Double-Colon::                How to use a special kind of rule to allow[47;1H                                  several independent rules for one target.[48;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[49;1H                                  prerequisites from source files themselves.[50;1H[K[51;1HUsing Wildcard Characters in File Names[52;1H[K[53;1H* Wildcard Examples::           Several examples[54;1H* Wildcard Pitfall::            Problems to avoid.[55;1H* Wildcard Function::           How to cause wildcard expansion where[56;1H                                  it does not normally take place.[K[57;1H[K[58;1HSearching Directories for Prerequisites[59;1H[K[60;1H* General Search::              Specifying a search path that applies[61;1H                                  to every prerequisite.[K[61;1H[61;1H[1;1H* Reading::                     On reading this text[K[2;1H* Bugs::                        Problems and bugs[K[3;1H[K[4;1HAn Introduction to Makefiles[5;1H[K[6;1H* Rule Introduction::           What a rule looks like.[7;1H* Simple Makefile::             A simple makefile[K[8;1H* How Make Works::              How `make' processes this makefile[9;1H* Variables Simplify::          Variables make makefiles simpler[K[10;1H* make Deduces::                Letting `make' deduce the recipe[11;1H* Combine By Prerequisite::     Another style of makefile[K[12;1H* Cleanup::                     Rules for cleaning the directory[13;1H[K[14;1HWriting Makefiles[15;1H[K[16;1H* Makefile Contents::           What makefiles contain.[17;1H* Makefile Names::              How to name your makefile.[18;1H* Include::                     How one makefile can use another makefile.[19;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[20;1H* Remaking Makefiles::          How makefiles get remade.[K[21;1H* Overriding Makefiles::        How to override part of one makefile[22;1H                                  with another makefile.[K[23;1H* Reading Makefiles::           How makefiles are parsed.[24;1H* Secondary Expansion::         How and when secondary expansion is performed.[25;1H[K[26;1HWriting Rules[27;1H[K[28;1H* Rule Example::                An example explained.[29;1H* Rule Syntax::                 General syntax explained.[30;1H* Prerequisite Types::          There are two types of prerequisites.[31;1H* Wildcards::                   Using wildcard characters such as `*'.[32;1H* Directory Search::            Searching other directories for source files.[33;1H* Phony Targets::               Using a target that is not a real file's name.[34;1H* Force Targets::               You can use a target without a recipe[K[35;1H                                  or prerequisites to mark other targets[36;1H                                  as phony.[K[37;1H* Empty Targets::               When only the date matters and the[38;1H                                  files are empty.[K[39;1H* Special Targets::             Targets with special built-in meanings.[40;1H* Multiple Targets::            When to make use of several targets in a rule.[41;1H* Multiple Rules::              How to use several rules with the same target.[42;1H* Static Pattern::              Static pattern rules apply to multiple targets[43;1H                                  and can vary the prerequisites according to[K[44;1H                                  the target name.[K[45;1H* Double-Colon::                How to use a special kind of rule to allow[46;1H                                  several independent rules for one target.[47;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[48;1H                                  prerequisites from source files themselves.[49;1H[K[50;1HUsing Wildcard Characters in File Names[51;1H[K[52;1H* Wildcard Examples::           Several examples[53;1H* Wildcard Pitfall::            Problems to avoid.[54;1H* Wildcard Function::           How to cause wildcard expansion where[55;1H                                  it does not normally take place.[K[56;1H[K[57;1HSearching Directories for Prerequisites[58;1H[K[59;1H* General Search::              Specifying a search path that applies[60;1H                                  to every prerequisite.[K[61;1H* Selective Search::            Specifying a search path[61;1H[61;1H[1;1H* Bugs::                        Problems and bugs[K[2;1H[K[3;1HAn Introduction to Makefiles[4;1H[K[5;1H* Rule Introduction::           What a rule looks like.[6;1H* Simple Makefile::             A simple makefile[K[7;1H* How Make Works::              How `make' processes this makefile[8;1H* Variables Simplify::          Variables make makefiles simpler[K[9;1H* make Deduces::                Letting `make' deduce the recipe[10;1H* Combine By Prerequisite::     Another style of makefile[K[11;1H* Cleanup::                     Rules for cleaning the directory[12;1H[K[13;1HWriting Makefiles[14;1H[K[15;1H* Makefile Contents::           What makefiles contain.[16;1H* Makefile Names::              How to name your makefile.[17;1H* Include::                     How one makefile can use another makefile.[18;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[19;1H* Remaking Makefiles::          How makefiles get remade.[K[20;1H* Overriding Makefiles::        How to override part of one makefile[21;1H                                  with another makefile.[K[22;1H* Reading Makefiles::           How makefiles are parsed.[23;1H* Secondary Expansion::         How and when secondary expansion is performed.[24;1H[K[25;1HWriting Rules[26;1H[K[27;1H* Rule Example::                An example explained.[28;1H* Rule Syntax::                 General syntax explained.[29;1H* Prerequisite Types::          There are two types of prerequisites.[30;1H* Wildcards::                   Using wildcard characters such as `*'.[31;1H* Directory Search::            Searching other directories for source files.[32;1H* Phony Targets::               Using a target that is not a real file's name.[33;1H* Force Targets::               You can use a target without a recipe[K[34;1H                                  or prerequisites to mark other targets[61;1H[61;1H[1;1H[K[2;1HAn Introduction to Makefiles[3;1H[K[4;1H* Rule Introduction::           What a rule looks like.[5;1H* Simple Makefile::             A simple makefile[K[6;1H* How Make Works::              How `make' processes this makefile[7;1H* Variables Simplify::          Variables make makefiles simpler[K[8;1H* make Deduces::                Letting `make' deduce the recipe[9;1H* Combine By Prerequisite::     Another style of makefile[K[10;1H* Cleanup::                     Rules for cleaning the directory[11;1H[K[12;1HWriting Makefiles[13;1H[K[14;1H* Makefile Contents::           What makefiles contain.[15;1H* Makefile Names::              How to name your makefile.[16;1H* Include::                     How one makefile can use another makefile.[17;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[18;1H* Remaking Makefiles::          How makefiles get remade.[K[19;1H* Overriding Makefiles::        How to override part of one makefile[20;1H                                  with another makefile.[K[21;1H* Reading Makefiles::           How makefiles are parsed.[22;1H* Secondary Expansion::         How and when secondary expansion is performed.[23;1H[K[24;1HWriting Rules[25;1H[K[26;1H* Rule Example::                An example explained.[27;1H* Rule Syntax::                 General syntax explained.[28;1H* Prerequisite Types::          There are two types of prerequisites.[29;1H* Wildcards::                   Using wildcard characters such as `*'.[30;1H* Directory Search::            Searching other directories for source files.[31;1H* Phony Targets::               Using a target that is not a real file's name.[32;1H* Force Targets::               You can use a target without a recipe[K[33;1H                                  or prerequisites to mark other targets[34;1H                                  as phony.[K[35;1H* Empty Targets::               When only the date matters and the[K[36;1H                                  files are empty.[37;1H* Special Targets::             Targets with special built-in meanings.[38;1H* Multiple Targets::            When to make use of several targets in a rule.[39;1H* Multiple Rules::              How to use several rules with the same target.[40;1H* Static Pattern::              Static pattern rules apply to multiple targets[41;1H                                  and can vary the prerequisites according to[K[42;1H                                  the target name.[K[43;1H* Double-Colon::                How to use a special kind of rule to allow[K[44;1H                                  several independent rules for one target.[45;1H* Automatic Prerequisites::     How to automatically generate rules giving[46;1H                                  prerequisites from source files themselves.[47;1H[K[48;1HUsing Wildcard Characters in File Names[K[50;1H* Wildcard Examples::           Several examples[51;1H* Wildcard Pitfall::            Problems to avoid.[52;1H* Wildcard Function::           How to cause wildcard expansion where[53;1H                                  it does not normally take place.[54;1H[K[55;1HSearching Directories for Prerequisites[K[57;1H* General Search::              Specifying a search path that applies[58;1H                                  to every prerequisite.[59;1H* Selective Search::            Specifying a search path[K[60;1H                                  for a specified class of names.[61;1H* Search Algorithm::            When and how search paths are applied.[61;1H[2;1HAn Introduction to Makefiles[4;1H* Rule Introduction::           What a rule looks like.[5;1H* Simple Makefile::             A simple makefile[6;1H* How Make Works::              How `make' processes this makefile[7;1H* Variables Simplify::          Variables make makefiles simpler[8;1H* make Deduces::                Letting `make' deduce the recipe[9;1H* Combine By Prerequisite::     Another style of makefile[10;1H* Cleanup::                     Rules for cleaning the directory[12;1HWriting Makefiles[14;1H* Makefile Contents::           What makefiles contain.[15;1H* Makefile Names::              How to name your makefile.[16;1H* Include::                     How one makefile can use another makefile.[17;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[18;1H* Remaking Makefiles::          How makefiles get remade.[19;1H* Overriding Makefiles::        How to override part of one makefile[20;1H                                  with another makefile.[21;1H* Reading Makefiles::           How makefiles are parsed.[22;1H* Secondary Expansion::         How and when secondary expansion is performed.[24;1HWriting Rules[26;1H* Rule Example::                An example explained.[27;1H* Rule Syntax::                 General syntax explained.[28;1H* Prerequisite Types::          There are two types of prerequisites.[29;1H* Wildcards::                   Using wildcard characters such as `*'.[30;1H* Directory Search::            Searching other directories for source files.[31;1H* Phony Targets::               Using a target that is not a real file's name.[32;1H* Force Targets::               You can use a target without a recipe[33;1H                                  or prerequisites to mark other targets[34;1H                                  as phony.[35;1H* Empty Targets::               When only the date matters and the[36;1H                                  files are empty.[37;1H* Special Targets::             Targets with special built-in meanings.[38;1H* Multiple Targets::            When to make use of several targets in a rule.[39;1H* Multiple Rules::              How to use several rules with the same target.[40;1H* Static Pattern::              Static pattern rules apply to multiple targets[41;1H                                  and can vary the prerequisites according to[42;1H                                  the target name.[43;1H* Double-Colon::                How to use a special kind of rule to allow[44;1H                                  several independent rules for one target.[45;1H* Automatic Prerequisites::     How to automatically generate rules giving[46;1H                                  prerequisites from source files themselves.[48;1HUsing Wildcard Characters in File Names[50;1H* Wildcard Examples::           Several examples[51;1H* Wildcard Pitfall::            Problems to avoid.[52;1H* Wildcard Function::           How to cause wildcard expansion where[53;1H                                  it does not normally take place.[55;1HSearching Directories for Prerequisites[57;1H* General Search::              Specifying a search path that applies[58;1H                                  to every prerequisite.[59;1H* Selective Search::            Specifying a search path[60;1H                                  for a specified class of names.[61;1H* Search Algorithm::            When and how search paths are applied.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --23%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1HAn Introduction to Makefiles[2;1H[K[3;1H* Rule Introduction::           What a rule looks like.[4;1H* Simple Makefile::             A simple makefile[K[5;1H* How Make Works::              How `make' processes this makefile[6;1H* Variables Simplify::          Variables make makefiles simpler[K[7;1H* make Deduces::                Letting `make' deduce the recipe[8;1H* Combine By Prerequisite::     Another style of makefile[K[9;1H* Cleanup::                     Rules for cleaning the directory[10;1H[K[11;1HWriting Makefiles[12;1H[K[13;1H* Makefile Contents::           What makefiles contain.[14;1H* Makefile Names::              How to name your makefile.[15;1H* Include::                     How one makefile can use another makefile.[16;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[17;1H* Remaking Makefiles::          How makefiles get remade.[K[18;1H* Overriding Makefiles::        How to override part of one makefile[61;1H[61;1H[1;1H[K[2;1H* Rule Introduction::           What a rule looks like.[3;1H* Simple Makefile::             A simple makefile[K[4;1H* How Make Works::              How `make' processes this makefile[5;1H* Variables Simplify::          Variables make makefiles simpler[K[6;1H* make Deduces::                Letting `make' deduce the recipe[7;1H* Combine By Prerequisite::     Another style of makefile[K[8;1H* Cleanup::                     Rules for cleaning the directory[9;1H[K[10;1HWriting Makefiles[11;1H[K[12;1H* Makefile Contents::           What makefiles contain.[13;1H* Makefile Names::              How to name your makefile.[14;1H* Include::                     How one makefile can use another makefile.[15;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[16;1H* Remaking Makefiles::          How makefiles get remade.[K[17;1H* Overriding Makefiles::        How to override part of one makefile[18;1H                                  with another makefile.[K[19;1H* Reading Makefiles::           How makefiles are parsed.[K[20;1H* Secondary Expansion::         How and when secondary expansion is performed.[21;1H[K[22;1HWriting Rules[K[24;1H* Rule Example::                An example explained.[25;1H* Rule Syntax::                 General syntax explained.[26;1H* Prerequisite Types::          There are two types of prerequisites.[27;1H* Wildcards::                   Using wildcard characters such as `*'.[28;1H* Directory Search::            Searching other directories for source files.[29;1H* Phony Targets::               Using a target that is not a real file's name.[30;1H* Force Targets::               You can use a target without a recipe[K[31;1H                                  or prerequisites to mark other targets[K[32;1H                                  as phony.[K[33;1H* Empty Targets::               When only the date matters and the[K[34;1H                                  files are empty.[35;1H* Special Targets::             Targets with special built-in meanings.[36;1H* Multiple Targets::            When to make use of several targets in a rule.[37;1H* Multiple Rules::              How to use several rules with the same target.[38;1H* Static Pattern::              Static pattern rules apply to multiple targets[39;1H                                  and can vary the prerequisites according to[K[40;1H                                  the target name.[K[41;1H* Double-Colon::                How to use a special kind of rule to allow[K[42;1H                                  several independent rules for one target.[43;1H* Automatic Prerequisites::     How to automatically generate rules giving[44;1H                                  prerequisites from source files themselves.[45;1H[K[46;1HUsing Wildcard Characters in File Names[K[48;1H* Wildcard Examples::           Several examples[49;1H* Wildcard Pitfall::            Problems to avoid.[50;1H* Wildcard Function::           How to cause wildcard expansion where[51;1H                                  it does not normally take place.[52;1H[K[53;1HSearching Directories for Prerequisites[K[55;1H* General Search::              Specifying a search path that applies[56;1H                                  to every prerequisite.[57;1H* Selective Search::            Specifying a search path[K[58;1H                                  for a specified class of names.[59;1H* Search Algorithm::            When and how search paths are applied.[60;1H* Recipes/Search::              How to write recipes that work together[61;1H                                  with search paths.[K[61;1H[2;1H* Rule Introduction::           What a rule looks like.[3;1H* Simple Makefile::             A simple makefile[4;1H* How Make Works::              How `make' processes this makefile[5;1H* Variables Simplify::          Variables make makefiles simpler[6;1H* make Deduces::                Letting `make' deduce the recipe[7;1H* Combine By Prerequisite::     Another style of makefile[8;1H* Cleanup::                     Rules for cleaning the directory[10;1HWriting Makefiles[12;1H* Makefile Contents::           What makefiles contain.[13;1H* Makefile Names::              How to name your makefile.[14;1H* Include::                     How one makefile can use another makefile.[15;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[16;1H* Remaking Makefiles::          How makefiles get remade.[17;1H* Overriding Makefiles::        How to override part of one makefile[18;1H                                  with another makefile.[19;1H* Reading Makefiles::           How makefiles are parsed.[20;1H* Secondary Expansion::         How and when secondary expansion is performed.[22;1HWriting Rules[24;1H* Rule Example::                An example explained.[25;1H* Rule Syntax::                 General syntax explained.[26;1H* Prerequisite Types::          There are two types of prerequisites.[27;1H* Wildcards::                   Using wildcard characters such as `*'.[28;1H* Directory Search::            Searching other directories for source files.[29;1H* Phony Targets::               Using a target that is not a real file's name.[30;1H* Force Targets::               You can use a target without a recipe[31;1H                                  or prerequisites to mark other targets[32;1H                                  as phony.[33;1H* Empty Targets::               When only the date matters and the[34;1H                                  files are empty.[35;1H* Special Targets::             Targets with special built-in meanings.[36;1H* Multiple Targets::            When to make use of several targets in a rule.[37;1H* Multiple Rules::              How to use several rules with the same target.[38;1H* Static Pattern::              Static pattern rules apply to multiple targets[39;1H                                  and can vary the prerequisites according to[40;1H                                  the target name.[41;1H* Double-Colon::                How to use a special kind of rule to allow[42;1H                                  several independent rules for one target.[43;1H* Automatic Prerequisites::     How to automatically generate rules giving[44;1H                                  prerequisites from source files themselves.[46;1HUsing Wildcard Characters in File Names[48;1H* Wildcard Examples::           Several examples[49;1H* Wildcard Pitfall::            Problems to avoid.[50;1H* Wildcard Function::           How to cause wildcard expansion where[51;1H                                  it does not normally take place.[53;1HSearching Directories for Prerequisites[55;1H* General Search::              Specifying a search path that applies[56;1H                                  to every prerequisite.[57;1H* Selective Search::            Specifying a search path[58;1H                                  for a specified class of names.[59;1H* Search Algorithm::            When and how search paths are applied.[60;1H* Recipes/Search::              How to write recipes that work together[61;1H                                  with search paths.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --24%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* Rule Introduction::           What a rule looks like.[2;1H* Simple Makefile::             A simple makefile[K[3;1H* How Make Works::              How `make' processes this makefile[4;1H* Variables Simplify::          Variables make makefiles simpler[K[5;1H* make Deduces::                Letting `make' deduce the recipe[6;1H* Combine By Prerequisite::     Another style of makefile[K[7;1H* Cleanup::                     Rules for cleaning the directory[8;1H[K[9;1HWriting Makefiles[10;1H[K[11;1H* Makefile Contents::           What makefiles contain.[12;1H* Makefile Names::              How to name your makefile.[13;1H* Include::                     How one makefile can use another makefile.[14;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[15;1H* Remaking Makefiles::          How makefiles get remade.[K[16;1H* Overriding Makefiles::        How to override part of one makefile[17;1H                                  with another makefile.[K[18;1H* Reading Makefiles::           How makefiles are parsed.[19;1H* Secondary Expansion::         How and when secondary expansion is performed.[20;1H[K[21;1HWriting Rules[22;1H[K[23;1H* Rule Example::                An example explained.[24;1H* Rule Syntax::                 General syntax explained.[25;1H* Prerequisite Types::          There are two types of prerequisites.[26;1H* Wildcards::                   Using wildcard characters such as `*'.[27;1H* Directory Search::            Searching other directories for source files.[28;1H* Phony Targets::               Using a target that is not a real file's name.[29;1H* Force Targets::               You can use a target without a recipe[K[30;1H                                  or prerequisites to mark other targets[31;1H                                  as phony.[K[32;1H* Empty Targets::               When only the date matters and the[33;1H                                  files are empty.[K[34;1H* Special Targets::             Targets with special built-in meanings.[35;1H* Multiple Targets::            When to make use of several targets in a rule.[36;1H* Multiple Rules::              How to use several rules with the same target.[37;1H* Static Pattern::              Static pattern rules apply to multiple targets[38;1H                                  and can vary the prerequisites according to[K[39;1H                                  the target name.[K[40;1H* Double-Colon::                How to use a special kind of rule to allow[41;1H                                  several independent rules for one target.[42;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[43;1H                                  prerequisites from source files themselves.[44;1H[K[45;1HUsing Wildcard Characters in File Names[46;1H[K[47;1H* Wildcard Examples::           Several examples[48;1H* Wildcard Pitfall::            Problems to avoid.[49;1H* Wildcard Function::           How to cause wildcard expansion where[50;1H                                  it does not normally take place.[K[51;1H[K[52;1HSearching Directories for Prerequisites[53;1H[K[54;1H* General Search::              Specifying a search path that applies[55;1H                                  to every prerequisite.[K[56;1H* Selective Search::            Specifying a search path[57;1H                                  for a specified class of names.[58;1H* Search Algorithm::            When and how search paths are applied.[59;1H* Recipes/Search::              How to write recipes that work together[60;1H                                  with search paths.[K[61;1H* Implicit/Search::             How search paths affect implicit rules.[61;1H[61;1H[1;1H* Simple Makefile::             A simple makefile[K[2;1H* How Make Works::              How `make' processes this makefile[3;1H* Variables Simplify::          Variables make makefiles simpler[K[4;1H* make Deduces::                Letting `make' deduce the recipe[5;1H* Combine By Prerequisite::     Another style of makefile[K[6;1H* Cleanup::                     Rules for cleaning the directory[7;1H[K[8;1HWriting Makefiles[9;1H[K[10;1H* Makefile Contents::           What makefiles contain.[11;1H* Makefile Names::              How to name your makefile.[12;1H* Include::                     How one makefile can use another makefile.[13;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[14;1H* Remaking Makefiles::          How makefiles get remade.[K[15;1H* Overriding Makefiles::        How to override part of one makefile[16;1H                                  with another makefile.[K[17;1H* Reading Makefiles::           How makefiles are parsed.[18;1H* Secondary Expansion::         How and when secondary expansion is performed.[19;1H[K[20;1HWriting Rules[21;1H[K[22;1H* Rule Example::                An example explained.[23;1H* Rule Syntax::                 General syntax explained.[24;1H* Prerequisite Types::          There are two types of prerequisites.[25;1H* Wildcards::                   Using wildcard characters such as `*'.[26;1H* Directory Search::            Searching other directories for source files.[27;1H* Phony Targets::               Using a target that is not a real file's name.[28;1H* Force Targets::               You can use a target without a recipe[K[29;1H                                  or prerequisites to mark other targets[30;1H                                  as phony.[K[31;1H* Empty Targets::               When only the date matters and the[32;1H                                  files are empty.[K[33;1H* Special Targets::             Targets with special built-in meanings.[34;1H* Multiple Targets::            When to make use of several targets in a rule.[35;1H* Multiple Rules::              How to use several rules with the same target.[36;1H* Static Pattern::              Static pattern rules apply to multiple targets[37;1H                                  and can vary the prerequisites according to[K[38;1H                                  the target name.[K[39;1H* Double-Colon::                How to use a special kind of rule to allow[40;1H                                  several independent rules for one target.[41;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[42;1H                                  prerequisites from source files themselves.[43;1H[K[44;1HUsing Wildcard Characters in File Names[45;1H[K[46;1H* Wildcard Examples::           Several examples[47;1H* Wildcard Pitfall::            Problems to avoid.[48;1H* Wildcard Function::           How to cause wildcard expansion where[49;1H                                  it does not normally take place.[K[50;1H[K[51;1HSearching Directories for Prerequisites[52;1H[K[53;1H* General Search::              Specifying a search path that applies[54;1H                                  to every prerequisite.[K[55;1H* Selective Search::            Specifying a search path[56;1H                                  for a specified class of names.[57;1H* Search Algorithm::            When and how search paths are applied.[58;1H* Recipes/Search::              How to write recipes that work together[59;1H                                  with search paths.[K[60;1H* Implicit/Search::             How search paths affect implicit rules.[61;1H* Libraries/Search::            Directory search for link libraries.[K[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --25%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[61;1H[1;1H* How Make Works::              How `make' processes this makefile[2;1H* Variables Simplify::          Variables make makefiles simpler[K[3;1H* make Deduces::                Letting `make' deduce the recipe[4;1H* Combine By Prerequisite::     Another style of makefile[K[5;1H* Cleanup::                     Rules for cleaning the directory[6;1H[K[7;1HWriting Makefiles[8;1H[K[9;1H* Makefile Contents::           What makefiles contain.[10;1H* Makefile Names::              How to name your makefile.[11;1H* Include::                     How one makefile can use another makefile.[12;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[13;1H* Remaking Makefiles::          How makefiles get remade.[K[14;1H* Overriding Makefiles::        How to override part of one makefile[15;1H                                  with another makefile.[K[16;1H* Reading Makefiles::           How makefiles are parsed.[17;1H* Secondary Expansion::         How and when secondary expansion is performed.[18;1H[K[19;1HWriting Rules[20;1H[K[21;1H* Rule Example::                An example explained.[22;1H* Rule Syntax::                 General syntax explained.[23;1H* Prerequisite Types::          There are two types of prerequisites.[24;1H* Wildcards::                   Using wildcard characters such as `*'.[25;1H* Directory Search::            Searching other directories for source files.[26;1H* Phony Targets::               Using a target that is not a real file's name.[27;1H* Force Targets::               You can use a target without a recipe[K[28;1H                                  or prerequisites to mark other targets[29;1H                                  as phony.[K[30;1H* Empty Targets::               When only the date matters and the[31;1H                                  files are empty.[K[32;1H* Special Targets::             Targets with special built-in meanings.[33;1H* Multiple Targets::            When to make use of several targets in a rule.[34;1H* Multiple Rules::              How to use several rules with the same target.[35;1H* Static Pattern::              Static pattern rules apply to multiple targets[36;1H                                  and can vary the prerequisites according to[K[37;1H                                  the target name.[K[38;1H* Double-Colon::                How to use a special kind of rule to allow[39;1H                                  several independent rules for one target.[40;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[41;1H                                  prerequisites from source files themselves.[42;1H[K[43;1HUsing Wildcard Characters in File Names[44;1H[K[45;1H* Wildcard Examples::           Several examples[46;1H* Wildcard Pitfall::            Problems to avoid.[47;1H* Wildcard Function::           How to cause wildcard expansion where[48;1H                                  it does not normally take place.[K[49;1H[K[50;1HSearching Directories for Prerequisites[51;1H[K[52;1H* General Search::              Specifying a search path that applies[53;1H                                  to every prerequisite.[K[54;1H* Selective Search::            Specifying a search path[55;1H                                  for a specified class of names.[56;1H* Search Algorithm::            When and how search paths are applied.[57;1H* Recipes/Search::              How to write recipes that work together[58;1H                                  with search paths.[K[59;1H* Implicit/Search::             How search paths affect implicit rules.[60;1H* Libraries/Search::            Directory search for link libraries.[K[61;1H[K[61;1H[61;1H[1;1H* Variables Simplify::          Variables make makefiles simpler[K[2;1H* make Deduces::                Letting `make' deduce the recipe[3;1H* Combine By Prerequisite::     Another style of makefile[K[4;1H* Cleanup::                     Rules for cleaning the directory[5;1H[K[6;1HWriting Makefiles[7;1H[K[8;1H* Makefile Contents::           What makefiles contain.[9;1H* Makefile Names::              How to name your makefile.[10;1H* Include::                     How one makefile can use another makefile.[11;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[12;1H* Remaking Makefiles::          How makefiles get remade.[K[13;1H* Overriding Makefiles::        How to override part of one makefile[14;1H                                  with another makefile.[K[15;1H* Reading Makefiles::           How makefiles are parsed.[16;1H* Secondary Expansion::         How and when secondary expansion is performed.[17;1H[K[18;1HWriting Rules[19;1H[K[20;1H* Rule Example::                An example explained.[21;1H* Rule Syntax::                 General syntax explained.[22;1H* Prerequisite Types::          There are two types of prerequisites.[23;1H* Wildcards::                   Using wildcard characters such as `*'.[24;1H* Directory Search::            Searching other directories for source files.[25;1H* Phony Targets::               Using a target that is not a real file's name.[26;1H* Force Targets::               You can use a target without a recipe[K[27;1H                                  or prerequisites to mark other targets[28;1H                                  as phony.[K[29;1H* Empty Targets::               When only the date matters and the[30;1H                                  files are empty.[K[31;1H* Special Targets::             Targets with special built-in meanings.[32;1H* Multiple Targets::            When to make use of several targets in a rule.[33;1H* Multiple Rules::              How to use several rules with the same target.[34;1H* Static Pattern::              Static pattern rules apply to multiple targets[35;1H                                  and can vary the prerequisites according to[K[36;1H                                  the target name.[K[37;1H* Double-Colon::                How to use a special kind of rule to allow[38;1H                                  several independent rules for one target.[39;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[40;1H                                  prerequisites from source files themselves.[41;1H[K[42;1HUsing Wildcard Characters in File Names[43;1H[K[44;1H* Wildcard Examples::           Several examples[45;1H* Wildcard Pitfall::            Problems to avoid.[46;1H* Wildcard Function::           How to cause wildcard expansion where[47;1H                                  it does not normally take place.[K[48;1H[K[49;1HSearching Directories for Prerequisites[50;1H[K[51;1H* General Search::              Specifying a search path that applies[52;1H                                  to every prerequisite.[K[53;1H* Selective Search::            Specifying a search path[54;1H                                  for a specified class of names.[55;1H* Search Algorithm::            When and how search paths are applied.[56;1H* Recipes/Search::              How to write recipes that work together[57;1H                                  with search paths.[K[58;1H* Implicit/Search::             How search paths affect implicit rules.[59;1H* Libraries/Search::            Directory search for link libraries.[K[60;1H[K[61;1HStatic Pattern Rules[61;1H[61;1H[1;1H* make Deduces::                Letting `make' deduce the recipe[2;1H* Combine By Prerequisite::     Another style of makefile[K[3;1H* Cleanup::                     Rules for cleaning the directory[4;1H[K[5;1HWriting Makefiles[6;1H[K[7;1H* Makefile Contents::           What makefiles contain.[8;1H* Makefile Names::              How to name your makefile.[9;1H* Include::                     How one makefile can use another makefile.[10;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[11;1H* Remaking Makefiles::          How makefiles get remade.[K[12;1H* Overriding Makefiles::        How to override part of one makefile[13;1H                                  with another makefile.[K[14;1H* Reading Makefiles::           How makefiles are parsed.[15;1H* Secondary Expansion::         How and when secondary expansion is performed.[16;1H[K[17;1HWriting Rules[18;1H[K[19;1H* Rule Example::                An example explained.[20;1H* Rule Syntax::                 General syntax explained.[21;1H* Prerequisite Types::          There are two types of prerequisites.[22;1H* Wildcards::                   Using wildcard characters such as `*'.[23;1H* Directory Search::            Searching other directories for source files.[24;1H* Phony Targets::               Using a target that is not a real file's name.[25;1H* Force Targets::               You can use a target without a recipe[K[26;1H                                  or prerequisites to mark other targets[27;1H                                  as phony.[K[28;1H* Empty Targets::               When only the date matters and the[29;1H                                  files are empty.[K[30;1H* Special Targets::             Targets with special built-in meanings.[31;1H* Multiple Targets::            When to make use of several targets in a rule.[32;1H* Multiple Rules::              How to use several rules with the same target.[33;1H* Static Pattern::              Static pattern rules apply to multiple targets[34;1H                                  and can vary the prerequisites according to[K[35;1H                                  the target name.[K[36;1H* Double-Colon::                How to use a special kind of rule to allow[37;1H                                  several independent rules for one target.[38;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[39;1H                                  prerequisites from source files themselves.[40;1H[K[41;1HUsing Wildcard Characters in File Names[42;1H[K[43;1H* Wildcard Examples::           Several examples[44;1H* Wildcard Pitfall::            Problems to avoid.[45;1H* Wildcard Function::           How to cause wildcard expansion where[46;1H                                  it does not normally take place.[K[47;1H[K[48;1HSearching Directories for Prerequisites[49;1H[K[50;1H* General Search::              Specifying a search path that applies[51;1H                                  to every prerequisite.[K[52;1H* Selective Search::            Specifying a search path[53;1H                                  for a specified class of names.[54;1H* Search Algorithm::            When and how search paths are applied.[55;1H* Recipes/Search::              How to write recipes that work together[56;1H                                  with search paths.[K[57;1H* Implicit/Search::             How search paths affect implicit rules.[58;1H* Libraries/Search::            Directory search for link libraries.[K[59;1H[K[60;1HStatic Pattern Rules[61;1H[K[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --26%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[61;1H[1;1H* Combine By Prerequisite::     Another style of makefile[K[2;1H* Cleanup::                     Rules for cleaning the directory[3;1H[K[4;1HWriting Makefiles[5;1H[K[6;1H* Makefile Contents::           What makefiles contain.[7;1H* Makefile Names::              How to name your makefile.[8;1H* Include::                     How one makefile can use another makefile.[9;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[10;1H* Remaking Makefiles::          How makefiles get remade.[K[11;1H* Overriding Makefiles::        How to override part of one makefile[12;1H                                  with another makefile.[K[13;1H* Reading Makefiles::           How makefiles are parsed.[14;1H* Secondary Expansion::         How and when secondary expansion is performed.[15;1H[K[16;1HWriting Rules[17;1H[K[18;1H* Rule Example::                An example explained.[19;1H* Rule Syntax::                 General syntax explained.[20;1H* Prerequisite Types::          There are two types of prerequisites.[21;1H* Wildcards::                   Using wildcard characters such as `*'.[22;1H* Directory Search::            Searching other directories for source files.[23;1H* Phony Targets::               Using a target that is not a real file's name.[24;1H* Force Targets::               You can use a target without a recipe[K[25;1H                                  or prerequisites to mark other targets[26;1H                                  as phony.[K[27;1H* Empty Targets::               When only the date matters and the[28;1H                                  files are empty.[K[29;1H* Special Targets::             Targets with special built-in meanings.[30;1H* Multiple Targets::            When to make use of several targets in a rule.[31;1H* Multiple Rules::              How to use several rules with the same target.[32;1H* Static Pattern::              Static pattern rules apply to multiple targets[33;1H                                  and can vary the prerequisites according to[K[34;1H                                  the target name.[K[35;1H* Double-Colon::                How to use a special kind of rule to allow[36;1H                                  several independent rules for one target.[37;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[38;1H                                  prerequisites from source files themselves.[39;1H[K[40;1HUsing Wildcard Characters in File Names[41;1H[K[42;1H* Wildcard Examples::           Several examples[43;1H* Wildcard Pitfall::            Problems to avoid.[44;1H* Wildcard Function::           How to cause wildcard expansion where[45;1H                                  it does not normally take place.[K[46;1H[K[47;1HSearching Directories for Prerequisites[48;1H[K[49;1H* General Search::              Specifying a search path that applies[50;1H                                  to every prerequisite.[K[51;1H* Selective Search::            Specifying a search path[52;1H                                  for a specified class of names.[53;1H* Search Algorithm::            When and how search paths are applied.[54;1H* Recipes/Search::              How to write recipes that work together[55;1H                                  with search paths.[K[56;1H* Implicit/Search::             How search paths affect implicit rules.[57;1H* Libraries/Search::            Directory search for link libraries.[K[58;1H[K[59;1HStatic Pattern Rules[60;1H[K[61;1H* Static Usage::                The syntax of static pattern rules.[61;1H[61;1H[1;1H* Cleanup::                     Rules for cleaning the directory[2;1H[K[3;1HWriting Makefiles[4;1H[K[5;1H* Makefile Contents::           What makefiles contain.[6;1H* Makefile Names::              How to name your makefile.[7;1H* Include::                     How one makefile can use another makefile.[8;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[9;1H* Remaking Makefiles::          How makefiles get remade.[K[10;1H* Overriding Makefiles::        How to override part of one makefile[11;1H                                  with another makefile.[K[12;1H* Reading Makefiles::           How makefiles are parsed.[13;1H* Secondary Expansion::         How and when secondary expansion is performed.[14;1H[K[15;1HWriting Rules[16;1H[K[17;1H* Rule Example::                An example explained.[18;1H* Rule Syntax::                 General syntax explained.[19;1H* Prerequisite Types::          There are two types of prerequisites.[20;1H* Wildcards::                   Using wildcard characters such as `*'.[21;1H* Directory Search::            Searching other directories for source files.[22;1H* Phony Targets::               Using a target that is not a real file's name.[23;1H* Force Targets::               You can use a target without a recipe[K[24;1H                                  or prerequisites to mark other targets[25;1H                                  as phony.[K[26;1H* Empty Targets::               When only the date matters and the[27;1H                                  files are empty.[K[28;1H* Special Targets::             Targets with special built-in meanings.[29;1H* Multiple Targets::            When to make use of several targets in a rule.[30;1H* Multiple Rules::              How to use several rules with the same target.[31;1H* Static Pattern::              Static pattern rules apply to multiple targets[32;1H                                  and can vary the prerequisites according to[K[33;1H                                  the target name.[K[34;1H* Double-Colon::                How to use a special kind of rule to allow[35;1H                                  several independent rules for one target.[36;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[37;1H                                  prerequisites from source files themselves.[38;1H[K[39;1HUsing Wildcard Characters in File Names[40;1H[K[41;1H* Wildcard Examples::           Several examples[42;1H* Wildcard Pitfall::            Problems to avoid.[43;1H* Wildcard Function::           How to cause wildcard expansion where[44;1H                                  it does not normally take place.[K[45;1H[K[46;1HSearching Directories for Prerequisites[47;1H[K[48;1H* General Search::              Specifying a search path that applies[49;1H                                  to every prerequisite.[K[50;1H* Selective Search::            Specifying a search path[51;1H                                  for a specified class of names.[52;1H* Search Algorithm::            When and how search paths are applied.[53;1H* Recipes/Search::              How to write recipes that work together[54;1H                                  with search paths.[K[55;1H* Implicit/Search::             How search paths affect implicit rules.[56;1H* Libraries/Search::            Directory search for link libraries.[K[57;1H[K[58;1HStatic Pattern Rules[59;1H[K[60;1H* Static Usage::                The syntax of static pattern rules.[61;1H* Static versus Implicit::      When are they better than implicit rules?[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --27%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[61;1H[1;1H[K[2;1HWriting Makefiles[3;1H[K[4;1H* Makefile Contents::           What makefiles contain.[5;1H* Makefile Names::              How to name your makefile.[6;1H* Include::                     How one makefile can use another makefile.[7;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[8;1H* Remaking Makefiles::          How makefiles get remade.[K[9;1H* Overriding Makefiles::        How to override part of one makefile[10;1H                                  with another makefile.[K[11;1H* Reading Makefiles::           How makefiles are parsed.[12;1H* Secondary Expansion::         How and when secondary expansion is performed.[13;1H[K[14;1HWriting Rules[15;1H[K[16;1H* Rule Example::                An example explained.[17;1H* Rule Syntax::                 General syntax explained.[18;1H* Prerequisite Types::          There are two types of prerequisites.[19;1H* Wildcards::                   Using wildcard characters such as `*'.[20;1H* Directory Search::            Searching other directories for source files.[21;1H* Phony Targets::               Using a target that is not a real file's name.[22;1H* Force Targets::               You can use a target without a recipe[K[23;1H                                  or prerequisites to mark other targets[24;1H                                  as phony.[K[25;1H* Empty Targets::               When only the date matters and the[26;1H                                  files are empty.[K[27;1H* Special Targets::             Targets with special built-in meanings.[28;1H* Multiple Targets::            When to make use of several targets in a rule.[29;1H* Multiple Rules::              How to use several rules with the same target.[30;1H* Static Pattern::              Static pattern rules apply to multiple targets[31;1H                                  and can vary the prerequisites according to[K[32;1H                                  the target name.[K[33;1H* Double-Colon::                How to use a special kind of rule to allow[34;1H                                  several independent rules for one target.[35;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[36;1H                                  prerequisites from source files themselves.[37;1H[K[38;1HUsing Wildcard Characters in File Names[39;1H[K[40;1H* Wildcard Examples::           Several examples[41;1H* Wildcard Pitfall::            Problems to avoid.[42;1H* Wildcard Function::           How to cause wildcard expansion where[43;1H                                  it does not normally take place.[K[44;1H[K[45;1HSearching Directories for Prerequisites[46;1H[K[47;1H* General Search::              Specifying a search path that applies[48;1H                                  to every prerequisite.[K[49;1H* Selective Search::            Specifying a search path[50;1H                                  for a specified class of names.[51;1H* Search Algorithm::            When and how search paths are applied.[52;1H* Recipes/Search::              How to write recipes that work together[53;1H                                  with search paths.[K[54;1H* Implicit/Search::             How search paths affect implicit rules.[55;1H* Libraries/Search::            Directory search for link libraries.[K[56;1H[K[57;1HStatic Pattern Rules[58;1H[K[59;1H* Static Usage::                The syntax of static pattern rules.[60;1H* Static versus Implicit::      When are they better than implicit rules?[61;1H[K[61;1H[61;1H[1;1HWriting Makefiles[2;1H[K[3;1H* Makefile Contents::           What makefiles contain.[4;1H* Makefile Names::              How to name your makefile.[5;1H* Include::                     How one makefile can use another makefile.[6;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[7;1H* Remaking Makefiles::          How makefiles get remade.[K[8;1H* Overriding Makefiles::        How to override part of one makefile[9;1H                                  with another makefile.[K[10;1H* Reading Makefiles::           How makefiles are parsed.[11;1H* Secondary Expansion::         How and when secondary expansion is performed.[12;1H[K[13;1HWriting Rules[14;1H[K[15;1H* Rule Example::                An example explained.[16;1H* Rule Syntax::                 General syntax explained.[17;1H* Prerequisite Types::          There are two types of prerequisites.[18;1H* Wildcards::                   Using wildcard characters such as `*'.[19;1H* Directory Search::            Searching other directories for source files.[20;1H* Phony Targets::               Using a target that is not a real file's name.[21;1H* Force Targets::               You can use a target without a recipe[K[22;1H                                  or prerequisites to mark other targets[23;1H                                  as phony.[K[24;1H* Empty Targets::               When only the date matters and the[25;1H                                  files are empty.[K[26;1H* Special Targets::             Targets with special built-in meanings.[27;1H* Multiple Targets::            When to make use of several targets in a rule.[28;1H* Multiple Rules::              How to use several rules with the same target.[29;1H* Static Pattern::              Static pattern rules apply to multiple targets[30;1H                                  and can vary the prerequisites according to[K[31;1H                                  the target name.[K[32;1H* Double-Colon::                How to use a special kind of rule to allow[33;1H                                  several independent rules for one target.[34;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[35;1H                                  prerequisites from source files themselves.[36;1H[K[37;1HUsing Wildcard Characters in File Names[38;1H[K[39;1H* Wildcard Examples::           Several examples[40;1H* Wildcard Pitfall::            Problems to avoid.[41;1H* Wildcard Function::           How to cause wildcard expansion where[42;1H                                  it does not normally take place.[K[43;1H[K[44;1HSearching Directories for Prerequisites[45;1H[K[46;1H* General Search::              Specifying a search path that applies[47;1H                                  to every prerequisite.[K[48;1H* Selective Search::            Specifying a search path[49;1H                                  for a specified class of names.[50;1H* Search Algorithm::            When and how search paths are applied.[51;1H* Recipes/Search::              How to write recipes that work together[52;1H                                  with search paths.[K[53;1H* Implicit/Search::             How search paths affect implicit rules.[54;1H* Libraries/Search::            Directory search for link libraries.[K[55;1H[K[56;1HStatic Pattern Rules[57;1H[K[58;1H* Static Usage::                The syntax of static pattern rules.[59;1H* Static versus Implicit::      When are they better than implicit rules?[60;1H[K[61;1HWriting Recipes in Rules[61;1H[61;1H[1;1H[K[2;1H* Makefile Contents::           What makefiles contain.[3;1H* Makefile Names::              How to name your makefile.[4;1H* Include::                     How one makefile can use another makefile.[5;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[6;1H* Remaking Makefiles::          How makefiles get remade.[K[7;1H* Overriding Makefiles::        How to override part of one makefile[8;1H                                  with another makefile.[K[9;1H* Reading Makefiles::           How makefiles are parsed.[10;1H* Secondary Expansion::         How and when secondary expansion is performed.[11;1H[K[12;1HWriting Rules[13;1H[K[14;1H* Rule Example::                An example explained.[15;1H* Rule Syntax::                 General syntax explained.[16;1H* Prerequisite Types::          There are two types of prerequisites.[17;1H* Wildcards::                   Using wildcard characters such as `*'.[18;1H* Directory Search::            Searching other directories for source files.[19;1H* Phony Targets::               Using a target that is not a real file's name.[20;1H* Force Targets::               You can use a target without a recipe[K[21;1H                                  or prerequisites to mark other targets[22;1H                                  as phony.[K[23;1H* Empty Targets::               When only the date matters and the[24;1H                                  files are empty.[K[25;1H* Special Targets::             Targets with special built-in meanings.[26;1H* Multiple Targets::            When to make use of several targets in a rule.[27;1H* Multiple Rules::              How to use several rules with the same target.[28;1H* Static Pattern::              Static pattern rules apply to multiple targets[29;1H                                  and can vary the prerequisites according to[K[30;1H                                  the target name.[K[31;1H* Double-Colon::                How to use a special kind of rule to allow[32;1H                                  several independent rules for one target.[33;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[34;1H                                  prerequisites from source files themselves.[35;1H[K[36;1HUsing Wildcard Characters in File Names[37;1H[K[38;1H* Wildcard Examples::           Several examples[39;1H* Wildcard Pitfall::            Problems to avoid.[40;1H* Wildcard Function::           How to cause wildcard expansion where[41;1H                                  it does not normally take place.[K[42;1H[K[43;1HSearching Directories for Prerequisites[44;1H[K[45;1H* General Search::              Specifying a search path that applies[46;1H                                  to every prerequisite.[K[47;1H* Selective Search::            Specifying a search path[48;1H                                  for a specified class of names.[49;1H* Search Algorithm::            When and how search paths are applied.[50;1H* Recipes/Search::              How to write recipes that work together[51;1H                                  with search paths.[K[52;1H* Implicit/Search::             How search paths affect implicit rules.[53;1H* Libraries/Search::            Directory search for link libraries.[K[54;1H[K[55;1HStatic Pattern Rules[56;1H[K[57;1H* Static Usage::                The syntax of static pattern rules.[58;1H* Static versus Implicit::      When are they better than implicit rules?[59;1H[K[60;1HWriting Recipes in Rules[61;1H[K[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --28%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[61;1H[1;1H* Makefile Contents::           What makefiles contain.[2;1H* Makefile Names::              How to name your makefile.[3;1H* Include::                     How one makefile can use another makefile.[4;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[5;1H* Remaking Makefiles::          How makefiles get remade.[K[6;1H* Overriding Makefiles::        How to override part of one makefile[7;1H                                  with another makefile.[K[8;1H* Reading Makefiles::           How makefiles are parsed.[9;1H* Secondary Expansion::         How and when secondary expansion is performed.[10;1H[K[11;1HWriting Rules[12;1H[K[13;1H* Rule Example::                An example explained.[14;1H* Rule Syntax::                 General syntax explained.[15;1H* Prerequisite Types::          There are two types of prerequisites.[16;1H* Wildcards::                   Using wildcard characters such as `*'.[17;1H* Directory Search::            Searching other directories for source files.[18;1H* Phony Targets::               Using a target that is not a real file's name.[19;1H* Force Targets::               You can use a target without a recipe[K[20;1H                                  or prerequisites to mark other targets[21;1H                                  as phony.[K[22;1H* Empty Targets::               When only the date matters and the[23;1H                                  files are empty.[K[24;1H* Special Targets::             Targets with special built-in meanings.[25;1H* Multiple Targets::            When to make use of several targets in a rule.[26;1H* Multiple Rules::              How to use several rules with the same target.[27;1H* Static Pattern::              Static pattern rules apply to multiple targets[28;1H                                  and can vary the prerequisites according to[K[29;1H                                  the target name.[K[30;1H* Double-Colon::                How to use a special kind of rule to allow[31;1H                                  several independent rules for one target.[32;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[33;1H                                  prerequisites from source files themselves.[34;1H[K[35;1HUsing Wildcard Characters in File Names[36;1H[K[37;1H* Wildcard Examples::           Several examples[38;1H* Wildcard Pitfall::            Problems to avoid.[39;1H* Wildcard Function::           How to cause wildcard expansion where[40;1H                                  it does not normally take place.[K[41;1H[K[42;1HSearching Directories for Prerequisites[43;1H[K[44;1H* General Search::              Specifying a search path that applies[45;1H                                  to every prerequisite.[K[46;1H* Selective Search::            Specifying a search path[47;1H                                  for a specified class of names.[48;1H* Search Algorithm::            When and how search paths are applied.[49;1H* Recipes/Search::              How to write recipes that work together[50;1H                                  with search paths.[K[51;1H* Implicit/Search::             How search paths affect implicit rules.[52;1H* Libraries/Search::            Directory search for link libraries.[K[53;1H[K[54;1HStatic Pattern Rules[55;1H[K[56;1H* Static Usage::                The syntax of static pattern rules.[57;1H* Static versus Implicit::      When are they better than implicit rules?[58;1H[K[59;1HWriting Recipes in Rules[60;1H[K[61;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[61;1H[61;1H[1;1H* Makefile Names::              How to name your makefile.[2;1H* Include::                     How one makefile can use another makefile.[3;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[4;1H* Remaking Makefiles::          How makefiles get remade.[K[5;1H* Overriding Makefiles::        How to override part of one makefile[6;1H                                  with another makefile.[K[7;1H* Reading Makefiles::           How makefiles are parsed.[8;1H* Secondary Expansion::         How and when secondary expansion is performed.[9;1H[K[10;1HWriting Rules[11;1H[K[12;1H* Rule Example::                An example explained.[13;1H* Rule Syntax::                 General syntax explained.[14;1H* Prerequisite Types::          There are two types of prerequisites.[15;1H* Wildcards::                   Using wildcard characters such as `*'.[16;1H* Directory Search::            Searching other directories for source files.[17;1H* Phony Targets::               Using a target that is not a real file's name.[18;1H* Force Targets::               You can use a target without a recipe[K[61;1H[61;1H[1;1H* Include::                     How one makefile can use another makefile.[2;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[3;1H* Remaking Makefiles::          How makefiles get remade.[K[4;1H* Overriding Makefiles::        How to override part of one makefile[5;1H                                  with another makefile.[K[6;1H* Reading Makefiles::           How makefiles are parsed.[7;1H* Secondary Expansion::         How and when secondary expansion is performed.[8;1H[K[9;1HWriting Rules[10;1H[K[11;1H* Rule Example::                An example explained.[12;1H* Rule Syntax::                 General syntax explained.[13;1H* Prerequisite Types::          There are two types of prerequisites.[14;1H* Wildcards::                   Using wildcard characters such as `*'.[15;1H* Directory Search::            Searching other directories for source files.[16;1H* Phony Targets::               Using a target that is not a real file's name.[17;1H* Force Targets::               You can use a target without a recipe[K[18;1H                                  or prerequisites to mark other targets[19;1H                                  as phony.[K[20;1H* Empty Targets::               When only the date matters and the[K[21;1H                                  files are empty.[22;1H* Special Targets::             Targets with special built-in meanings.[23;1H* Multiple Targets::            When to make use of several targets in a rule.[24;1H* Multiple Rules::              How to use several rules with the same target.[25;1H* Static Pattern::              Static pattern rules apply to multiple targets[26;1H                                  and can vary the prerequisites according to[K[27;1H                                  the target name.[K[28;1H* Double-Colon::                How to use a special kind of rule to allow[K[29;1H                                  several independent rules for one target.[30;1H* Automatic Prerequisites::     How to automatically generate rules giving[31;1H                                  prerequisites from source files themselves.[32;1H[K[33;1HUsing Wildcard Characters in File Names[K[35;1H* Wildcard Examples::           Several examples[36;1H* Wildcard Pitfall::            Problems to avoid.[37;1H* Wildcard Function::           How to cause wildcard expansion where[38;1H                                  it does not normally take place.[39;1H[K[40;1HSearching Directories for Prerequisites[K[42;1H* General Search::              Specifying a search path that applies[43;1H                                  to every prerequisite.[44;1H* Selective Search::            Specifying a search path[K[45;1H                                  for a specified class of names.[46;1H* Search Algorithm::            When and how search paths are applied.[47;1H* Recipes/Search::              How to write recipes that work together[48;1H                                  with search paths.[K[49;1H* Implicit/Search::             How search paths affect implicit rules.[50;1H* Libraries/Search::            Directory search for link libraries.[51;1H[K[52;1HStatic Pattern Rules[K[54;1H* Static Usage::                The syntax of static pattern rules.[55;1H* Static versus Implicit::      When are they better than implicit rules?[56;1H[K[57;1HWriting Recipes in Rules[K[59;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[60;1H* Echoing::                     How to control when recipes are echoed.[61;1H* Execution::                   How recipes are executed.[K[61;1H[1;1H* Include::                     How one makefile can use another makefile.[2;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[3;1H* Remaking Makefiles::          How makefiles get remade.[4;1H* Overriding Makefiles::        How to override part of one makefile[5;1H                                  with another makefile.[6;1H* Reading Makefiles::           How makefiles are parsed.[7;1H* Secondary Expansion::         How and when secondary expansion is performed.[9;1HWriting Rules[11;1H* Rule Example::                An example explained.[12;1H* Rule Syntax::                 General syntax explained.[13;1H* Prerequisite Types::          There are two types of prerequisites.[14;1H* Wildcards::                   Using wildcard characters such as `*'.[15;1H* Directory Search::            Searching other directories for source files.[16;1H* Phony Targets::               Using a target that is not a real file's name.[17;1H* Force Targets::               You can use a target without a recipe[18;1H                                  or prerequisites to mark other targets[19;1H                                  as phony.[20;1H* Empty Targets::               When only the date matters and the[21;1H                                  files are empty.[22;1H* Special Targets::             Targets with special built-in meanings.[23;1H* Multiple Targets::            When to make use of several targets in a rule.[24;1H* Multiple Rules::              How to use several rules with the same target.[25;1H* Static Pattern::              Static pattern rules apply to multiple targets[26;1H                                  and can vary the prerequisites according to[27;1H                                  the target name.[28;1H* Double-Colon::                How to use a special kind of rule to allow[29;1H                                  several independent rules for one target.[30;1H* Automatic Prerequisites::     How to automatically generate rules giving[31;1H                                  prerequisites from source files themselves.[33;1HUsing Wildcard Characters in File Names[35;1H* Wildcard Examples::           Several examples[36;1H* Wildcard Pitfall::            Problems to avoid.[37;1H* Wildcard Function::           How to cause wildcard expansion where[38;1H                                  it does not normally take place.[40;1HSearching Directories for Prerequisites[42;1H* General Search::              Specifying a search path that applies[43;1H                                  to every prerequisite.[44;1H* Selective Search::            Specifying a search path[45;1H                                  for a specified class of names.[46;1H* Search Algorithm::            When and how search paths are applied.[47;1H* Recipes/Search::              How to write recipes that work together[48;1H                                  with search paths.[49;1H* Implicit/Search::             How search paths affect implicit rules.[50;1H* Libraries/Search::            Directory search for link libraries.[52;1HStatic Pattern Rules[54;1H* Static Usage::                The syntax of static pattern rules.[55;1H* Static versus Implicit::      When are they better than implicit rules?[57;1HWriting Recipes in Rules[59;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[60;1H* Echoing::                     How to control when recipes are echoed.[61;1H* Execution::                   How recipes are executed.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --29%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* MAKEFILES Variable::          The environment can specify extra makefiles.[2;1H* Remaking Makefiles::          How makefiles get remade.[K[3;1H* Overriding Makefiles::        How to override part of one makefile[4;1H                                  with another makefile.[K[5;1H* Reading Makefiles::           How makefiles are parsed.[6;1H* Secondary Expansion::         How and when secondary expansion is performed.[7;1H[K[8;1HWriting Rules[9;1H[K[10;1H* Rule Example::                An example explained.[11;1H* Rule Syntax::                 General syntax explained.[12;1H* Prerequisite Types::          There are two types of prerequisites.[13;1H* Wildcards::                   Using wildcard characters such as `*'.[14;1H* Directory Search::            Searching other directories for source files.[15;1H* Phony Targets::               Using a target that is not a real file's name.[16;1H* Force Targets::               You can use a target without a recipe[K[17;1H                                  or prerequisites to mark other targets[18;1H                                  as phony.[K[19;1H* Empty Targets::               When only the date matters and the[20;1H                                  files are empty.[K[21;1H* Special Targets::             Targets with special built-in meanings.[22;1H* Multiple Targets::            When to make use of several targets in a rule.[23;1H* Multiple Rules::              How to use several rules with the same target.[24;1H* Static Pattern::              Static pattern rules apply to multiple targets[25;1H                                  and can vary the prerequisites according to[K[26;1H                                  the target name.[K[27;1H* Double-Colon::                How to use a special kind of rule to allow[28;1H                                  several independent rules for one target.[29;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[30;1H                                  prerequisites from source files themselves.[31;1H[K[32;1HUsing Wildcard Characters in File Names[33;1H[K[34;1H* Wildcard Examples::           Several examples[35;1H* Wildcard Pitfall::            Problems to avoid.[36;1H* Wildcard Function::           How to cause wildcard expansion where[37;1H                                  it does not normally take place.[K[38;1H[K[39;1HSearching Directories for Prerequisites[40;1H[K[41;1H* General Search::              Specifying a search path that applies[42;1H                                  to every prerequisite.[K[43;1H* Selective Search::            Specifying a search path[44;1H                                  for a specified class of names.[45;1H* Search Algorithm::            When and how search paths are applied.[46;1H* Recipes/Search::              How to write recipes that work together[47;1H                                  with search paths.[K[48;1H* Implicit/Search::             How search paths affect implicit rules.[49;1H* Libraries/Search::            Directory search for link libraries.[K[50;1H[K[51;1HStatic Pattern Rules[52;1H[K[53;1H* Static Usage::                The syntax of static pattern rules.[54;1H* Static versus Implicit::      When are they better than implicit rules?[55;1H[K[56;1HWriting Recipes in Rules[57;1H[K[58;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[59;1H* Echoing::                     How to control when recipes are echoed.[60;1H* Execution::                   How recipes are executed.[K[61;1H* Parallel::                    How recipes can be executed in parallel.[61;1H[61;1H[1;1H* Remaking Makefiles::          How makefiles get remade.[K[2;1H* Overriding Makefiles::        How to override part of one makefile[3;1H                                  with another makefile.[K[4;1H* Reading Makefiles::           How makefiles are parsed.[5;1H* Secondary Expansion::         How and when secondary expansion is performed.[6;1H[K[7;1HWriting Rules[8;1H[K[9;1H* Rule Example::                An example explained.[10;1H* Rule Syntax::                 General syntax explained.[11;1H* Prerequisite Types::          There are two types of prerequisites.[12;1H* Wildcards::                   Using wildcard characters such as `*'.[13;1H* Directory Search::            Searching other directories for source files.[14;1H* Phony Targets::               Using a target that is not a real file's name.[15;1H* Force Targets::               You can use a target without a recipe[K[16;1H                                  or prerequisites to mark other targets[17;1H                                  as phony.[K[18;1H* Empty Targets::               When only the date matters and the[19;1H                                  files are empty.[K[20;1H* Special Targets::             Targets with special built-in meanings.[21;1H* Multiple Targets::            When to make use of several targets in a rule.[22;1H* Multiple Rules::              How to use several rules with the same target.[23;1H* Static Pattern::              Static pattern rules apply to multiple targets[24;1H                                  and can vary the prerequisites according to[K[25;1H                                  the target name.[K[26;1H* Double-Colon::                How to use a special kind of rule to allow[27;1H                                  several independent rules for one target.[28;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[29;1H                                  prerequisites from source files themselves.[30;1H[K[31;1HUsing Wildcard Characters in File Names[32;1H[K[33;1H* Wildcard Examples::           Several examples[34;1H* Wildcard Pitfall::            Problems to avoid.[35;1H* Wildcard Function::           How to cause wildcard expansion where[36;1H                                  it does not normally take place.[K[37;1H[K[38;1HSearching Directories for Prerequisites[39;1H[K[40;1H* General Search::              Specifying a search path that applies[41;1H                                  to every prerequisite.[K[42;1H* Selective Search::            Specifying a search path[43;1H                                  for a specified class of names.[44;1H* Search Algorithm::            When and how search paths are applied.[45;1H* Recipes/Search::              How to write recipes that work together[46;1H                                  with search paths.[K[47;1H* Implicit/Search::             How search paths affect implicit rules.[48;1H* Libraries/Search::            Directory search for link libraries.[K[49;1H[K[50;1HStatic Pattern Rules[51;1H[K[52;1H* Static Usage::                The syntax of static pattern rules.[53;1H* Static versus Implicit::      When are they better than implicit rules?[54;1H[K[55;1HWriting Recipes in Rules[56;1H[K[57;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[58;1H* Echoing::                     How to control when recipes are echoed.[59;1H* Execution::                   How recipes are executed.[K[60;1H* Parallel::                    How recipes can be executed in parallel.[61;1H* Errors::                      What happens after a recipe execution error.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --30%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[61;1H[1;1H* Overriding Makefiles::        How to override part of one makefile[2;1H                                  with another makefile.[K[3;1H* Reading Makefiles::           How makefiles are parsed.[4;1H* Secondary Expansion::         How and when secondary expansion is performed.[5;1H[K[6;1HWriting Rules[7;1H[K[8;1H* Rule Example::                An example explained.[9;1H* Rule Syntax::                 General syntax explained.[10;1H* Prerequisite Types::          There are two types of prerequisites.[11;1H* Wildcards::                   Using wildcard characters such as `*'.[12;1H* Directory Search::            Searching other directories for source files.[13;1H* Phony Targets::               Using a target that is not a real file's name.[14;1H* Force Targets::               You can use a target without a recipe[K[15;1H                                  or prerequisites to mark other targets[16;1H                                  as phony.[K[17;1H* Empty Targets::               When only the date matters and the[18;1H                                  files are empty.[K[19;1H* Special Targets::             Targets with special built-in meanings.[20;1H* Multiple Targets::            When to make use of several targets in a rule.[21;1H* Multiple Rules::              How to use several rules with the same target.[22;1H* Static Pattern::              Static pattern rules apply to multiple targets[23;1H                                  and can vary the prerequisites according to[K[24;1H                                  the target name.[K[25;1H* Double-Colon::                How to use a special kind of rule to allow[26;1H                                  several independent rules for one target.[27;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[28;1H                                  prerequisites from source files themselves.[29;1H[K[30;1HUsing Wildcard Characters in File Names[31;1H[K[32;1H* Wildcard Examples::           Several examples[33;1H* Wildcard Pitfall::            Problems to avoid.[34;1H* Wildcard Function::           How to cause wildcard expansion where[35;1H                                  it does not normally take place.[K[36;1H[K[37;1HSearching Directories for Prerequisites[38;1H[K[39;1H* General Search::              Specifying a search path that applies[40;1H                                  to every prerequisite.[K[41;1H* Selective Search::            Specifying a search path[42;1H                                  for a specified class of names.[43;1H* Search Algorithm::            When and how search paths are applied.[44;1H* Recipes/Search::              How to write recipes that work together[45;1H                                  with search paths.[K[46;1H* Implicit/Search::             How search paths affect implicit rules.[47;1H* Libraries/Search::            Directory search for link libraries.[K[48;1H[K[49;1HStatic Pattern Rules[50;1H[K[51;1H* Static Usage::                The syntax of static pattern rules.[52;1H* Static versus Implicit::      When are they better than implicit rules?[53;1H[K[54;1HWriting Recipes in Rules[55;1H[K[56;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[57;1H* Echoing::                     How to control when recipes are echoed.[58;1H* Execution::                   How recipes are executed.[K[59;1H* Parallel::                    How recipes can be executed in parallel.[60;1H* Errors::                      What happens after a recipe execution error.[61;1H* Interrupts::                  What happens when a recipe is interrupted.[K[61;1H[61;1H[1;1H                                  with another makefile.[K[2;1H* Reading Makefiles::           How makefiles are parsed.[3;1H* Secondary Expansion::         How and when secondary expansion is performed.[4;1H[K[5;1HWriting Rules[6;1H[K[7;1H* Rule Example::                An example explained.[8;1H* Rule Syntax::                 General syntax explained.[9;1H* Prerequisite Types::          There are two types of prerequisites.[10;1H* Wildcards::                   Using wildcard characters such as `*'.[11;1H* Directory Search::            Searching other directories for source files.[12;1H* Phony Targets::               Using a target that is not a real file's name.[61;1H[61;1H[1;1H* Reading Makefiles::           How makefiles are parsed.[2;1H* Secondary Expansion::         How and when secondary expansion is performed.[3;1H[K[4;1HWriting Rules[5;1H[K[6;1H* Rule Example::                An example explained.[7;1H* Rule Syntax::                 General syntax explained.[8;1H* Prerequisite Types::          There are two types of prerequisites.[9;1H* Wildcards::                   Using wildcard characters such as `*'.[10;1H* Directory Search::            Searching other directories for source files.[11;1H* Phony Targets::               Using a target that is not a real file's name.[12;1H* Force Targets::               You can use a target without a recipe[K[13;1H                                  or prerequisites to mark other targets[K[14;1H                                  as phony.[K[15;1H* Empty Targets::               When only the date matters and the[K[16;1H                                  files are empty.[17;1H* Special Targets::             Targets with special built-in meanings.[18;1H* Multiple Targets::            When to make use of several targets in a rule.[19;1H* Multiple Rules::              How to use several rules with the same target.[20;1H* Static Pattern::              Static pattern rules apply to multiple targets[21;1H                                  and can vary the prerequisites according to[K[22;1H                                  the target name.[K[23;1H* Double-Colon::                How to use a special kind of rule to allow[K[61;1H[61;1H[1;1H* Secondary Expansion::         How and when secondary expansion is performed.[2;1H[K[3;1HWriting Rules[4;1H[K[5;1H* Rule Example::                An example explained.[6;1H* Rule Syntax::                 General syntax explained.[7;1H* Prerequisite Types::          There are two types of prerequisites.[8;1H* Wildcards::                   Using wildcard characters such as `*'.[9;1H* Directory Search::            Searching other directories for source files.[10;1H* Phony Targets::               Using a target that is not a real file's name.[11;1H* Force Targets::               You can use a target without a recipe[K[61;1H[61;1H[1;1H[K[2;1HWriting Rules[3;1H[K[4;1H* Rule Example::                An example explained.[5;1H* Rule Syntax::                 General syntax explained.[6;1H* Prerequisite Types::          There are two types of prerequisites.[7;1H* Wildcards::                   Using wildcard characters such as `*'.[8;1H* Directory Search::            Searching other directories for source files.[9;1H* Phony Targets::               Using a target that is not a real file's name.[10;1H* Force Targets::               You can use a target without a recipe[K[61;1H[61;1H[1;1HWriting Rules[2;1H[K[3;1H* Rule Example::                An example explained.[4;1H* Rule Syntax::                 General syntax explained.[5;1H* Prerequisite Types::          There are two types of prerequisites.[6;1H* Wildcards::                   Using wildcard characters such as `*'.[7;1H* Directory Search::            Searching other directories for source files.[8;1H* Phony Targets::               Using a target that is not a real file's name.[9;1H* Force Targets::               You can use a target without a recipe[K[10;1H                                  or prerequisites to mark other targets[11;1H                                  as phony.[K[12;1H* Empty Targets::               When only the date matters and the[K[13;1H                                  files are empty.[K[14;1H* Special Targets::             Targets with special built-in meanings.[15;1H* Multiple Targets::            When to make use of several targets in a rule.[16;1H* Multiple Rules::              How to use several rules with the same target.[17;1H* Static Pattern::              Static pattern rules apply to multiple targets[18;1H                                  and can vary the prerequisites according to[K[19;1H                                  the target name.[K[20;1H* Double-Colon::                How to use a special kind of rule to allow[K[21;1H                                  several independent rules for one target.[K[22;1H* Automatic Prerequisites::     How to automatically generate rules giving[23;1H                                  prerequisites from source files themselves.[24;1H[K[25;1HUsing Wildcard Characters in File Names[K[26;1H[K[27;1H* Wildcard Examples::           Several examples[K[28;1H* Wildcard Pitfall::            Problems to avoid.[K[29;1H* Wildcard Function::           How to cause wildcard expansion where[30;1H                                  it does not normally take place.[32;1HSearching Directories for Prerequisites[K[33;1H[K[34;1H* General Search::              Specifying a search path that applies[35;1H                                  to every prerequisite.[K[36;1H* Selective Search::            Specifying a search path[37;1H                                  for a specified class of names.[38;1H* Search Algorithm::            When and how search paths are applied.[39;1H* Recipes/Search::              How to write recipes that work together[40;1H                                  with search paths.[K[41;1H* Implicit/Search::             How search paths affect implicit rules.[42;1H* Libraries/Search::            Directory search for link libraries.[43;1H[K[44;1HStatic Pattern Rules[K[45;1H[K[46;1H* Static Usage::                The syntax of static pattern rules.[K[47;1H* Static versus Implicit::      When are they better than implicit rules?[49;1HWriting Recipes in Rules[51;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[52;1H* Echoing::                     How to control when recipes are echoed.[K[53;1H* Execution::                   How recipes are executed.[54;1H* Parallel::                    How recipes can be executed in parallel.[55;1H* Errors::                      What happens after a recipe execution error.[56;1H* Interrupts::                  What happens when a recipe is interrupted.[57;1H* Recursion::                   Invoking `make' from makefiles.[K[58;1H* Canned Recipes::              Defining canned recipes.[K[59;1H* Empty Recipes::               Defining useful, do-nothing recipes.[K[60;1H[K[61;1HRecipe Syntax[K[61;1H[1;1HWriting Rules[3;1H* Rule Example::                An example explained.[4;1H* Rule Syntax::                 General syntax explained.[5;1H* Prerequisite Types::          There are two types of prerequisites.[6;1H* Wildcards::                   Using wildcard characters such as `*'.[7;1H* Directory Search::            Searching other directories for source files.[8;1H* Phony Targets::               Using a target that is not a real file's name.[9;1H* Force Targets::               You can use a target without a recipe[10;1H                                  or prerequisites to mark other targets[11;1H                                  as phony.[12;1H* Empty Targets::               When only the date matters and the[13;1H                                  files are empty.[14;1H* Special Targets::             Targets with special built-in meanings.[15;1H* Multiple Targets::            When to make use of several targets in a rule.[16;1H* Multiple Rules::              How to use several rules with the same target.[17;1H* Static Pattern::              Static pattern rules apply to multiple targets[18;1H                                  and can vary the prerequisites according to[19;1H                                  the target name.[20;1H* Double-Colon::                How to use a special kind of rule to allow[21;1H                                  several independent rules for one target.[22;1H* Automatic Prerequisites::     How to automatically generate rules giving[23;1H                                  prerequisites from source files themselves.[25;1HUsing Wildcard Characters in File Names[27;1H* Wildcard Examples::           Several examples[28;1H* Wildcard Pitfall::            Problems to avoid.[29;1H* Wildcard Function::           How to cause wildcard expansion where[30;1H                                  it does not normally take place.[32;1HSearching Directories for Prerequisites[34;1H* General Search::              Specifying a search path that applies[35;1H                                  to every prerequisite.[36;1H* Selective Search::            Specifying a search path[37;1H                                  for a specified class of names.[38;1H* Search Algorithm::            When and how search paths are applied.[39;1H* Recipes/Search::              How to write recipes that work together[40;1H                                  with search paths.[41;1H* Implicit/Search::             How search paths affect implicit rules.[42;1H* Libraries/Search::            Directory search for link libraries.[44;1HStatic Pattern Rules[46;1H* Static Usage::                The syntax of static pattern rules.[47;1H* Static versus Implicit::      When are they better than implicit rules?[49;1HWriting Recipes in Rules[51;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[52;1H* Echoing::                     How to control when recipes are echoed.[53;1H* Execution::                   How recipes are executed.[54;1H* Parallel::                    How recipes can be executed in parallel.[55;1H* Errors::                      What happens after a recipe execution error.[56;1H* Interrupts::                  What happens when a recipe is interrupted.[57;1H* Recursion::                   Invoking `make' from makefiles.[58;1H* Canned Recipes::              Defining canned recipes.[59;1H* Empty Recipes::               Defining useful, do-nothing recipes.[61;1HRecipe Syntax[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --32%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H[K[2;1H* Rule Example::                An example explained.[3;1H* Rule Syntax::                 General syntax explained.[4;1H* Prerequisite Types::          There are two types of prerequisites.[5;1H* Wildcards::                   Using wildcard characters such as `*'.[6;1H* Directory Search::            Searching other directories for source files.[7;1H* Phony Targets::               Using a target that is not a real file's name.[8;1H* Force Targets::               You can use a target without a recipe[K[9;1H                                  or prerequisites to mark other targets[10;1H                                  as phony.[K[11;1H* Empty Targets::               When only the date matters and the[12;1H                                  files are empty.[K[13;1H* Special Targets::             Targets with special built-in meanings.[14;1H* Multiple Targets::            When to make use of several targets in a rule.[15;1H* Multiple Rules::              How to use several rules with the same target.[16;1H* Static Pattern::              Static pattern rules apply to multiple targets[61;1H[61;1H[1;1H* Rule Example::                An example explained.[2;1H* Rule Syntax::                 General syntax explained.[3;1H* Prerequisite Types::          There are two types of prerequisites.[4;1H* Wildcards::                   Using wildcard characters such as `*'.[5;1H* Directory Search::            Searching other directories for source files.[6;1H* Phony Targets::               Using a target that is not a real file's name.[7;1H* Force Targets::               You can use a target without a recipe[K[8;1H                                  or prerequisites to mark other targets[9;1H                                  as phony.[K[10;1H* Empty Targets::               When only the date matters and the[11;1H                                  files are empty.[K[12;1H* Special Targets::             Targets with special built-in meanings.[13;1H* Multiple Targets::            When to make use of several targets in a rule.[14;1H* Multiple Rules::              How to use several rules with the same target.[15;1H* Static Pattern::              Static pattern rules apply to multiple targets[16;1H                                  and can vary the prerequisites according to[K[17;1H                                  the target name.[K[18;1H* Double-Colon::                How to use a special kind of rule to allow[K[19;1H                                  several independent rules for one target.[20;1H* Automatic Prerequisites::     How to automatically generate rules giving[21;1H                                  prerequisites from source files themselves.[22;1H[K[23;1HUsing Wildcard Characters in File Names[K[25;1H* Wildcard Examples::           Several examples[26;1H* Wildcard Pitfall::            Problems to avoid.[27;1H* Wildcard Function::           How to cause wildcard expansion where[28;1H                                  it does not normally take place.[29;1H[K[30;1HSearching Directories for Prerequisites[K[32;1H* General Search::              Specifying a search path that applies[33;1H                                  to every prerequisite.[34;1H* Selective Search::            Specifying a search path[K[35;1H                                  for a specified class of names.[36;1H* Search Algorithm::            When and how search paths are applied.[37;1H* Recipes/Search::              How to write recipes that work together[38;1H                                  with search paths.[K[39;1H* Implicit/Search::             How search paths affect implicit rules.[40;1H* Libraries/Search::            Directory search for link libraries.[41;1H[K[42;1HStatic Pattern Rules[K[44;1H* Static Usage::                The syntax of static pattern rules.[45;1H* Static versus Implicit::      When are they better than implicit rules?[46;1H[K[47;1HWriting Recipes in Rules[K[49;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[50;1H* Echoing::                     How to control when recipes are echoed.[51;1H* Execution::                   How recipes are executed.[K[52;1H* Parallel::                    How recipes can be executed in parallel.[53;1H* Errors::                      What happens after a recipe execution error.[54;1H* Interrupts::                  What happens when a recipe is interrupted.[55;1H* Recursion::                   Invoking `make' from makefiles.[K[56;1H* Canned Recipes::              Defining canned recipes.[K[57;1H* Empty Recipes::               Defining useful, do-nothing recipes.[58;1H[K[59;1HRecipe Syntax[K[61;1H* Splitting Lines::             Breaking long recipe lines for readability.[61;1H[1;1H* Rule Example::                An example explained.[2;1H* Rule Syntax::                 General syntax explained.[3;1H* Prerequisite Types::          There are two types of prerequisites.[4;1H* Wildcards::                   Using wildcard characters such as `*'.[5;1H* Directory Search::            Searching other directories for source files.[6;1H* Phony Targets::               Using a target that is not a real file's name.[7;1H* Force Targets::               You can use a target without a recipe[8;1H                                  or prerequisites to mark other targets[9;1H                                  as phony.[10;1H* Empty Targets::               When only the date matters and the[11;1H                                  files are empty.[12;1H* Special Targets::             Targets with special built-in meanings.[13;1H* Multiple Targets::            When to make use of several targets in a rule.[14;1H* Multiple Rules::              How to use several rules with the same target.[15;1H* Static Pattern::              Static pattern rules apply to multiple targets[16;1H                                  and can vary the prerequisites according to[17;1H                                  the target name.[18;1H* Double-Colon::                How to use a special kind of rule to allow[19;1H                                  several independent rules for one target.[20;1H* Automatic Prerequisites::     How to automatically generate rules giving[21;1H                                  prerequisites from source files themselves.[23;1HUsing Wildcard Characters in File Names[25;1H* Wildcard Examples::           Several examples[26;1H* Wildcard Pitfall::            Problems to avoid.[27;1H* Wildcard Function::           How to cause wildcard expansion where[28;1H                                  it does not normally take place.[30;1HSearching Directories for Prerequisites[32;1H* General Search::              Specifying a search path that applies[33;1H                                  to every prerequisite.[34;1H* Selective Search::            Specifying a search path[35;1H                                  for a specified class of names.[36;1H* Search Algorithm::            When and how search paths are applied.[37;1H* Recipes/Search::              How to write recipes that work together[38;1H                                  with search paths.[39;1H* Implicit/Search::             How search paths affect implicit rules.[40;1H* Libraries/Search::            Directory search for link libraries.[42;1HStatic Pattern Rules[44;1H* Static Usage::                The syntax of static pattern rules.[45;1H* Static versus Implicit::      When are they better than implicit rules?[47;1HWriting Recipes in Rules[49;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[50;1H* Echoing::                     How to control when recipes are echoed.[51;1H* Execution::                   How recipes are executed.[52;1H* Parallel::                    How recipes can be executed in parallel.[53;1H* Errors::                      What happens after a recipe execution error.[54;1H* Interrupts::                  What happens when a recipe is interrupted.[55;1H* Recursion::                   Invoking `make' from makefiles.[56;1H* Canned Recipes::              Defining canned recipes.[61;1H[1;1H* Rule Syntax::                 General syntax explained.[2;1H* Prerequisite Types::          There are two types of prerequisites.[3;1H* Wildcards::                   Using wildcard characters such as `*'.[4;1H* Directory Search::            Searching other directories for source files.[5;1H* Phony Targets::               Using a target that is not a real file's name.[6;1H* Force Targets::               You can use a target without a recipe[K[7;1H                                  or prerequisites to mark other targets[8;1H                                  as phony.[K[9;1H* Empty Targets::               When only the date matters and the[10;1H                                  files are empty.[K[11;1H* Special Targets::             Targets with special built-in meanings.[12;1H* Multiple Targets::            When to make use of several targets in a rule.[13;1H* Multiple Rules::              How to use several rules with the same target.[61;1H[61;1H[1;1H* Prerequisite Types::          There are two types of prerequisites.[2;1H* Wildcards::                   Using wildcard characters such as `*'.[3;1H* Directory Search::            Searching other directories for source files.[4;1H* Phony Targets::               Using a target that is not a real file's name.[5;1H* Force Targets::               You can use a target without a recipe[K[6;1H                                  or prerequisites to mark other targets[7;1H                                  as phony.[K[8;1H* Empty Targets::               When only the date matters and the[9;1H                                  files are empty.[K[10;1H* Special Targets::             Targets with special built-in meanings.[11;1H* Multiple Targets::            When to make use of several targets in a rule.[12;1H* Multiple Rules::              How to use several rules with the same target.[13;1H* Static Pattern::              Static pattern rules apply to multiple targets[14;1H                                  and can vary the prerequisites according to[K[15;1H                                  the target name.[K[16;1H* Double-Colon::                How to use a special kind of rule to allow[K[17;1H                                  several independent rules for one target.[18;1H* Automatic Prerequisites::     How to automatically generate rules giving[19;1H                                  prerequisites from source files themselves.[20;1H[K[21;1HUsing Wildcard Characters in File Names[K[23;1H* Wildcard Examples::           Several examples[24;1H* Wildcard Pitfall::            Problems to avoid.[25;1H* Wildcard Function::           How to cause wildcard expansion where[26;1H                                  it does not normally take place.[27;1H[K[28;1HSearching Directories for Prerequisites[K[30;1H* General Search::              Specifying a search path that applies[31;1H                                  to every prerequisite.[32;1H* Selective Search::            Specifying a search path[K[33;1H                                  for a specified class of names.[34;1H* Search Algorithm::            When and how search paths are applied.[35;1H* Recipes/Search::              How to write recipes that work together[36;1H                                  with search paths.[K[37;1H* Implicit/Search::             How search paths affect implicit rules.[38;1H* Libraries/Search::            Directory search for link libraries.[39;1H[K[40;1HStatic Pattern Rules[K[42;1H* Static Usage::                The syntax of static pattern rules.[43;1H* Static versus Implicit::      When are they better than implicit rules?[44;1H[K[45;1HWriting Recipes in Rules[K[47;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[48;1H* Echoing::                     How to control when recipes are echoed.[49;1H* Execution::                   How recipes are executed.[K[50;1H* Parallel::                    How recipes can be executed in parallel.[51;1H* Errors::                      What happens after a recipe execution error.[52;1H* Interrupts::                  What happens when a recipe is interrupted.[53;1H* Recursion::                   Invoking `make' from makefiles.[K[54;1H* Canned Recipes::              Defining canned recipes.[K[55;1H* Empty Recipes::               Defining useful, do-nothing recipes.[56;1H[K[57;1HRecipe Syntax[K[59;1H* Splitting Lines::             Breaking long recipe lines for readability.[60;1H* Variables in Recipes::        Using `make' variables in recipes.[61;1H[K[61;1H[1;1H* Prerequisite Types::          There are two types of prerequisites.[2;1H* Wildcards::                   Using wildcard characters such as `*'.[3;1H* Directory Search::            Searching other directories for source files.[4;1H* Phony Targets::               Using a target that is not a real file's name.[5;1H* Force Targets::               You can use a target without a recipe[6;1H                                  or prerequisites to mark other targets[7;1H                                  as phony.[8;1H* Empty Targets::               When only the date matters and the[9;1H                                  files are empty.[10;1H* Special Targets::             Targets with special built-in meanings.[11;1H* Multiple Targets::            When to make use of several targets in a rule.[12;1H* Multiple Rules::              How to use several rules with the same target.[13;1H* Static Pattern::              Static pattern rules apply to multiple targets[14;1H                                  and can vary the prerequisites according to[15;1H                                  the target name.[16;1H* Double-Colon::                How to use a special kind of rule to allow[17;1H                                  several independent rules for one target.[18;1H* Automatic Prerequisites::     How to automatically generate rules giving[19;1H                                  prerequisites from source files themselves.[21;1HUsing Wildcard Characters in File Names[23;1H* Wildcard Examples::           Several examples[24;1H* Wildcard Pitfall::            Problems to avoid.[25;1H* Wildcard Function::           How to cause wildcard expansion where[26;1H                                  it does not normally take place.[28;1HSearching Directories for Prerequisites[30;1H* General Search::              Specifying a search path that applies[31;1H                                  to every prerequisite.[32;1H* Selective Search::            Specifying a search path[33;1H                                  for a specified class of names.[34;1H* Search Algorithm::            When and how search paths are applied.[35;1H* Recipes/Search::              How to write recipes that work together[36;1H                                  with search paths.[37;1H* Implicit/Search::             How search paths affect implicit rules.[38;1H* Libraries/Search::            Directory search for link libraries.[40;1HStatic Pattern Rules[42;1H* Static Usage::                The syntax of static pattern rules.[43;1H* Static versus Implicit::      When are they better than implicit rules?[45;1HWriting Recipes in Rules[47;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[48;1H* Echoing::                     How to control when recipes are echoed.[49;1H* Execution::                   How recipes are executed.[50;1H* Parallel::                    How recipes can be executed in parallel.[51;1H* Errors::                      What happens after a recipe execution error.[52;1H* Interrupts::                  What happens when a recipe is interrupted.[53;1H* Recursion::                   Invoking `make' from makefiles.[54;1H* Canned Recipes::              Defining canned recipes.[55;1H* Empty Recipes::               Defining useful, do-nothing recipes.[57;1HRecipe Syntax[59;1H* Splitting Lines::             Breaking long recipe lines for readability.[60;1H* Variables in Recipes::        Using `make' variables in recipes.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --33%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* Wildcards::                   Using wildcard characters such as `*'.[2;1H* Directory Search::            Searching other directories for source files.[3;1H* Phony Targets::               Using a target that is not a real file's name.[4;1H* Force Targets::               You can use a target without a recipe[K[5;1H                                  or prerequisites to mark other targets[6;1H                                  as phony.[K[7;1H* Empty Targets::               When only the date matters and the[8;1H                                  files are empty.[K[9;1H* Special Targets::             Targets with special built-in meanings.[10;1H* Multiple Targets::            When to make use of several targets in a rule.[11;1H* Multiple Rules::              How to use several rules with the same target.[12;1H* Static Pattern::              Static pattern rules apply to multiple targets[13;1H                                  and can vary the prerequisites according to[K[14;1H                                  the target name.[K[15;1H* Double-Colon::                How to use a special kind of rule to allow[16;1H                                  several independent rules for one target.[61;1H[61;1H[1;1H* Directory Search::            Searching other directories for source files.[2;1H* Phony Targets::               Using a target that is not a real file's name.[3;1H* Force Targets::               You can use a target without a recipe[K[4;1H                                  or prerequisites to mark other targets[5;1H                                  as phony.[K[6;1H* Empty Targets::               When only the date matters and the[7;1H                                  files are empty.[K[8;1H* Special Targets::             Targets with special built-in meanings.[9;1H* Multiple Targets::            When to make use of several targets in a rule.[10;1H* Multiple Rules::              How to use several rules with the same target.[11;1H* Static Pattern::              Static pattern rules apply to multiple targets[12;1H                                  and can vary the prerequisites according to[K[13;1H                                  the target name.[K[14;1H* Double-Colon::                How to use a special kind of rule to allow[15;1H                                  several independent rules for one target.[16;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[17;1H                                  prerequisites from source files themselves.[18;1H[K[19;1HUsing Wildcard Characters in File Names[K[21;1H* Wildcard Examples::           Several examples[22;1H* Wildcard Pitfall::            Problems to avoid.[23;1H* Wildcard Function::           How to cause wildcard expansion where[24;1H                                  it does not normally take place.[25;1H[K[26;1HSearching Directories for Prerequisites[K[28;1H* General Search::              Specifying a search path that applies[29;1H                                  to every prerequisite.[30;1H* Selective Search::            Specifying a search path[K[31;1H                                  for a specified class of names.[32;1H* Search Algorithm::            When and how search paths are applied.[33;1H* Recipes/Search::              How to write recipes that work together[34;1H                                  with search paths.[K[35;1H* Implicit/Search::             How search paths affect implicit rules.[36;1H* Libraries/Search::            Directory search for link libraries.[37;1H[K[38;1HStatic Pattern Rules[K[40;1H* Static Usage::                The syntax of static pattern rules.[61;1H[61;1H[1;1H* Phony Targets::               Using a target that is not a real file's name.[2;1H* Force Targets::               You can use a target without a recipe[K[3;1H                                  or prerequisites to mark other targets[4;1H                                  as phony.[K[5;1H* Empty Targets::               When only the date matters and the[6;1H                                  files are empty.[K[7;1H* Special Targets::             Targets with special built-in meanings.[8;1H* Multiple Targets::            When to make use of several targets in a rule.[9;1H* Multiple Rules::              How to use several rules with the same target.[10;1H* Static Pattern::              Static pattern rules apply to multiple targets[11;1H                                  and can vary the prerequisites according to[K[12;1H                                  the target name.[K[13;1H* Double-Colon::                How to use a special kind of rule to allow[14;1H                                  several independent rules for one target.[15;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[16;1H                                  prerequisites from source files themselves.[17;1H[K[18;1HUsing Wildcard Characters in File Names[19;1H[K[20;1H* Wildcard Examples::           Several examples[21;1H* Wildcard Pitfall::            Problems to avoid.[22;1H* Wildcard Function::           How to cause wildcard expansion where[23;1H                                  it does not normally take place.[K[24;1H[K[25;1HSearching Directories for Prerequisites[26;1H[K[27;1H* General Search::              Specifying a search path that applies[28;1H                                  to every prerequisite.[K[29;1H* Selective Search::            Specifying a search path[30;1H                                  for a specified class of names.[31;1H* Search Algorithm::            When and how search paths are applied.[32;1H* Recipes/Search::              How to write recipes that work together[33;1H                                  with search paths.[K[34;1H* Implicit/Search::             How search paths affect implicit rules.[35;1H* Libraries/Search::            Directory search for link libraries.[K[36;1H[K[37;1HStatic Pattern Rules[38;1H[K[39;1H* Static Usage::                The syntax of static pattern rules.[40;1H* Static versus Implicit::      When are they better than implicit rules?[42;1HWriting Recipes in Rules[K[43;1H[K[44;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[45;1H* Echoing::                     How to control when recipes are echoed.[46;1H* Execution::                   How recipes are executed.[47;1H* Parallel::                    How recipes can be executed in parallel.[48;1H* Errors::                      What happens after a recipe execution error.[49;1H* Interrupts::                  What happens when a recipe is interrupted.[50;1H* Recursion::                   Invoking `make' from makefiles.[K[51;1H* Canned Recipes::              Defining canned recipes.[K[52;1H* Empty Recipes::               Defining useful, do-nothing recipes.[K[53;1H[K[54;1HRecipe Syntax[K[55;1H[K[56;1H* Splitting Lines::             Breaking long recipe lines for readability.[57;1H* Variables in Recipes::        Using `make' variables in recipes.[59;1HRecipe Execution[K[60;1H[K[61;1H* Choosing the Shell::          How `make' chooses the shell used[61;1H[1;1H* Phony Targets::               Using a target that is not a real file's name.[2;1H* Force Targets::               You can use a target without a recipe[3;1H                                  or prerequisites to mark other targets[4;1H                                  as phony.[5;1H* Empty Targets::               When only the date matters and the[6;1H                                  files are empty.[7;1H* Special Targets::             Targets with special built-in meanings.[8;1H* Multiple Targets::            When to make use of several targets in a rule.[9;1H* Multiple Rules::              How to use several rules with the same target.[10;1H* Static Pattern::              Static pattern rules apply to multiple targets[11;1H                                  and can vary the prerequisites according to[12;1H                                  the target name.[13;1H* Double-Colon::                How to use a special kind of rule to allow[14;1H                                  several independent rules for one target.[15;1H* Automatic Prerequisites::     How to automatically generate rules giving[16;1H                                  prerequisites from source files themselves.[18;1HUsing Wildcard Characters in File Names[20;1H* Wildcard Examples::           Several examples[21;1H* Wildcard Pitfall::            Problems to avoid.[22;1H* Wildcard Function::           How to cause wildcard expansion where[23;1H                                  it does not normally take place.[25;1HSearching Directories for Prerequisites[27;1H* General Search::              Specifying a search path that applies[28;1H                                  to every prerequisite.[29;1H* Selective Search::            Specifying a search path[30;1H                                  for a specified class of names.[31;1H* Search Algorithm::            When and how search paths are applied.[32;1H* Recipes/Search::              How to write recipes that work together[33;1H                                  with search paths.[34;1H* Implicit/Search::             How search paths affect implicit rules.[35;1H* Libraries/Search::            Directory search for link libraries.[37;1HStatic Pattern Rules[39;1H* Static Usage::                The syntax of static pattern rules.[40;1H* Static versus Implicit::      When are they better than implicit rules?[42;1HWriting Recipes in Rules[44;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[45;1H* Echoing::                     How to control when recipes are echoed.[46;1H* Execution::                   How recipes are executed.[47;1H* Parallel::                    How recipes can be executed in parallel.[48;1H* Errors::                      What happens after a recipe execution error.[49;1H* Interrupts::                  What happens when a recipe is interrupted.[50;1H* Recursion::                   Invoking `make' from makefiles.[51;1H* Canned Recipes::              Defining canned recipes.[52;1H* Empty Recipes::               Defining useful, do-nothing recipes.[54;1HRecipe Syntax[56;1H* Splitting Lines::             Breaking long recipe lines for readability.[57;1H* Variables in Recipes::        Using `make' variables in recipes.[59;1HRecipe Execution[61;1H* Choosing the Shell::          How `make' chooses the shell used[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --34%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* Force Targets::               You can use a target without a recipe[K[2;1H                                  or prerequisites to mark other targets[3;1H                                  as phony.[K[4;1H* Empty Targets::               When only the date matters and the[5;1H                                  files are empty.[K[6;1H* Special Targets::             Targets with special built-in meanings.[7;1H* Multiple Targets::            When to make use of several targets in a rule.[8;1H* Multiple Rules::              How to use several rules with the same target.[9;1H* Static Pattern::              Static pattern rules apply to multiple targets[10;1H                                  and can vary the prerequisites according to[K[11;1H                                  the target name.[K[12;1H* Double-Colon::                How to use a special kind of rule to allow[13;1H                                  several independent rules for one target.[61;1H[61;1H[1;1H                                  or prerequisites to mark other targets[61;1H[61;1H[1;1H                                  as phony.[K[2;1H* Empty Targets::               When only the date matters and the[K[3;1H                                  files are empty.[4;1H* Special Targets::             Targets with special built-in meanings.[5;1H* Multiple Targets::            When to make use of several targets in a rule.[6;1H* Multiple Rules::              How to use several rules with the same target.[7;1H* Static Pattern::              Static pattern rules apply to multiple targets[8;1H                                  and can vary the prerequisites according to[K[61;1H[61;1H[1;1H* Empty Targets::               When only the date matters and the[61;1H[61;1H[1;1H                                  files are empty.[K[61;1H[61;1H[1;1H* Special Targets::             Targets with special built-in meanings.[61;1H[61;1H[1;1H* Multiple Targets::            When to make use of several targets in a rule.[2;1H* Multiple Rules::              How to use several rules with the same target.[3;1H* Static Pattern::              Static pattern rules apply to multiple targets[61;1H[61;1H[1;1H* Multiple Rules::              How to use several rules with the same target.[2;1H* Static Pattern::              Static pattern rules apply to multiple targets[3;1H                                  and can vary the prerequisites according to[K[4;1H                                  the target name.[K[5;1H* Double-Colon::                How to use a special kind of rule to allow[K[6;1H                                  several independent rules for one target.[K[7;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[8;1H                                  prerequisites from source files themselves.[9;1H[K[10;1HUsing Wildcard Characters in File Names[K[11;1H[K[12;1H* Wildcard Examples::           Several examples[K[13;1H* Wildcard Pitfall::            Problems to avoid.[K[14;1H* Wildcard Function::           How to cause wildcard expansion where[K[15;1H                                  it does not normally take place.[K[16;1H[K[17;1HSearching Directories for Prerequisites[18;1H[K[19;1H* General Search::              Specifying a search path that applies[20;1H                                  to every prerequisite.[21;1H* Selective Search::            Specifying a search path[22;1H                                  for a specified class of names.[K[23;1H* Search Algorithm::            When and how search paths are applied.[24;1H* Recipes/Search::              How to write recipes that work together[25;1H                                  with search paths.[26;1H* Implicit/Search::             How search paths affect implicit rules.[27;1H* Libraries/Search::            Directory search for link libraries.[K[28;1H[K[29;1HStatic Pattern Rules[K[30;1H[K[61;1H[61;1H[1;1H* Static Pattern::              Static pattern rules apply to multiple targets[61;1H[61;1H[1;1H                                  and can vary the prerequisites according to[K[2;1H                                  the target name.[K[3;1H* Double-Colon::                How to use a special kind of rule to allow[K[4;1H                                  several independent rules for one target.[5;1H* Automatic Prerequisites::     How to automatically generate rules giving[6;1H                                  prerequisites from source files themselves.[7;1H[K[8;1HUsing Wildcard Characters in File Names[K[10;1H* Wildcard Examples::           Several examples[11;1H* Wildcard Pitfall::            Problems to avoid.[12;1H* Wildcard Function::           How to cause wildcard expansion where[13;1H                                  it does not normally take place.[14;1H[K[15;1HSearching Directories for Prerequisites[K[17;1H* General Search::              Specifying a search path that applies[18;1H                                  to every prerequisite.[19;1H* Selective Search::            Specifying a search path[K[20;1H                                  for a specified class of names.[21;1H* Search Algorithm::            When and how search paths are applied.[22;1H* Recipes/Search::              How to write recipes that work together[23;1H                                  with search paths.[K[24;1H* Implicit/Search::             How search paths affect implicit rules.[25;1H* Libraries/Search::            Directory search for link libraries.[26;1H[K[27;1HStatic Pattern Rules[K[29;1H* Static Usage::                The syntax of static pattern rules.[30;1H* Static versus Implicit::      When are they better than implicit rules?[31;1H[K[32;1HWriting Recipes in Rules[K[33;1H[K[34;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[K[35;1H* Echoing::                     How to control when recipes are echoed.[36;1H* Execution::                   How recipes are executed.[37;1H* Parallel::                    How recipes can be executed in parallel.[38;1H* Errors::                      What happens after a recipe execution error.[39;1H* Interrupts::                  What happens when a recipe is interrupted.[40;1H* Recursion::                   Invoking `make' from makefiles.[K[41;1H* Canned Recipes::              Defining canned recipes.[42;1H* Empty Recipes::               Defining useful, do-nothing recipes.[44;1HRecipe Syntax[K[45;1H[K[46;1H* Splitting Lines::             Breaking long recipe lines for readability.[47;1H* Variables in Recipes::        Using `make' variables in recipes.[K[48;1H[K[49;1HRecipe Execution[K[50;1H[K[51;1H* Choosing the Shell::          How `make' chooses the shell used[52;1H                                  to run recipes.[K[54;1HRecursive Use of `make'[56;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[K[57;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[58;1H* Options/Recursion::           How to communicate options to a sub-`make'.[59;1H* -w Option::                   How the `-w' or `--print-directory' option[60;1H                                  helps debug use of recursive `make' commands.[61;1H[K[61;1H[1;1H                                  and can vary the prerequisites according to[2;1H                                  the target name.[3;1H* Double-Colon::                How to use a special kind of rule to allow[4;1H                                  several independent rules for one target.[5;1H* Automatic Prerequisites::     How to automatically generate rules giving[6;1H                                  prerequisites from source files themselves.[8;1HUsing Wildcard Characters in File Names[10;1H* Wildcard Examples::           Several examples[11;1H* Wildcard Pitfall::            Problems to avoid.[12;1H* Wildcard Function::           How to cause wildcard expansion where[13;1H                                  it does not normally take place.[15;1HSearching Directories for Prerequisites[17;1H* General Search::              Specifying a search path that applies[18;1H                                  to every prerequisite.[19;1H* Selective Search::            Specifying a search path[20;1H                                  for a specified class of names.[21;1H* Search Algorithm::            When and how search paths are applied.[22;1H* Recipes/Search::              How to write recipes that work together[23;1H                                  with search paths.[24;1H* Implicit/Search::             How search paths affect implicit rules.[25;1H* Libraries/Search::            Directory search for link libraries.[27;1HStatic Pattern Rules[29;1H* Static Usage::                The syntax of static pattern rules.[30;1H* Static versus Implicit::      When are they better than implicit rules?[32;1HWriting Recipes in Rules[34;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[35;1H* Echoing::                     How to control when recipes are echoed.[36;1H* Execution::                   How recipes are executed.[37;1H* Parallel::                    How recipes can be executed in parallel.[38;1H* Errors::                      What happens after a recipe execution error.[39;1H* Interrupts::                  What happens when a recipe is interrupted.[40;1H* Recursion::                   Invoking `make' from makefiles.[41;1H* Canned Recipes::              Defining canned recipes.[42;1H* Empty Recipes::               Defining useful, do-nothing recipes.[44;1HRecipe Syntax[46;1H* Splitting Lines::             Breaking long recipe lines for readability.[47;1H* Variables in Recipes::        Using `make' variables in recipes.[49;1HRecipe Execution[51;1H* Choosing the Shell::          How `make' chooses the shell used[52;1H                                  to run recipes.[54;1HRecursive Use of `make'[56;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[57;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[58;1H* Options/Recursion::           How to communicate options to a sub-`make'.[59;1H* -w Option::                   How the `-w' or `--print-directory' option[60;1H                                  helps debug use of recursive `make' commands.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --38%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H                                  the target name.[K[2;1H* Double-Colon::                How to use a special kind of rule to allow[3;1H                                  several independent rules for one target.[4;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[5;1H                                  prerequisites from source files themselves.[6;1H[K[7;1HUsing Wildcard Characters in File Names[8;1H[K[9;1H* Wildcard Examples::           Several examples[10;1H* Wildcard Pitfall::            Problems to avoid.[11;1H* Wildcard Function::           How to cause wildcard expansion where[12;1H                                  it does not normally take place.[K[61;1H[61;1H[1;1H* Double-Colon::                How to use a special kind of rule to allow[2;1H                                  several independent rules for one target.[3;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[4;1H                                  prerequisites from source files themselves.[5;1H[K[6;1HUsing Wildcard Characters in File Names[7;1H[K[8;1H* Wildcard Examples::           Several examples[9;1H* Wildcard Pitfall::            Problems to avoid.[10;1H* Wildcard Function::           How to cause wildcard expansion where[11;1H                                  it does not normally take place.[K[12;1H[K[13;1HSearching Directories for Prerequisites[K[15;1H* General Search::              Specifying a search path that applies[16;1H                                  to every prerequisite.[17;1H* Selective Search::            Specifying a search path[K[18;1H                                  for a specified class of names.[19;1H* Search Algorithm::            When and how search paths are applied.[20;1H* Recipes/Search::              How to write recipes that work together[21;1H                                  with search paths.[K[22;1H* Implicit/Search::             How search paths affect implicit rules.[23;1H* Libraries/Search::            Directory search for link libraries.[24;1H[K[25;1HStatic Pattern Rules[K[27;1H* Static Usage::                The syntax of static pattern rules.[28;1H* Static versus Implicit::      When are they better than implicit rules?[29;1H[K[30;1HWriting Recipes in Rules[K[32;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[33;1H* Echoing::                     How to control when recipes are echoed.[34;1H* Execution::                   How recipes are executed.[K[35;1H* Parallel::                    How recipes can be executed in parallel.[36;1H* Errors::                      What happens after a recipe execution error.[37;1H* Interrupts::                  What happens when a recipe is interrupted.[38;1H* Recursion::                   Invoking `make' from makefiles.[K[39;1H* Canned Recipes::              Defining canned recipes.[K[40;1H* Empty Recipes::               Defining useful, do-nothing recipes.[41;1H[K[42;1HRecipe Syntax[K[44;1H* Splitting Lines::             Breaking long recipe lines for readability.[45;1H* Variables in Recipes::        Using `make' variables in recipes.[46;1H[K[47;1HRecipe Execution[K[49;1H* Choosing the Shell::          How `make' chooses the shell used[50;1H                                  to run recipes.[51;1H[K[52;1HRecursive Use of `make'[K[54;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[61;1H[61;1H[1;1H                                  several independent rules for one target.[2;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[3;1H                                  prerequisites from source files themselves.[4;1H[K[5;1HUsing Wildcard Characters in File Names[6;1H[K[7;1H* Wildcard Examples::           Several examples[8;1H* Wildcard Pitfall::            Problems to avoid.[9;1H* Wildcard Function::           How to cause wildcard expansion where[10;1H                                  it does not normally take place.[K[11;1H[K[12;1HSearching Directories for Prerequisites[13;1H[K[61;1H[61;1H[1;1H* Automatic Prerequisites::     How to automatically generate rules giving[K[2;1H                                  prerequisites from source files themselves.[3;1H[K[4;1HUsing Wildcard Characters in File Names[5;1H[K[6;1H* Wildcard Examples::           Several examples[7;1H* Wildcard Pitfall::            Problems to avoid.[8;1H* Wildcard Function::           How to cause wildcard expansion where[9;1H                                  it does not normally take place.[K[10;1H[K[11;1HSearching Directories for Prerequisites[12;1H[K[13;1H* General Search::              Specifying a search path that applies[14;1H                                  to every prerequisite.[15;1H* Selective Search::            Specifying a search path[K[16;1H                                  for a specified class of names.[17;1H* Search Algorithm::            When and how search paths are applied.[18;1H* Recipes/Search::              How to write recipes that work together[19;1H                                  with search paths.[K[20;1H* Implicit/Search::             How search paths affect implicit rules.[21;1H* Libraries/Search::            Directory search for link libraries.[22;1H[K[23;1HStatic Pattern Rules[K[25;1H* Static Usage::                The syntax of static pattern rules.[26;1H* Static versus Implicit::      When are they better than implicit rules?[27;1H[K[28;1HWriting Recipes in Rules[K[30;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[31;1H* Echoing::                     How to control when recipes are echoed.[32;1H* Execution::                   How recipes are executed.[K[33;1H* Parallel::                    How recipes can be executed in parallel.[34;1H* Errors::                      What happens after a recipe execution error.[35;1H* Interrupts::                  What happens when a recipe is interrupted.[36;1H* Recursion::                   Invoking `make' from makefiles.[K[37;1H* Canned Recipes::              Defining canned recipes.[K[38;1H* Empty Recipes::               Defining useful, do-nothing recipes.[39;1H[K[40;1HRecipe Syntax[K[42;1H* Splitting Lines::             Breaking long recipe lines for readability.[43;1H* Variables in Recipes::        Using `make' variables in recipes.[44;1H[K[45;1HRecipe Execution[K[47;1H* Choosing the Shell::          How `make' chooses the shell used[48;1H                                  to run recipes.[49;1H[K[50;1HRecursive Use of `make'[K[52;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[53;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[54;1H* Options/Recursion::           How to communicate options to a sub-`make'.[55;1H* -w Option::                   How the `-w' or `--print-directory' option[56;1H                                  helps debug use of recursive `make' commands.[57;1H[K[58;1HHow to Use Variables[K[59;1H[K[60;1H* Reference::                   How to use the value of a variable.[K[61;1H* Flavors::                     Variables come in two flavors.[61;1H[1;1H* Automatic Prerequisites::     How to automatically generate rules giving[2;1H                                  prerequisites from source files themselves.[4;1HUsing Wildcard Characters in File Names[6;1H* Wildcard Examples::           Several examples[7;1H* Wildcard Pitfall::            Problems to avoid.[8;1H* Wildcard Function::           How to cause wildcard expansion where[9;1H                                  it does not normally take place.[11;1HSearching Directories for Prerequisites[13;1H* General Search::              Specifying a search path that applies[14;1H                                  to every prerequisite.[15;1H* Selective Search::            Specifying a search path[16;1H                                  for a specified class of names.[17;1H* Search Algorithm::            When and how search paths are applied.[18;1H* Recipes/Search::              How to write recipes that work together[19;1H                                  with search paths.[20;1H* Implicit/Search::             How search paths affect implicit rules.[21;1H* Libraries/Search::            Directory search for link libraries.[23;1HStatic Pattern Rules[25;1H* Static Usage::                The syntax of static pattern rules.[26;1H* Static versus Implicit::      When are they better than implicit rules?[61;1H[1;1H                                  prerequisites from source files themselves.[61;1H[61;1H[1;1H[K[2;1HUsing Wildcard Characters in File Names[K[4;1H* Wildcard Examples::           Several examples[5;1H* Wildcard Pitfall::            Problems to avoid.[6;1H* Wildcard Function::           How to cause wildcard expansion where[7;1H                                  it does not normally take place.[8;1H[K[9;1HSearching Directories for Prerequisites[K[11;1H* General Search::              Specifying a search path that applies[12;1H                                  to every prerequisite.[13;1H* Selective Search::            Specifying a search path[K[14;1H                                  for a specified class of names.[15;1H* Search Algorithm::            When and how search paths are applied.[16;1H* Recipes/Search::              How to write recipes that work together[17;1H                                  with search paths.[K[18;1H* Implicit/Search::             How search paths affect implicit rules.[19;1H* Libraries/Search::            Directory search for link libraries.[20;1H[K[21;1HStatic Pattern Rules[K[23;1H* Static Usage::                The syntax of static pattern rules.[24;1H* Static versus Implicit::      When are they better than implicit rules?[25;1H[K[26;1HWriting Recipes in Rules[K[28;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[29;1H* Echoing::                     How to control when recipes are echoed.[30;1H* Execution::                   How recipes are executed.[K[31;1H* Parallel::                    How recipes can be executed in parallel.[32;1H* Errors::                      What happens after a recipe execution error.[33;1H* Interrupts::                  What happens when a recipe is interrupted.[34;1H* Recursion::                   Invoking `make' from makefiles.[K[35;1H* Canned Recipes::              Defining canned recipes.[K[36;1H* Empty Recipes::               Defining useful, do-nothing recipes.[37;1H[K[38;1HRecipe Syntax[K[40;1H* Splitting Lines::             Breaking long recipe lines for readability.[41;1H* Variables in Recipes::        Using `make' variables in recipes.[42;1H[K[43;1HRecipe Execution[K[45;1H* Choosing the Shell::          How `make' chooses the shell used[46;1H                                  to run recipes.[47;1H[K[48;1HRecursive Use of `make'[K[50;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[51;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[52;1H* Options/Recursion::           How to communicate options to a sub-`make'.[53;1H* -w Option::                   How the `-w' or `--print-directory' option[K[54;1H                                  helps debug use of recursive `make' commands.[55;1H[K[56;1HHow to Use Variables[K[58;1H* Reference::                   How to use the value of a variable.[59;1H* Flavors::                     Variables come in two flavors.[60;1H* Advanced::                    Advanced features for referencing a variable.[61;1H* Values::                      All the ways variables get their values.[61;1H[2;1HUsing Wildcard Characters in File Names[4;1H* Wildcard Examples::           Several examples[5;1H* Wildcard Pitfall::            Problems to avoid.[6;1H* Wildcard Function::           How to cause wildcard expansion where[7;1H                                  it does not normally take place.[9;1HSearching Directories for Prerequisites[11;1H* General Search::              Specifying a search path that applies[12;1H                                  to every prerequisite.[13;1H* Selective Search::            Specifying a search path[14;1H                                  for a specified class of names.[15;1H* Search Algorithm::            When and how search paths are applied.[16;1H* Recipes/Search::              How to write recipes that work together[17;1H                                  with search paths.[18;1H* Implicit/Search::             How search paths affect implicit rules.[19;1H* Libraries/Search::            Directory search for link libraries.[21;1HStatic Pattern Rules[23;1H* Static Usage::                The syntax of static pattern rules.[24;1H* Static versus Implicit::      When are they better than implicit rules?[26;1HWriting Recipes in Rules[28;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[29;1H* Echoing::                     How to control when recipes are echoed.[30;1H* Execution::                   How recipes are executed.[31;1H* Parallel::                    How recipes can be executed in parallel.[32;1H* Errors::                      What happens after a recipe execution error.[33;1H* Interrupts::                  What happens when a recipe is interrupted.[34;1H* Recursion::                   Invoking `make' from makefiles.[35;1H* Canned Recipes::              Defining canned recipes.[36;1H* Empty Recipes::               Defining useful, do-nothing recipes.[38;1HRecipe Syntax[40;1H* Splitting Lines::             Breaking long recipe lines for readability.[41;1H* Variables in Recipes::        Using `make' variables in recipes.[43;1HRecipe Execution[45;1H* Choosing the Shell::          How `make' chooses the shell used[46;1H                                  to run recipes.[48;1HRecursive Use of `make'[50;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[51;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[52;1H* Options/Recursion::           How to communicate options to a sub-`make'.[53;1H* -w Option::                   How the `-w' or `--print-directory' option[54;1H                                  helps debug use of recursive `make' commands.[56;1HHow to Use Variables[58;1H* Reference::                   How to use the value of a variable.[59;1H* Flavors::                     Variables come in two flavors.[60;1H* Advanced::                    Advanced features for referencing a variable.[61;1H* Values::                      All the ways variables get their values.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --40%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1HUsing Wildcard Characters in File Names[2;1H[K[3;1H* Wildcard Examples::           Several examples[4;1H* Wildcard Pitfall::            Problems to avoid.[5;1H* Wildcard Function::           How to cause wildcard expansion where[6;1H                                  it does not normally take place.[K[7;1H[K[8;1HSearching Directories for Prerequisites[9;1H[K[10;1H* General Search::              Specifying a search path that applies[11;1H                                  to every prerequisite.[K[12;1H* Selective Search::            Specifying a search path[13;1H                                  for a specified class of names.[14;1H* Search Algorithm::            When and how search paths are applied.[15;1H* Recipes/Search::              How to write recipes that work together[16;1H                                  with search paths.[K[17;1H* Implicit/Search::             How search paths affect implicit rules.[18;1H* Libraries/Search::            Directory search for link libraries.[K[19;1H[K[20;1HStatic Pattern Rules[21;1H[K[22;1H* Static Usage::                The syntax of static pattern rules.[23;1H* Static versus Implicit::      When are they better than implicit rules?[24;1H[K[25;1HWriting Recipes in Rules[26;1H[K[27;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[28;1H* Echoing::                     How to control when recipes are echoed.[29;1H* Execution::                   How recipes are executed.[K[30;1H* Parallel::                    How recipes can be executed in parallel.[31;1H* Errors::                      What happens after a recipe execution error.[32;1H* Interrupts::                  What happens when a recipe is interrupted.[K[33;1H* Recursion::                   Invoking `make' from makefiles.[K[34;1H* Canned Recipes::              Defining canned recipes.[K[35;1H* Empty Recipes::               Defining useful, do-nothing recipes.[36;1H[K[37;1HRecipe Syntax[38;1H[K[39;1H* Splitting Lines::             Breaking long recipe lines for readability.[40;1H* Variables in Recipes::        Using `make' variables in recipes.[K[41;1H[K[42;1HRecipe Execution[43;1H[K[44;1H* Choosing the Shell::          How `make' chooses the shell used[45;1H                                  to run recipes.[K[46;1H[K[47;1HRecursive Use of `make'[48;1H[K[49;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[50;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[51;1H* Options/Recursion::           How to communicate options to a sub-`make'.[K[52;1H* -w Option::                   How the `-w' or `--print-directory' option[K[53;1H                                  helps debug use of recursive `make' commands.[54;1H[K[55;1HHow to Use Variables[56;1H[K[57;1H* Reference::                   How to use the value of a variable.[58;1H* Flavors::                     Variables come in two flavors.[K[59;1H* Advanced::                    Advanced features for referencing a variable.[60;1H* Values::                      All the ways variables get their values.[K[61;1H* Setting::                     How to set a variable in the makefile.[K[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --41%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[61;1H[1;1H[K[2;1H* Wildcard Examples::           Several examples[3;1H* Wildcard Pitfall::            Problems to avoid.[4;1H* Wildcard Function::           How to cause wildcard expansion where[5;1H                                  it does not normally take place.[K[6;1H[K[7;1HSearching Directories for Prerequisites[8;1H[K[61;1H[61;1H[1;1H* Wildcard Examples::           Several examples[2;1H* Wildcard Pitfall::            Problems to avoid.[3;1H* Wildcard Function::           How to cause wildcard expansion where[4;1H                                  it does not normally take place.[K[5;1H[K[6;1HSearching Directories for Prerequisites[7;1H[K[8;1H* General Search::              Specifying a search path that applies[9;1H                                  to every prerequisite.[10;1H* Selective Search::            Specifying a search path[K[11;1H                                  for a specified class of names.[12;1H* Search Algorithm::            When and how search paths are applied.[13;1H* Recipes/Search::              How to write recipes that work together[14;1H                                  with search paths.[K[15;1H* Implicit/Search::             How search paths affect implicit rules.[16;1H* Libraries/Search::            Directory search for link libraries.[17;1H[K[18;1HStatic Pattern Rules[K[20;1H* Static Usage::                The syntax of static pattern rules.[21;1H* Static versus Implicit::      When are they better than implicit rules?[22;1H[K[23;1HWriting Recipes in Rules[K[25;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[26;1H* Echoing::                     How to control when recipes are echoed.[27;1H* Execution::                   How recipes are executed.[K[28;1H* Parallel::                    How recipes can be executed in parallel.[29;1H* Errors::                      What happens after a recipe execution error.[30;1H* Interrupts::                  What happens when a recipe is interrupted.[31;1H* Recursion::                   Invoking `make' from makefiles.[K[32;1H* Canned Recipes::              Defining canned recipes.[K[33;1H* Empty Recipes::               Defining useful, do-nothing recipes.[34;1H[K[35;1HRecipe Syntax[K[37;1H* Splitting Lines::             Breaking long recipe lines for readability.[38;1H* Variables in Recipes::        Using `make' variables in recipes.[39;1H[K[40;1HRecipe Execution[K[42;1H* Choosing the Shell::          How `make' chooses the shell used[43;1H                                  to run recipes.[44;1H[K[45;1HRecursive Use of `make'[K[47;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[48;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[49;1H* Options/Recursion::           How to communicate options to a sub-`make'.[50;1H* -w Option::                   How the `-w' or `--print-directory' option[K[51;1H                                  helps debug use of recursive `make' commands.[61;1H[61;1H[1;1H* Wildcard Pitfall::            Problems to avoid.[61;1H[61;1H[1;1H* Wildcard Function::           How to cause wildcard expansion where[2;1H                                  it does not normally take place.[3;1H[K[4;1HSearching Directories for Prerequisites[K[6;1H* General Search::              Specifying a search path that applies[7;1H                                  to every prerequisite.[8;1H* Selective Search::            Specifying a search path[K[9;1H                                  for a specified class of names.[10;1H* Search Algorithm::            When and how search paths are applied.[61;1H[61;1H[1;1H                                  it does not normally take place.[K[2;1H[K[3;1HSearching Directories for Prerequisites[4;1H[K[5;1H* General Search::              Specifying a search path that applies[6;1H                                  to every prerequisite.[K[7;1H* Selective Search::            Specifying a search path[8;1H                                  for a specified class of names.[9;1H* Search Algorithm::            When and how search paths are applied.[10;1H* Recipes/Search::              How to write recipes that work together[11;1H                                  with search paths.[K[12;1H* Implicit/Search::             How search paths affect implicit rules.[13;1H* Libraries/Search::            Directory search for link libraries.[K[14;1H[K[15;1HStatic Pattern Rules[K[61;1H[61;1H[1;1H[K[2;1HSearching Directories for Prerequisites[3;1H[K[4;1H* General Search::              Specifying a search path that applies[5;1H                                  to every prerequisite.[K[6;1H* Selective Search::            Specifying a search path[7;1H                                  for a specified class of names.[8;1H* Search Algorithm::            When and how search paths are applied.[9;1H* Recipes/Search::              How to write recipes that work together[10;1H                                  with search paths.[K[11;1H* Implicit/Search::             How search paths affect implicit rules.[12;1H* Libraries/Search::            Directory search for link libraries.[K[13;1H[K[14;1HStatic Pattern Rules[61;1H[61;1H[1;1HSearching Directories for Prerequisites[2;1H[K[3;1H* General Search::              Specifying a search path that applies[4;1H                                  to every prerequisite.[K[5;1H* Selective Search::            Specifying a search path[6;1H                                  for a specified class of names.[7;1H* Search Algorithm::            When and how search paths are applied.[8;1H* Recipes/Search::              How to write recipes that work together[9;1H                                  with search paths.[K[10;1H* Implicit/Search::             How search paths affect implicit rules.[11;1H* Libraries/Search::            Directory search for link libraries.[K[12;1H[K[13;1HStatic Pattern Rules[14;1H[K[61;1H[61;1H[1;1H[K[61;1H[61;1H[1;1H* General Search::              Specifying a search path that applies[2;1H                                  to every prerequisite.[3;1H* Selective Search::            Specifying a search path[K[4;1H                                  for a specified class of names.[5;1H* Search Algorithm::            When and how search paths are applied.[6;1H* Recipes/Search::              How to write recipes that work together[7;1H                                  with search paths.[K[8;1H* Implicit/Search::             How search paths affect implicit rules.[9;1H* Libraries/Search::            Directory search for link libraries.[10;1H[K[11;1HStatic Pattern Rules[K[61;1H[61;1H[1;1H                                  to every prerequisite.[K[2;1H* Selective Search::            Specifying a search path[3;1H                                  for a specified class of names.[4;1H* Search Algorithm::            When and how search paths are applied.[5;1H* Recipes/Search::              How to write recipes that work together[6;1H                                  with search paths.[K[7;1H* Implicit/Search::             How search paths affect implicit rules.[8;1H* Libraries/Search::            Directory search for link libraries.[K[9;1H[K[10;1HStatic Pattern Rules[11;1H[K[12;1H* Static Usage::                The syntax of static pattern rules.[61;1H[61;1H[1;1H* Selective Search::            Specifying a search path[2;1H                                  for a specified class of names.[3;1H* Search Algorithm::            When and how search paths are applied.[4;1H* Recipes/Search::              How to write recipes that work together[5;1H                                  with search paths.[K[6;1H* Implicit/Search::             How search paths affect implicit rules.[7;1H* Libraries/Search::            Directory search for link libraries.[K[8;1H[K[9;1HStatic Pattern Rules[10;1H[K[11;1H* Static Usage::                The syntax of static pattern rules.[12;1H* Static versus Implicit::      When are they better than implicit rules?[13;1H[K[14;1HWriting Recipes in Rules[15;1H[K[16;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[61;1H[61;1H[1;1H                                  for a specified class of names.[2;1H* Search Algorithm::            When and how search paths are applied.[3;1H* Recipes/Search::              How to write recipes that work together[4;1H                                  with search paths.[K[5;1H* Implicit/Search::             How search paths affect implicit rules.[6;1H* Libraries/Search::            Directory search for link libraries.[K[7;1H[K[8;1HStatic Pattern Rules[9;1H[K[10;1H* Static Usage::                The syntax of static pattern rules.[11;1H* Static versus Implicit::      When are they better than implicit rules?[12;1H[K[13;1HWriting Recipes in Rules[14;1H[K[15;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[61;1H[61;1H[1;1H* Search Algorithm::            When and how search paths are applied.[2;1H* Recipes/Search::              How to write recipes that work together[3;1H                                  with search paths.[K[4;1H* Implicit/Search::             How search paths affect implicit rules.[5;1H* Libraries/Search::            Directory search for link libraries.[K[6;1H[K[7;1HStatic Pattern Rules[8;1H[K[9;1H* Static Usage::                The syntax of static pattern rules.[10;1H* Static versus Implicit::      When are they better than implicit rules?[11;1H[K[12;1HWriting Recipes in Rules[13;1H[K[14;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[15;1H* Echoing::                     How to control when recipes are echoed.[16;1H* Execution::                   How recipes are executed.[K[17;1H* Parallel::                    How recipes can be executed in parallel.[18;1H* Errors::                      What happens after a recipe execution error.[19;1H* Interrupts::                  What happens when a recipe is interrupted.[20;1H* Recursion::                   Invoking `make' from makefiles.[K[21;1H* Canned Recipes::              Defining canned recipes.[K[22;1H* Empty Recipes::               Defining useful, do-nothing recipes.[23;1H[K[24;1HRecipe Syntax[25;1H[K[26;1H* Splitting Lines::             Breaking long recipe lines for readability.[27;1H* Variables in Recipes::        Using `make' variables in recipes.[28;1H[K[29;1HRecipe Execution[K[30;1H[K[61;1H[61;1H[1;1H* Recipes/Search::              How to write recipes that work together[2;1H                                  with search paths.[K[3;1H* Implicit/Search::             How search paths affect implicit rules.[4;1H* Libraries/Search::            Directory search for link libraries.[K[5;1H[K[6;1HStatic Pattern Rules[7;1H[K[8;1H* Static Usage::                The syntax of static pattern rules.[9;1H* Static versus Implicit::      When are they better than implicit rules?[10;1H[K[11;1HWriting Recipes in Rules[12;1H[K[13;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[14;1H* Echoing::                     How to control when recipes are echoed.[61;1H[61;1H[1;1H                                  with search paths.[K[2;1H* Implicit/Search::             How search paths affect implicit rules.[3;1H* Libraries/Search::            Directory search for link libraries.[K[4;1H[K[5;1HStatic Pattern Rules[6;1H[K[7;1H* Static Usage::                The syntax of static pattern rules.[8;1H* Static versus Implicit::      When are they better than implicit rules?[9;1H[K[10;1HWriting Recipes in Rules[11;1H[K[12;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[13;1H* Echoing::                     How to control when recipes are echoed.[14;1H* Execution::                   How recipes are executed.[K[15;1H* Parallel::                    How recipes can be executed in parallel.[16;1H* Errors::                      What happens after a recipe execution error.[17;1H* Interrupts::                  What happens when a recipe is interrupted.[18;1H* Recursion::                   Invoking `make' from makefiles.[K[19;1H* Canned Recipes::              Defining canned recipes.[K[20;1H* Empty Recipes::               Defining useful, do-nothing recipes.[21;1H[K[22;1HRecipe Syntax[K[24;1H* Splitting Lines::             Breaking long recipe lines for readability.[25;1H* Variables in Recipes::        Using `make' variables in recipes.[26;1H[K[27;1HRecipe Execution[K[29;1H* Choosing the Shell::          How `make' chooses the shell used[30;1H                                  to run recipes.[31;1H[K[32;1HRecursive Use of `make'[K[33;1H[K[34;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[35;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[36;1H* Options/Recursion::           How to communicate options to a sub-`make'.[37;1H* -w Option::                   How the `-w' or `--print-directory' option[K[38;1H                                  helps debug use of recursive `make' commands.[40;1HHow to Use Variables[42;1H* Reference::                   How to use the value of a variable.[43;1H* Flavors::                     Variables come in two flavors.[44;1H* Advanced::                    Advanced features for referencing a variable.[45;1H* Values::                      All the ways variables get their values.[46;1H* Setting::                     How to set a variable in the makefile.[47;1H* Appending::                   How to append more text to the old value[48;1H                                  of a variable.[K[49;1H* Override Directive::          How to set a variable in the makefile even if[50;1H                                  the user has set it with a command argument.[51;1H* Multi-Line::                  An alternate way to set a variable[K[61;1H[61;1H[1;1H* Implicit/Search::             How search paths affect implicit rules.[2;1H* Libraries/Search::            Directory search for link libraries.[K[3;1H[K[4;1HStatic Pattern Rules[5;1H[K[6;1H* Static Usage::                The syntax of static pattern rules.[7;1H* Static versus Implicit::      When are they better than implicit rules?[8;1H[K[9;1HWriting Recipes in Rules[10;1H[K[11;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[12;1H* Echoing::                     How to control when recipes are echoed.[13;1H* Execution::                   How recipes are executed.[K[14;1H* Parallel::                    How recipes can be executed in parallel.[61;1H[61;1H[1;1H* Libraries/Search::            Directory search for link libraries.[K[2;1H[K[3;1HStatic Pattern Rules[4;1H[K[5;1H* Static Usage::                The syntax of static pattern rules.[6;1H* Static versus Implicit::      When are they better than implicit rules?[7;1H[K[8;1HWriting Recipes in Rules[9;1H[K[10;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[11;1H* Echoing::                     How to control when recipes are echoed.[12;1H* Execution::                   How recipes are executed.[K[13;1H* Parallel::                    How recipes can be executed in parallel.[14;1H* Errors::                      What happens after a recipe execution error.[15;1H* Interrupts::                  What happens when a recipe is interrupted.[61;1H[61;1H[1;1H[K[2;1HStatic Pattern Rules[3;1H[K[4;1H* Static Usage::                The syntax of static pattern rules.[5;1H* Static versus Implicit::      When are they better than implicit rules?[6;1H[K[7;1HWriting Recipes in Rules[8;1H[K[9;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[10;1H* Echoing::                     How to control when recipes are echoed.[11;1H* Execution::                   How recipes are executed.[K[12;1H* Parallel::                    How recipes can be executed in parallel.[13;1H* Errors::                      What happens after a recipe execution error.[14;1H* Interrupts::                  What happens when a recipe is interrupted.[K[61;1H[61;1H[1;1HStatic Pattern Rules[2;1H[K[3;1H* Static Usage::                The syntax of static pattern rules.[4;1H* Static versus Implicit::      When are they better than implicit rules?[5;1H[K[6;1HWriting Recipes in Rules[7;1H[K[8;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[9;1H* Echoing::                     How to control when recipes are echoed.[10;1H* Execution::                   How recipes are executed.[K[11;1H* Parallel::                    How recipes can be executed in parallel.[12;1H* Errors::                      What happens after a recipe execution error.[13;1H* Interrupts::                  What happens when a recipe is interrupted.[K[61;1H[61;1H[1;1H[K[61;1H[61;1H[1;1H* Static Usage::                The syntax of static pattern rules.[2;1H* Static versus Implicit::      When are they better than implicit rules?[3;1H[K[4;1HWriting Recipes in Rules[K[6;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[7;1H* Echoing::                     How to control when recipes are echoed.[8;1H* Execution::                   How recipes are executed.[K[9;1H* Parallel::                    How recipes can be executed in parallel.[10;1H* Errors::                      What happens after a recipe execution error.[61;1H[61;1H[1;1H* Static versus Implicit::      When are they better than implicit rules?[2;1H[K[3;1HWriting Recipes in Rules[4;1H[K[5;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[6;1H* Echoing::                     How to control when recipes are echoed.[7;1H* Execution::                   How recipes are executed.[K[8;1H* Parallel::                    How recipes can be executed in parallel.[9;1H* Errors::                      What happens after a recipe execution error.[10;1H* Interrupts::                  What happens when a recipe is interrupted.[K[11;1H* Recursion::                   Invoking `make' from makefiles.[K[12;1H* Canned Recipes::              Defining canned recipes.[K[13;1H* Empty Recipes::               Defining useful, do-nothing recipes.[K[14;1H[K[61;1H[61;1H[1;1H[K[2;1HWriting Recipes in Rules[3;1H[K[4;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[5;1H* Echoing::                     How to control when recipes are echoed.[6;1H* Execution::                   How recipes are executed.[K[7;1H* Parallel::                    How recipes can be executed in parallel.[8;1H* Errors::                      What happens after a recipe execution error.[9;1H* Interrupts::                  What happens when a recipe is interrupted.[K[10;1H* Recursion::                   Invoking `make' from makefiles.[K[11;1H* Canned Recipes::              Defining canned recipes.[K[12;1H* Empty Recipes::               Defining useful, do-nothing recipes.[13;1H[K[14;1HRecipe Syntax[61;1H[61;1H[1;1HWriting Recipes in Rules[2;1H[K[3;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[4;1H* Echoing::                     How to control when recipes are echoed.[5;1H* Execution::                   How recipes are executed.[K[6;1H* Parallel::                    How recipes can be executed in parallel.[7;1H* Errors::                      What happens after a recipe execution error.[8;1H* Interrupts::                  What happens when a recipe is interrupted.[K[9;1H* Recursion::                   Invoking `make' from makefiles.[K[10;1H* Canned Recipes::              Defining canned recipes.[K[11;1H* Empty Recipes::               Defining useful, do-nothing recipes.[12;1H[K[13;1HRecipe Syntax[14;1H[K[61;1H[61;1H[1;1H[K[61;1H[61;1H[1;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[2;1H* Echoing::                     How to control when recipes are echoed.[3;1H* Execution::                   How recipes are executed.[K[4;1H* Parallel::                    How recipes can be executed in parallel.[5;1H* Errors::                      What happens after a recipe execution error.[6;1H* Interrupts::                  What happens when a recipe is interrupted.[7;1H* Recursion::                   Invoking `make' from makefiles.[K[8;1H* Canned Recipes::              Defining canned recipes.[K[9;1H* Empty Recipes::               Defining useful, do-nothing recipes.[10;1H[K[11;1HRecipe Syntax[K[13;1H* Splitting Lines::             Breaking long recipe lines for readability.[14;1H* Variables in Recipes::        Using `make' variables in recipes.[15;1H[K[16;1HRecipe Execution[K[17;1H[K[18;1H* Choosing the Shell::          How `make' chooses the shell used[19;1H                                  to run recipes.[K[20;1H[K[21;1HRecursive Use of `make'[22;1H[K[23;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[24;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[25;1H* Options/Recursion::           How to communicate options to a sub-`make'.[26;1H* -w Option::                   How the `-w' or `--print-directory' option[27;1H                                  helps debug use of recursive `make' commands.[29;1HHow to Use Variables[K[30;1H[K[31;1H* Reference::                   How to use the value of a variable.[32;1H* Flavors::                     Variables come in two flavors.[33;1H* Advanced::                    Advanced features for referencing a variable.[34;1H* Values::                      All the ways variables get their values.[35;1H* Setting::                     How to set a variable in the makefile.[K[36;1H* Appending::                   How to append more text to the old value[K[37;1H                                  of a variable.[K[38;1H* Override Directive::          How to set a variable in the makefile even if[K[39;1H                                  the user has set it with a command argument.[40;1H* Multi-Line::                  An alternate way to set a variable[41;1H                                  to a multi-line string.[42;1H* Environment::                 Variable values can come from the environment.[43;1H* Target-specific::             Variable values can be defined on a per-target[44;1H                                  basis.[K[45;1H* Pattern-specific::            Target-specific variable values can be applied[46;1H                                  to a group of targets that match a pattern.[47;1H* Suppressing Inheritance::     Suppress inheritance of variables.[K[48;1H* Special Variables::           Variables with special meaning or behavior.[49;1H[K[50;1HAdvanced Features for Reference to Variables[K[51;1H[K[52;1H* Substitution Refs::           Referencing a variable with[K[53;1H                                  substitutions on the value.[K[54;1H* Computed Names::              Computing the name of the variable to refer to.[55;1H[K[56;1HConditional Parts of Makefiles[57;1H[K[58;1H* Conditional Example::         Example of a conditional[K[59;1H* Conditional Syntax::          The syntax of conditionals.[K[60;1H* Testing Flags::               Conditionals that test flags.[K[61;1H[K[61;1H[1;1H* Recipe Syntax::               Recipe syntax features and pitfalls.[2;1H* Echoing::                     How to control when recipes are echoed.[3;1H* Execution::                   How recipes are executed.[4;1H* Parallel::                    How recipes can be executed in parallel.[5;1H* Errors::                      What happens after a recipe execution error.[6;1H* Interrupts::                  What happens when a recipe is interrupted.[7;1H* Recursion::                   Invoking `make' from makefiles.[8;1H* Canned Recipes::              Defining canned recipes.[9;1H* Empty Recipes::               Defining useful, do-nothing recipes.[11;1HRecipe Syntax[13;1H* Splitting Lines::             Breaking long recipe lines for readability.[14;1H* Variables in Recipes::        Using `make' variables in recipes.[16;1HRecipe Execution[18;1H* Choosing the Shell::          How `make' chooses the shell used[19;1H                                  to run recipes.[21;1HRecursive Use of `make'[23;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[24;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[25;1H* Options/Recursion::           How to communicate options to a sub-`make'.[26;1H* -w Option::                   How the `-w' or `--print-directory' option[27;1H                                  helps debug use of recursive `make' commands.[29;1HHow to Use Variables[31;1H* Reference::                   How to use the value of a variable.[32;1H* Flavors::                     Variables come in two flavors.[33;1H* Advanced::                    Advanced features for referencing a variable.[34;1H* Values::                      All the ways variables get their values.[35;1H* Setting::                     How to set a variable in the makefile.[36;1H* Appending::                   How to append more text to the old value[37;1H                                  of a variable.[38;1H* Override Directive::          How to set a variable in the makefile even if[39;1H                                  the user has set it with a command argument.[40;1H* Multi-Line::                  An alternate way to set a variable[41;1H                                  to a multi-line string.[42;1H* Environment::                 Variable values can come from the environment.[43;1H* Target-specific::             Variable values can be defined on a per-target[44;1H                                  basis.[45;1H* Pattern-specific::            Target-specific variable values can be applied[46;1H                                  to a group of targets that match a pattern.[47;1H* Suppressing Inheritance::     Suppress inheritance of variables.[48;1H* Special Variables::           Variables with special meaning or behavior.[50;1HAdvanced Features for Reference to Variables[52;1H* Substitution Refs::           Referencing a variable with[53;1H                                  substitutions on the value.[54;1H* Computed Names::              Computing the name of the variable to refer to.[56;1HConditional Parts of Makefiles[58;1H* Conditional Example::         Example of a conditional[59;1H* Conditional Syntax::          The syntax of conditionals.[60;1H* Testing Flags::               Conditionals that test flags.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --51%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* Echoing::                     How to control when recipes are echoed.[2;1H* Execution::                   How recipes are executed.[K[3;1H* Parallel::                    How recipes can be executed in parallel.[4;1H* Errors::                      What happens after a recipe execution error.[5;1H* Interrupts::                  What happens when a recipe is interrupted.[K[6;1H* Recursion::                   Invoking `make' from makefiles.[K[7;1H* Canned Recipes::              Defining canned recipes.[K[8;1H* Empty Recipes::               Defining useful, do-nothing recipes.[9;1H[K[10;1HRecipe Syntax[11;1H[K[12;1H* Splitting Lines::             Breaking long recipe lines for readability.[13;1H* Variables in Recipes::        Using `make' variables in recipes.[K[14;1H[K[15;1HRecipe Execution[16;1H[K[17;1H* Choosing the Shell::          How `make' chooses the shell used[61;1H[61;1H[1;1H* Execution::                   How recipes are executed.[K[2;1H* Parallel::                    How recipes can be executed in parallel.[3;1H* Errors::                      What happens after a recipe execution error.[4;1H* Interrupts::                  What happens when a recipe is interrupted.[K[5;1H* Recursion::                   Invoking `make' from makefiles.[K[6;1H* Canned Recipes::              Defining canned recipes.[K[7;1H* Empty Recipes::               Defining useful, do-nothing recipes.[8;1H[K[9;1HRecipe Syntax[10;1H[K[61;1H[61;1H[1;1H* Parallel::                    How recipes can be executed in parallel.[2;1H* Errors::                      What happens after a recipe execution error.[3;1H* Interrupts::                  What happens when a recipe is interrupted.[K[4;1H* Recursion::                   Invoking `make' from makefiles.[K[5;1H* Canned Recipes::              Defining canned recipes.[K[6;1H* Empty Recipes::               Defining useful, do-nothing recipes.[7;1H[K[8;1HRecipe Syntax[9;1H[K[10;1H* Splitting Lines::             Breaking long recipe lines for readability.[11;1H* Variables in Recipes::        Using `make' variables in recipes.[12;1H[K[61;1H[61;1H[1;1H* Errors::                      What happens after a recipe execution error.[2;1H* Interrupts::                  What happens when a recipe is interrupted.[K[3;1H* Recursion::                   Invoking `make' from makefiles.[K[4;1H* Canned Recipes::              Defining canned recipes.[K[5;1H* Empty Recipes::               Defining useful, do-nothing recipes.[6;1H[K[7;1HRecipe Syntax[8;1H[K[9;1H* Splitting Lines::             Breaking long recipe lines for readability.[10;1H* Variables in Recipes::        Using `make' variables in recipes.[K[11;1H[K[12;1HRecipe Execution[13;1H[K[14;1H* Choosing the Shell::          How `make' chooses the shell used[15;1H                                  to run recipes.[61;1H[61;1H[1;1H* Interrupts::                  What happens when a recipe is interrupted.[K[2;1H* Recursion::                   Invoking `make' from makefiles.[K[3;1H* Canned Recipes::              Defining canned recipes.[K[4;1H* Empty Recipes::               Defining useful, do-nothing recipes.[5;1H[K[6;1HRecipe Syntax[7;1H[K[8;1H* Splitting Lines::             Breaking long recipe lines for readability.[9;1H* Variables in Recipes::        Using `make' variables in recipes.[K[10;1H[K[11;1HRecipe Execution[12;1H[K[13;1H* Choosing the Shell::          How `make' chooses the shell used[14;1H                                  to run recipes.[K[61;1H[61;1H[1;1H* Recursion::                   Invoking `make' from makefiles.[K[61;1H[61;1H[1;1H* Canned Recipes::              Defining canned recipes.[K[2;1H* Empty Recipes::               Defining useful, do-nothing recipes.[3;1H[K[4;1HRecipe Syntax[K[6;1H* Splitting Lines::             Breaking long recipe lines for readability.[7;1H* Variables in Recipes::        Using `make' variables in recipes.[8;1H[K[9;1HRecipe Execution[K[11;1H* Choosing the Shell::          How `make' chooses the shell used[12;1H                                  to run recipes.[61;1H[61;1H[1;1H* Empty Recipes::               Defining useful, do-nothing recipes.[2;1H[K[3;1HRecipe Syntax[4;1H[K[5;1H* Splitting Lines::             Breaking long recipe lines for readability.[6;1H* Variables in Recipes::        Using `make' variables in recipes.[K[7;1H[K[8;1HRecipe Execution[9;1H[K[10;1H* Choosing the Shell::          How `make' chooses the shell used[11;1H                                  to run recipes.[K[12;1H[K[13;1HRecursive Use of `make'[K[14;1H[K[61;1H[61;1H[1;1H[K[2;1HRecipe Syntax[3;1H[K[4;1H* Splitting Lines::             Breaking long recipe lines for readability.[5;1H* Variables in Recipes::        Using `make' variables in recipes.[K[6;1H[K[7;1HRecipe Execution[8;1H[K[9;1H* Choosing the Shell::          How `make' chooses the shell used[10;1H                                  to run recipes.[K[11;1H[K[12;1HRecursive Use of `make'[13;1H[K[14;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[15;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[61;1H[61;1H[1;1HRecipe Syntax[2;1H[K[3;1H* Splitting Lines::             Breaking long recipe lines for readability.[4;1H* Variables in Recipes::        Using `make' variables in recipes.[K[5;1H[K[6;1HRecipe Execution[7;1H[K[8;1H* Choosing the Shell::          How `make' chooses the shell used[9;1H                                  to run recipes.[K[10;1H[K[11;1HRecursive Use of `make'[12;1H[K[13;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[14;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[61;1H[61;1H[1;1H[K[61;1H[61;1H[1;1H* Splitting Lines::             Breaking long recipe lines for readability.[2;1H* Variables in Recipes::        Using `make' variables in recipes.[3;1H[K[4;1HRecipe Execution[K[6;1H* Choosing the Shell::          How `make' chooses the shell used[7;1H                                  to run recipes.[8;1H[K[9;1HRecursive Use of `make'[K[11;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[12;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[61;1H[61;1H[1;1H* Variables in Recipes::        Using `make' variables in recipes.[K[2;1H[K[3;1HRecipe Execution[4;1H[K[5;1H* Choosing the Shell::          How `make' chooses the shell used[6;1H                                  to run recipes.[K[7;1H[K[8;1HRecursive Use of `make'[9;1H[K[10;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[11;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[12;1H* Options/Recursion::           How to communicate options to a sub-`make'.[K[13;1H* -w Option::                   How the `-w' or `--print-directory' option[14;1H                                  helps debug use of recursive `make' commands.[15;1H[K[16;1HHow to Use Variables[17;1H[K[18;1H* Reference::                   How to use the value of a variable.[19;1H* Flavors::                     Variables come in two flavors.[20;1H* Advanced::                    Advanced features for referencing a variable.[21;1H* Values::                      All the ways variables get their values.[22;1H* Setting::                     How to set a variable in the makefile.[23;1H* Appending::                   How to append more text to the old value[24;1H                                  of a variable.[K[25;1H* Override Directive::          How to set a variable in the makefile even if[26;1H                                  the user has set it with a command argument.[27;1H* Multi-Line::                  An alternate way to set a variable[K[28;1H                                  to a multi-line string.[29;1H* Environment::                 Variable values can come from the environment.[30;1H* Target-specific::             Variable values can be defined on a per-target[31;1H                                  basis.[K[32;1H* Pattern-specific::            Target-specific variable values can be applied[33;1H                                  to a group of targets that match a pattern.[34;1H* Suppressing Inheritance::     Suppress inheritance of variables.[K[35;1H* Special Variables::           Variables with special meaning or behavior.[36;1H[K[37;1HAdvanced Features for Reference to Variables[K[38;1H[K[39;1H* Substitution Refs::           Referencing a variable with[K[40;1H                                  substitutions on the value.[K[41;1H* Computed Names::              Computing the name of the variable to refer to.[42;1H[K[43;1HConditional Parts of Makefiles[K[44;1H[K[45;1H* Conditional Example::         Example of a conditional[K[46;1H* Conditional Syntax::          The syntax of conditionals.[K[47;1H* Testing Flags::               Conditionals that test flags.[K[48;1H[K[49;1HFunctions for Transforming Text[50;1H[K[51;1H* Syntax of Functions::         How to write a function call.[52;1H* Text Functions::              General-purpose text manipulation functions.[53;1H* File Name Functions::         Functions for manipulating file names.[54;1H* Conditional Functions::       Functions that implement conditions.[K[55;1H* Foreach Function::            Repeat some text with controlled variation.[56;1H* Call Function::               Expand a user-defined function.[57;1H* Value Function::              Return the un-expanded value of a variable.[58;1H* Eval Function::               Evaluate the arguments as makefile syntax.[59;1H* Origin Function::             Find where a variable got its value.[60;1H* Flavor Function::             Find out the flavor of a variable.[61;1H* Shell Function::              Substitute the output of a shell command.[61;1H[1;1H* Variables in Recipes::        Using `make' variables in recipes.[3;1HRecipe Execution[5;1H* Choosing the Shell::          How `make' chooses the shell used[6;1H                                  to run recipes.[8;1HRecursive Use of `make'[10;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[11;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[12;1H* Options/Recursion::           How to communicate options to a sub-`make'.[13;1H* -w Option::                   How the `-w' or `--print-directory' option[14;1H                                  helps debug use of recursive `make' commands.[16;1HHow to Use Variables[18;1H* Reference::                   How to use the value of a variable.[19;1H* Flavors::                     Variables come in two flavors.[20;1H* Advanced::                    Advanced features for referencing a variable.[21;1H* Values::                      All the ways variables get their values.[22;1H* Setting::                     How to set a variable in the makefile.[23;1H* Appending::                   How to append more text to the old value[24;1H                                  of a variable.[25;1H* Override Directive::          How to set a variable in the makefile even if[26;1H                                  the user has set it with a command argument.[27;1H* Multi-Line::                  An alternate way to set a variable[28;1H                                  to a multi-line string.[29;1H* Environment::                 Variable values can come from the environment.[30;1H* Target-specific::             Variable values can be defined on a per-target[31;1H                                  basis.[32;1H* Pattern-specific::            Target-specific variable values can be applied[33;1H                                  to a group of targets that match a pattern.[34;1H* Suppressing Inheritance::     Suppress inheritance of variables.[35;1H* Special Variables::           Variables with special meaning or behavior.[37;1HAdvanced Features for Reference to Variables[39;1H* Substitution Refs::           Referencing a variable with[40;1H                                  substitutions on the value.[41;1H* Computed Names::              Computing the name of the variable to refer to.[43;1HConditional Parts of Makefiles[45;1H* Conditional Example::         Example of a conditional[46;1H* Conditional Syntax::          The syntax of conditionals.[47;1H* Testing Flags::               Conditionals that test flags.[49;1HFunctions for Transforming Text[51;1H* Syntax of Functions::         How to write a function call.[52;1H* Text Functions::              General-purpose text manipulation functions.[53;1H* File Name Functions::         Functions for manipulating file names.[54;1H* Conditional Functions::       Functions that implement conditions.[55;1H* Foreach Function::            Repeat some text with controlled variation.[56;1H* Call Function::               Expand a user-defined function.[57;1H* Value Function::              Return the un-expanded value of a variable.[58;1H* Eval Function::               Evaluate the arguments as makefile syntax.[59;1H* Origin Function::             Find where a variable got its value.[60;1H* Flavor Function::             Find out the flavor of a variable.[61;1H* Shell Function::              Substitute the output of a shell command.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --56%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H[K[2;1HRecipe Execution[3;1H[K[4;1H* Choosing the Shell::          How `make' chooses the shell used[5;1H                                  to run recipes.[K[6;1H[K[7;1HRecursive Use of `make'[8;1H[K[9;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[10;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[11;1H* Options/Recursion::           How to communicate options to a sub-`make'.[K[12;1H* -w Option::                   How the `-w' or `--print-directory' option[K[13;1H                                  helps debug use of recursive `make' commands.[14;1H[K[15;1HHow to Use Variables[16;1H[K[17;1H* Reference::                   How to use the value of a variable.[18;1H* Flavors::                     Variables come in two flavors.[K[61;1H[61;1H[1;1HRecipe Execution[2;1H[K[3;1H* Choosing the Shell::          How `make' chooses the shell used[4;1H                                  to run recipes.[K[5;1H[K[6;1HRecursive Use of `make'[7;1H[K[8;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[61;1H[61;1H[1;1H[K[2;1H* Choosing the Shell::          How `make' chooses the shell used[3;1H                                  to run recipes.[K[4;1H[K[5;1HRecursive Use of `make'[6;1H[K[7;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[8;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[9;1H* Options/Recursion::           How to communicate options to a sub-`make'.[10;1H* -w Option::                   How the `-w' or `--print-directory' option[K[11;1H                                  helps debug use of recursive `make' commands.[12;1H[K[13;1HHow to Use Variables[K[15;1H* Reference::                   How to use the value of a variable.[61;1H[61;1H[1;1H* Choosing the Shell::          How `make' chooses the shell used[2;1H                                  to run recipes.[K[3;1H[K[4;1HRecursive Use of `make'[5;1H[K[6;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[7;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[8;1H* Options/Recursion::           How to communicate options to a sub-`make'.[K[9;1H* -w Option::                   How the `-w' or `--print-directory' option[K[10;1H                                  helps debug use of recursive `make' commands.[11;1H[K[12;1HHow to Use Variables[13;1H[K[14;1H* Reference::                   How to use the value of a variable.[15;1H* Flavors::                     Variables come in two flavors.[K[16;1H* Advanced::                    Advanced features for referencing a variable.[61;1H[61;1H[1;1H                                  to run recipes.[K[2;1H[K[3;1HRecursive Use of `make'[4;1H[K[5;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[6;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[7;1H* Options/Recursion::           How to communicate options to a sub-`make'.[K[8;1H* -w Option::                   How the `-w' or `--print-directory' option[K[9;1H                                  helps debug use of recursive `make' commands.[10;1H[K[11;1HHow to Use Variables[12;1H[K[13;1H* Reference::                   How to use the value of a variable.[14;1H* Flavors::                     Variables come in two flavors.[K[61;1H[61;1H[1;1H[K[61;1H[61;1H[1;1HRecursive Use of `make'[3;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[4;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[5;1H* Options/Recursion::           How to communicate options to a sub-`make'.[6;1H* -w Option::                   How the `-w' or `--print-directory' option[K[7;1H                                  helps debug use of recursive `make' commands.[8;1H[K[9;1HHow to Use Variables[K[61;1H[61;1H[1;1H[K[2;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[3;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[4;1H* Options/Recursion::           How to communicate options to a sub-`make'.[K[5;1H* -w Option::                   How the `-w' or `--print-directory' option[K[6;1H                                  helps debug use of recursive `make' commands.[7;1H[K[8;1HHow to Use Variables[9;1H[K[10;1H* Reference::                   How to use the value of a variable.[11;1H* Flavors::                     Variables come in two flavors.[12;1H* Advanced::                    Advanced features for referencing a variable.[13;1H* Values::                      All the ways variables get their values.[14;1H* Setting::                     How to set a variable in the makefile.[15;1H* Appending::                   How to append more text to the old value[61;1H[61;1H[1;1H* MAKE Variable::               The special effects of using `$(MAKE)'.[2;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[3;1H* Options/Recursion::           How to communicate options to a sub-`make'.[K[4;1H* -w Option::                   How the `-w' or `--print-directory' option[K[5;1H                                  helps debug use of recursive `make' commands.[6;1H[K[7;1HHow to Use Variables[8;1H[K[9;1H* Reference::                   How to use the value of a variable.[10;1H* Flavors::                     Variables come in two flavors.[K[11;1H* Advanced::                    Advanced features for referencing a variable.[12;1H* Values::                      All the ways variables get their values.[K[61;1H[61;1H[1;1H* Variables/Recursion::         How to communicate variables to a sub-`make'.[2;1H* Options/Recursion::           How to communicate options to a sub-`make'.[K[3;1H* -w Option::                   How the `-w' or `--print-directory' option[K[4;1H                                  helps debug use of recursive `make' commands.[5;1H[K[6;1HHow to Use Variables[7;1H[K[8;1H* Reference::                   How to use the value of a variable.[9;1H* Flavors::                     Variables come in two flavors.[K[10;1H* Advanced::                    Advanced features for referencing a variable.[11;1H* Values::                      All the ways variables get their values.[K[12;1H* Setting::                     How to set a variable in the makefile.[K[13;1H* Appending::                   How to append more text to the old value[14;1H                                  of a variable.[K[61;1H[61;1H[1;1H* Options/Recursion::           How to communicate options to a sub-`make'.[K[2;1H* -w Option::                   How the `-w' or `--print-directory' option[K[3;1H                                  helps debug use of recursive `make' commands.[4;1H[K[5;1HHow to Use Variables[6;1H[K[7;1H* Reference::                   How to use the value of a variable.[8;1H* Flavors::                     Variables come in two flavors.[K[9;1H* Advanced::                    Advanced features for referencing a variable.[10;1H* Values::                      All the ways variables get their values.[K[11;1H* Setting::                     How to set a variable in the makefile.[K[12;1H* Appending::                   How to append more text to the old value[13;1H                                  of a variable.[K[14;1H* Override Directive::          How to set a variable in the makefile even if[61;1H[61;1H[1;1H* -w Option::                   How the `-w' or `--print-directory' option[K[2;1H                                  helps debug use of recursive `make' commands.[3;1H[K[4;1HHow to Use Variables[5;1H[K[6;1H* Reference::                   How to use the value of a variable.[7;1H* Flavors::                     Variables come in two flavors.[K[8;1H* Advanced::                    Advanced features for referencing a variable.[9;1H* Values::                      All the ways variables get their values.[K[10;1H* Setting::                     How to set a variable in the makefile.[K[11;1H* Appending::                   How to append more text to the old value[12;1H                                  of a variable.[K[13;1H* Override Directive::          How to set a variable in the makefile even if[14;1H                                  the user has set it with a command argument.[15;1H* Multi-Line::                  An alternate way to set a variable[K[16;1H                                  to a multi-line string.[K[17;1H* Environment::                 Variable values can come from the environment.[18;1H* Target-specific::             Variable values can be defined on a per-target[19;1H                                  basis.[K[20;1H* Pattern-specific::            Target-specific variable values can be applied[21;1H                                  to a group of targets that match a pattern.[22;1H* Suppressing Inheritance::     Suppress inheritance of variables.[K[23;1H* Special Variables::           Variables with special meaning or behavior.[24;1H[K[25;1HAdvanced Features for Reference to Variables[K[26;1H[K[27;1H* Substitution Refs::           Referencing a variable with[K[28;1H                                  substitutions on the value.[29;1H* Computed Names::              Computing the name of the variable to refer to.[30;1H[K[31;1HConditional Parts of Makefiles[K[32;1H[K[33;1H* Conditional Example::         Example of a conditional[K[34;1H* Conditional Syntax::          The syntax of conditionals.[K[35;1H* Testing Flags::               Conditionals that test flags.[K[37;1HFunctions for Transforming Text[K[39;1H* Syntax of Functions::         How to write a function call.[40;1H* Text Functions::              General-purpose text manipulation functions.[41;1H* File Name Functions::         Functions for manipulating file names.[K[42;1H* Conditional Functions::       Functions that implement conditions.[43;1H* Foreach Function::            Repeat some text with controlled variation.[44;1H* Call Function::               Expand a user-defined function.[45;1H* Value Function::              Return the un-expanded value of a variable.[46;1H* Eval Function::               Evaluate the arguments as makefile syntax.[47;1H* Origin Function::             Find where a variable got its value.[48;1H* Flavor Function::             Find out the flavor of a variable.[49;1H* Shell Function::              Substitute the output of a shell command.[50;1H* Make Control Functions::      Functions that control how make runs.[51;1H[K[52;1HHow to Run `make'[K[53;1H[K[54;1H* Makefile Arguments::          How to specify which makefile to use.[55;1H* Goals::                       How to use goal arguments to specify which[K[56;1H                                  parts of the makefile to use.[57;1H* Instead of Execution::        How to use mode flags to specify what[K[58;1H                                  kind of thing to do with the recipes[K[59;1H                                  in the makefile other than simply[K[60;1H                                  execute them.[K[61;1H* Avoiding Compilation::        How to avoid recompiling certain files.[K[61;1H[1;1H* -w Option::                   How the `-w' or `--print-directory' option[2;1H                                  helps debug use of recursive `make' commands.[4;1HHow to Use Variables[6;1H* Reference::                   How to use the value of a variable.[7;1H* Flavors::                     Variables come in two flavors.[8;1H* Advanced::                    Advanced features for referencing a variable.[9;1H* Values::                      All the ways variables get their values.[10;1H* Setting::                     How to set a variable in the makefile.[11;1H* Appending::                   How to append more text to the old value[12;1H                                  of a variable.[13;1H* Override Directive::          How to set a variable in the makefile even if[14;1H                                  the user has set it with a command argument.[15;1H* Multi-Line::                  An alternate way to set a variable[16;1H                                  to a multi-line string.[17;1H* Environment::                 Variable values can come from the environment.[18;1H* Target-specific::             Variable values can be defined on a per-target[19;1H                                  basis.[20;1H* Pattern-specific::            Target-specific variable values can be applied[21;1H                                  to a group of targets that match a pattern.[22;1H* Suppressing Inheritance::     Suppress inheritance of variables.[23;1H* Special Variables::           Variables with special meaning or behavior.[25;1HAdvanced Features for Reference to Variables[27;1H* Substitution Refs::           Referencing a variable with[28;1H                                  substitutions on the value.[29;1H* Computed Names::              Computing the name of the variable to refer to.[31;1HConditional Parts of Makefiles[33;1H* Conditional Example::         Example of a conditional[34;1H* Conditional Syntax::          The syntax of conditionals.[35;1H* Testing Flags::               Conditionals that test flags.[37;1HFunctions for Transforming Text[39;1H* Syntax of Functions::         How to write a function call.[40;1H* Text Functions::              General-purpose text manipulation functions.[41;1H* File Name Functions::         Functions for manipulating file names.[42;1H* Conditional Functions::       Functions that implement conditions.[43;1H* Foreach Function::            Repeat some text with controlled variation.[44;1H* Call Function::               Expand a user-defined function.[45;1H* Value Function::              Return the un-expanded value of a variable.[46;1H* Eval Function::               Evaluate the arguments as makefile syntax.[47;1H* Origin Function::             Find where a variable got its value.[48;1H* Flavor Function::             Find out the flavor of a variable.[49;1H* Shell Function::              Substitute the output of a shell command.[50;1H* Make Control Functions::      Functions that control how make runs.[52;1HHow to Run `make'[54;1H* Makefile Arguments::          How to specify which makefile to use.[55;1H* Goals::                       How to use goal arguments to specify which[56;1H                                  parts of the makefile to use.[57;1H* Instead of Execution::        How to use mode flags to specify what[58;1H                                  kind of thing to do with the recipes[59;1H                                  in the makefile other than simply[60;1H                                  execute them.[61;1H* Avoiding Compilation::        How to avoid recompiling certain files.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --60%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H                                  helps debug use of recursive `make' commands.[2;1H[K[3;1HHow to Use Variables[4;1H[K[5;1H* Reference::                   How to use the value of a variable.[6;1H* Flavors::                     Variables come in two flavors.[K[7;1H* Advanced::                    Advanced features for referencing a variable.[8;1H* Values::                      All the ways variables get their values.[K[9;1H* Setting::                     How to set a variable in the makefile.[K[10;1H* Appending::                   How to append more text to the old value[11;1H                                  of a variable.[K[12;1H* Override Directive::          How to set a variable in the makefile even if[13;1H                                  the user has set it with a command argument.[14;1H* Multi-Line::                  An alternate way to set a variable[K[61;1H[61;1H[1;1H[K[2;1HHow to Use Variables[3;1H[K[4;1H* Reference::                   How to use the value of a variable.[5;1H* Flavors::                     Variables come in two flavors.[K[6;1H* Advanced::                    Advanced features for referencing a variable.[7;1H* Values::                      All the ways variables get their values.[K[8;1H* Setting::                     How to set a variable in the makefile.[K[9;1H* Appending::                   How to append more text to the old value[10;1H                                  of a variable.[K[11;1H* Override Directive::          How to set a variable in the makefile even if[12;1H                                  the user has set it with a command argument.[13;1H* Multi-Line::                  An alternate way to set a variable[K[14;1H                                  to a multi-line string.[K[15;1H* Environment::                 Variable values can come from the environment.[16;1H* Target-specific::             Variable values can be defined on a per-target[17;1H                                  basis.[K[18;1H* Pattern-specific::            Target-specific variable values can be applied[19;1H                                  to a group of targets that match a pattern.[20;1H* Suppressing Inheritance::     Suppress inheritance of variables.[K[21;1H* Special Variables::           Variables with special meaning or behavior.[K[22;1H[K[23;1HAdvanced Features for Reference to Variables[K[25;1H* Substitution Refs::           Referencing a variable with[26;1H                                  substitutions on the value.[27;1H* Computed Names::              Computing the name of the variable to refer to.[61;1H[61;1H[1;1HHow to Use Variables[2;1H[K[3;1H* Reference::                   How to use the value of a variable.[4;1H* Flavors::                     Variables come in two flavors.[K[5;1H* Advanced::                    Advanced features for referencing a variable.[6;1H* Values::                      All the ways variables get their values.[K[7;1H* Setting::                     How to set a variable in the makefile.[K[8;1H* Appending::                   How to append more text to the old value[9;1H                                  of a variable.[K[10;1H* Override Directive::          How to set a variable in the makefile even if[11;1H                                  the user has set it with a command argument.[12;1H* Multi-Line::                  An alternate way to set a variable[K[13;1H                                  to a multi-line string.[K[14;1H* Environment::                 Variable values can come from the environment.[15;1H* Target-specific::             Variable values can be defined on a per-target[16;1H                                  basis.[K[17;1H* Pattern-specific::            Target-specific variable values can be applied[18;1H                                  to a group of targets that match a pattern.[K[19;1H* Suppressing Inheritance::     Suppress inheritance of variables.[K[20;1H* Special Variables::           Variables with special meaning or behavior.[21;1H[K[22;1HAdvanced Features for Reference to Variables[23;1H[K[24;1H* Substitution Refs::           Referencing a variable with[25;1H                                  substitutions on the value.[26;1H* Computed Names::              Computing the name of the variable to refer to.[27;1H[K[28;1HConditional Parts of Makefiles[K[29;1H[K[30;1H* Conditional Example::         Example of a conditional[61;1H[61;1H[1;1H[K[61;1H[61;1H[1;1H* Reference::                   How to use the value of a variable.[2;1H* Flavors::                     Variables come in two flavors.[3;1H* Advanced::                    Advanced features for referencing a variable.[4;1H* Values::                      All the ways variables get their values.[5;1H* Setting::                     How to set a variable in the makefile.[K[61;1H[61;1H[1;1H* Flavors::                     Variables come in two flavors.[K[2;1H* Advanced::                    Advanced features for referencing a variable.[3;1H* Values::                      All the ways variables get their values.[K[4;1H* Setting::                     How to set a variable in the makefile.[K[5;1H* Appending::                   How to append more text to the old value[6;1H                                  of a variable.[K[7;1H* Override Directive::          How to set a variable in the makefile even if[8;1H                                  the user has set it with a command argument.[9;1H* Multi-Line::                  An alternate way to set a variable[10;1H                                  to a multi-line string.[K[11;1H* Environment::                 Variable values can come from the environment.[12;1H* Target-specific::             Variable values can be defined on a per-target[13;1H                                  basis.[K[14;1H* Pattern-specific::            Target-specific variable values can be applied[15;1H                                  to a group of targets that match a pattern.[K[16;1H* Suppressing Inheritance::     Suppress inheritance of variables.[17;1H* Special Variables::           Variables with special meaning or behavior.[K[18;1H[K[19;1HAdvanced Features for Reference to Variables[K[20;1H[K[21;1H* Substitution Refs::           Referencing a variable with[22;1H                                  substitutions on the value.[23;1H* Computed Names::              Computing the name of the variable to refer to.[24;1H[K[25;1HConditional Parts of Makefiles[K[26;1H[K[27;1H* Conditional Example::         Example of a conditional[28;1H* Conditional Syntax::          The syntax of conditionals.[29;1H* Testing Flags::               Conditionals that test flags.[30;1H[K[31;1HFunctions for Transforming Text[33;1H* Syntax of Functions::         How to write a function call.[34;1H* Text Functions::              General-purpose text manipulation functions.[35;1H* File Name Functions::         Functions for manipulating file names.[36;1H* Conditional Functions::       Functions that implement conditions.[37;1H* Foreach Function::            Repeat some text with controlled variation.[38;1H* Call Function::               Expand a user-defined function.[39;1H* Value Function::              Return the un-expanded value of a variable.[40;1H* Eval Function::               Evaluate the arguments as makefile syntax.[K[41;1H* Origin Function::             Find where a variable got its value.[K[42;1H* Flavor Function::             Find out the flavor of a variable.[K[43;1H* Shell Function::              Substitute the output of a shell command.[K[44;1H* Make Control Functions::      Functions that control how make runs.[45;1H[K[46;1HHow to Run `make'[K[47;1H[K[48;1H* Makefile Arguments::          How to specify which makefile to use.[49;1H* Goals::                       How to use goal arguments to specify which[50;1H                                  parts of the makefile to use.[K[51;1H* Instead of Execution::        How to use mode flags to specify what[52;1H                                  kind of thing to do with the recipes[53;1H                                  in the makefile other than simply[54;1H                                  execute them.[K[55;1H* Avoiding Compilation::        How to avoid recompiling certain files.[K[56;1H* Overriding::                  How to override a variable to specify[57;1H                                  an alternate compiler and other things.[58;1H* Testing::                     How to proceed past some errors, to[K[59;1H                                  test compilation.[K[60;1H* Options Summary::             Summary of Options[61;1H[K[61;1H[1;1H* Flavors::                     Variables come in two flavors.[2;1H* Advanced::                    Advanced features for referencing a variable.[3;1H* Values::                      All the ways variables get their values.[4;1H* Setting::                     How to set a variable in the makefile.[5;1H* Appending::                   How to append more text to the old value[6;1H                                  of a variable.[7;1H* Override Directive::          How to set a variable in the makefile even if[8;1H                                  the user has set it with a command argument.[9;1H* Multi-Line::                  An alternate way to set a variable[10;1H                                  to a multi-line string.[11;1H* Environment::                 Variable values can come from the environment.[12;1H* Target-specific::             Variable values can be defined on a per-target[13;1H                                  basis.[14;1H* Pattern-specific::            Target-specific variable values can be applied[15;1H                                  to a group of targets that match a pattern.[16;1H* Suppressing Inheritance::     Suppress inheritance of variables.[17;1H* Special Variables::           Variables with special meaning or behavior.[19;1HAdvanced Features for Reference to Variables[21;1H* Substitution Refs::           Referencing a variable with[22;1H                                  substitutions on the value.[23;1H* Computed Names::              Computing the name of the variable to refer to.[25;1HConditional Parts of Makefiles[27;1H* Conditional Example::         Example of a conditional[28;1H* Conditional Syntax::          The syntax of conditionals.[29;1H* Testing Flags::               Conditionals that test flags.[31;1HFunctions for Transforming Text[33;1H* Syntax of Functions::         How to write a function call.[34;1H* Text Functions::              General-purpose text manipulation functions.[35;1H* File Name Functions::         Functions for manipulating file names.[36;1H* Conditional Functions::       Functions that implement conditions.[37;1H* Foreach Function::            Repeat some text with controlled variation.[38;1H* Call Function::               Expand a user-defined function.[39;1H* Value Function::              Return the un-expanded value of a variable.[40;1H* Eval Function::               Evaluate the arguments as makefile syntax.[41;1H* Origin Function::             Find where a variable got its value.[42;1H* Flavor Function::             Find out the flavor of a variable.[43;1H* Shell Function::              Substitute the output of a shell command.[44;1H* Make Control Functions::      Functions that control how make runs.[46;1HHow to Run `make'[48;1H* Makefile Arguments::          How to specify which makefile to use.[49;1H* Goals::                       How to use goal arguments to specify which[50;1H                                  parts of the makefile to use.[51;1H* Instead of Execution::        How to use mode flags to specify what[52;1H                                  kind of thing to do with the recipes[53;1H                                  in the makefile other than simply[54;1H                                  execute them.[55;1H* Avoiding Compilation::        How to avoid recompiling certain files.[56;1H* Overriding::                  How to override a variable to specify[57;1H                                  an alternate compiler and other things.[58;1H* Testing::                     How to proceed past some errors, to[59;1H                                  test compilation.[60;1H* Options Summary::             Summary of Options[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --62%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H* Advanced::                    Advanced features for referencing a variable.[61;1H[61;1H[1;1H* Values::                      All the ways variables get their values.[K[61;1H[61;1H[1;1H* Setting::                     How to set a variable in the makefile.[K[61;1H[61;1H[1;1H* Appending::                   How to append more text to the old value[61;1H[61;1H[1;1H                                  of a variable.[K[61;1H[61;1H[1;1H* Override Directive::          How to set a variable in the makefile even if[2;1H                                  the user has set it with a command argument.[3;1H* Multi-Line::                  An alternate way to set a variable[K[4;1H                                  to a multi-line string.[K[5;1H* Environment::                 Variable values can come from the environment.[6;1H* Target-specific::             Variable values can be defined on a per-target[7;1H                                  basis.[K[8;1H* Pattern-specific::            Target-specific variable values can be applied[9;1H                                  to a group of targets that match a pattern.[10;1H* Suppressing Inheritance::     Suppress inheritance of variables.[11;1H* Special Variables::           Variables with special meaning or behavior.[K[12;1H[K[13;1HAdvanced Features for Reference to Variables[14;1H[K[15;1H* Substitution Refs::           Referencing a variable with[K[16;1H                                  substitutions on the value.[K[17;1H* Computed Names::              Computing the name of the variable to refer to.[19;1HConditional Parts of Makefiles[K[21;1H* Conditional Example::         Example of a conditional[K[22;1H* Conditional Syntax::          The syntax of conditionals.[K[23;1H* Testing Flags::               Conditionals that test flags.[K[25;1HFunctions for Transforming Text[27;1H* Syntax of Functions::         How to write a function call.[28;1H* Text Functions::              General-purpose text manipulation functions.[29;1H* File Name Functions::         Functions for manipulating file names.[30;1H* Conditional Functions::       Functions that implement conditions.[31;1H* Foreach Function::            Repeat some text with controlled variation.[32;1H* Call Function::               Expand a user-defined function.[33;1H* Value Function::              Return the un-expanded value of a variable.[34;1H* Eval Function::               Evaluate the arguments as makefile syntax.[K[35;1H* Origin Function::             Find where a variable got its value.[K[36;1H* Flavor Function::             Find out the flavor of a variable.[K[37;1H* Shell Function::              Substitute the output of a shell command.[K[38;1H* Make Control Functions::      Functions that control how make runs.[39;1H[K[40;1HHow to Run `make'[K[41;1H[K[42;1H* Makefile Arguments::          How to specify which makefile to use.[43;1H* Goals::                       How to use goal arguments to specify which[44;1H                                  parts of the makefile to use.[K[45;1H* Instead of Execution::        How to use mode flags to specify what[46;1H                                  kind of thing to do with the recipes[47;1H                                  in the makefile other than simply[48;1H                                  execute them.[K[49;1H* Avoiding Compilation::        How to avoid recompiling certain files.[K[50;1H* Overriding::                  How to override a variable to specify[51;1H                                  an alternate compiler and other things.[52;1H* Testing::                     How to proceed past some errors, to[K[53;1H                                  test compilation.[K[54;1H* Options Summary::             Summary of Options[55;1H[K[56;1HUsing Implicit Rules[K[57;1H[K[58;1H* Using Implicit::              How to use an existing implicit rule[59;1H                                  to get the recipe for updating a file.[60;1H* Catalogue of Rules::          A list of built-in implicit rules.[61;1H* Implicit Variables::          How to change what predefined rules do.[61;1H[1;1H* Override Directive::          How to set a variable in the makefile even if[2;1H                                  the user has set it with a command argument.[3;1H* Multi-Line::                  An alternate way to set a variable[4;1H                                  to a multi-line string.[5;1H* Environment::                 Variable values can come from the environment.[6;1H* Target-specific::             Variable values can be defined on a per-target[7;1H                                  basis.[8;1H* Pattern-specific::            Target-specific variable values can be applied[9;1H                                  to a group of targets that match a pattern.[10;1H* Suppressing Inheritance::     Suppress inheritance of variables.[11;1H* Special Variables::           Variables with special meaning or behavior.[13;1HAdvanced Features for Reference to Variables[15;1H* Substitution Refs::           Referencing a variable with[16;1H                                  substitutions on the value.[17;1H* Computed Names::              Computing the name of the variable to refer to.[19;1HConditional Parts of Makefiles[21;1H* Conditional Example::         Example of a conditional[22;1H* Conditional Syntax::          The syntax of conditionals.[23;1H* Testing Flags::               Conditionals that test flags.[25;1HFunctions for Transforming Text[27;1H* Syntax of Functions::         How to write a function call.[28;1H* Text Functions::              General-purpose text manipulation functions.[29;1H* File Name Functions::         Functions for manipulating file names.[30;1H* Conditional Functions::       Functions that implement conditions.[31;1H* Foreach Function::            Repeat some text with controlled variation.[32;1H* Call Function::               Expand a user-defined function.[33;1H* Value Function::              Return the un-expanded value of a variable.[34;1H* Eval Function::               Evaluate the arguments as makefile syntax.[35;1H* Origin Function::             Find where a variable got its value.[36;1H* Flavor Function::             Find out the flavor of a variable.[37;1H* Shell Function::              Substitute the output of a shell command.[38;1H* Make Control Functions::      Functions that control how make runs.[40;1HHow to Run `make'[42;1H* Makefile Arguments::          How to specify which makefile to use.[43;1H* Goals::                       How to use goal arguments to specify which[44;1H                                  parts of the makefile to use.[45;1H* Instead of Execution::        How to use mode flags to specify what[46;1H                                  kind of thing to do with the recipes[47;1H                                  in the makefile other than simply[48;1H                                  execute them.[49;1H* Avoiding Compilation::        How to avoid recompiling certain files.[50;1H* Overriding::                  How to override a variable to specify[51;1H                                  an alternate compiler and other things.[52;1H* Testing::                     How to proceed past some errors, to[53;1H                                  test compilation.[54;1H* Options Summary::             Summary of Options[56;1HUsing Implicit Rules[58;1H* Using Implicit::              How to use an existing implicit rule[59;1H                                  to get the recipe for updating a file.[60;1H* Catalogue of Rules::          A list of built-in implicit rules.[61;1H* Implicit Variables::          How to change what predefined rules do.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --65%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H                                  the user has set it with a command argument.[61;1H[61;1H[1;1H* Multi-Line::                  An alternate way to set a variable[K[2;1H                                  to a multi-line string.[K[3;1H* Environment::                 Variable values can come from the environment.[4;1H* Target-specific::             Variable values can be defined on a per-target[5;1H                                  basis.[K[6;1H* Pattern-specific::            Target-specific variable values can be applied[7;1H                                  to a group of targets that match a pattern.[8;1H* Suppressing Inheritance::     Suppress inheritance of variables.[K[9;1H* Special Variables::           Variables with special meaning or behavior.[K[10;1H[K[11;1HAdvanced Features for Reference to Variables[K[13;1H* Substitution Refs::           Referencing a variable with[14;1H                                  substitutions on the value.[15;1H* Computed Names::              Computing the name of the variable to refer to.[16;1H[K[17;1HConditional Parts of Makefiles[K[19;1H* Conditional Example::         Example of a conditional[20;1H* Conditional Syntax::          The syntax of conditionals.[21;1H* Testing Flags::               Conditionals that test flags.[22;1H[K[23;1HFunctions for Transforming Text[K[25;1H* Syntax of Functions::         How to write a function call.[26;1H* Text Functions::              General-purpose text manipulation functions.[27;1H* File Name Functions::         Functions for manipulating file names.[28;1H* Conditional Functions::       Functions that implement conditions.[K[29;1H* Foreach Function::            Repeat some text with controlled variation.[30;1H* Call Function::               Expand a user-defined function.[K[31;1H* Value Function::              Return the un-expanded value of a variable.[32;1H* Eval Function::               Evaluate the arguments as makefile syntax.[33;1H* Origin Function::             Find where a variable got its value.[K[34;1H* Flavor Function::             Find out the flavor of a variable.[K[35;1H* Shell Function::              Substitute the output of a shell command.[36;1H* Make Control Functions::      Functions that control how make runs.[37;1H[K[38;1HHow to Run `make'[K[40;1H* Makefile Arguments::          How to specify which makefile to use.[41;1H* Goals::                       How to use goal arguments to specify which[42;1H                                  parts of the makefile to use.[K[43;1H* Instead of Execution::        How to use mode flags to specify what[K[44;1H                                  kind of thing to do with the recipes[45;1H                                  in the makefile other than simply[K[46;1H                                  execute them.[K[47;1H* Avoiding Compilation::        How to avoid recompiling certain files.[48;1H* Overriding::                  How to override a variable to specify[49;1H                                  an alternate compiler and other things.[50;1H* Testing::                     How to proceed past some errors, to[K[51;1H                                  test compilation.[K[52;1H* Options Summary::             Summary of Options[K[53;1H[K[54;1HUsing Implicit Rules[K[56;1H* Using Implicit::              How to use an existing implicit rule[57;1H                                  to get the recipe for updating a file.[58;1H* Catalogue of Rules::          A list of built-in implicit rules.[K[59;1H* Implicit Variables::          How to change what predefined rules do.[K[60;1H* Chained Rules::               How to use a chain of implicit rules.[61;1H* Pattern Rules::               How to define new implicit rules.[K[61;1H[1;1H* Multi-Line::                  An alternate way to set a variable[2;1H                                  to a multi-line string.[3;1H* Environment::                 Variable values can come from the environment.[4;1H* Target-specific::             Variable values can be defined on a per-target[5;1H                                  basis.[6;1H* Pattern-specific::            Target-specific variable values can be applied[7;1H                                  to a group of targets that match a pattern.[8;1H* Suppressing Inheritance::     Suppress inheritance of variables.[9;1H* Special Variables::           Variables with special meaning or behavior.[11;1HAdvanced Features for Reference to Variables[13;1H* Substitution Refs::           Referencing a variable with[14;1H                                  substitutions on the value.[15;1H* Computed Names::              Computing the name of the variable to refer to.[17;1HConditional Parts of Makefiles[19;1H* Conditional Example::         Example of a conditional[20;1H* Conditional Syntax::          The syntax of conditionals.[21;1H* Testing Flags::               Conditionals that test flags.[23;1HFunctions for Transforming Text[25;1H* Syntax of Functions::         How to write a function call.[26;1H* Text Functions::              General-purpose text manipulation functions.[27;1H* File Name Functions::         Functions for manipulating file names.[28;1H* Conditional Functions::       Functions that implement conditions.[29;1H* Foreach Function::            Repeat some text with controlled variation.[30;1H* Call Function::               Expand a user-defined function.[31;1H* Value Function::              Return the un-expanded value of a variable.[32;1H* Eval Function::               Evaluate the arguments as makefile syntax.[33;1H* Origin Function::             Find where a variable got its value.[34;1H* Flavor Function::             Find out the flavor of a variable.[35;1H* Shell Function::              Substitute the output of a shell command.[36;1H* Make Control Functions::      Functions that control how make runs.[38;1HHow to Run `make'[40;1H* Makefile Arguments::          How to specify which makefile to use.[41;1H* Goals::                       How to use goal arguments to specify which[61;1H[1;1H                                  to a multi-line string.[K[61;1H[61;1H[1;1H* Environment::                 Variable values can come from the environment.[61;1H[61;1H[1;1H* Target-specific::             Variable values can be defined on a per-target[61;1H[61;1H[1;1H                                  basis.[K[61;1H[61;1H[1;1H* Pattern-specific::            Target-specific variable values can be applied[61;1H[61;1H[1;1H                                  to a group of targets that match a pattern.[K[61;1H[61;1H[1;1H* Suppressing Inheritance::     Suppress inheritance of variables.[K[61;1H[61;1H[1;1H* Special Variables::           Variables with special meaning or behavior.[61;1H[61;1H[1;1H[K[2;1HAdvanced Features for Reference to Variables[K[3;1H[K[4;1H* Substitution Refs::           Referencing a variable with[K[5;1H                                  substitutions on the value.[6;1H* Computed Names::              Computing the name of the variable to refer to.[7;1H[K[8;1HConditional Parts of Makefiles[K[9;1H[K[10;1H* Conditional Example::         Example of a conditional[11;1H* Conditional Syntax::          The syntax of conditionals.[12;1H* Testing Flags::               Conditionals that test flags.[13;1H[K[14;1HFunctions for Transforming Text[K[15;1H[K[16;1H* Syntax of Functions::         How to write a function call.[17;1H* Text Functions::              General-purpose text manipulation functions.[18;1H* File Name Functions::         Functions for manipulating file names.[19;1H* Conditional Functions::       Functions that implement conditions.[20;1H* Foreach Function::            Repeat some text with controlled variation.[21;1H* Call Function::               Expand a user-defined function.[22;1H* Value Function::              Return the un-expanded value of a variable.[23;1H* Eval Function::               Evaluate the arguments as makefile syntax.[24;1H* Origin Function::             Find where a variable got its value.[25;1H* Flavor Function::             Find out the flavor of a variable.[26;1H* Shell Function::              Substitute the output of a shell command.[K[27;1H* Make Control Functions::      Functions that control how make runs.[K[28;1H[K[29;1HHow to Run `make'[K[30;1H[K[31;1H* Makefile Arguments::          How to specify which makefile to use.[K[32;1H* Goals::                       How to use goal arguments to specify which[33;1H                                  parts of the makefile to use.[K[34;1H* Instead of Execution::        How to use mode flags to specify what[35;1H                                  kind of thing to do with the recipes[K[36;1H                                  in the makefile other than simply[K[37;1H                                  execute them.[38;1H* Avoiding Compilation::        How to avoid recompiling certain files.[39;1H* Overriding::                  How to override a variable to specify[40;1H                                  an alternate compiler and other things.[41;1H* Testing::                     How to proceed past some errors, to[K[42;1H                                  test compilation.[K[43;1H* Options Summary::             Summary of Options[K[44;1H[K[45;1HUsing Implicit Rules[K[46;1H[K[47;1H* Using Implicit::              How to use an existing implicit rule[K[48;1H                                  to get the recipe for updating a file.[49;1H* Catalogue of Rules::          A list of built-in implicit rules.[K[50;1H* Implicit Variables::          How to change what predefined rules do.[51;1H* Chained Rules::               How to use a chain of implicit rules.[52;1H* Pattern Rules::               How to define new implicit rules.[53;1H* Last Resort::                 How to define a recipe for rules which[54;1H                                  cannot find any.[55;1H* Suffix Rules::                The old-fashioned style of implicit rule.[56;1H* Implicit Rule Search::        The precise algorithm for applying[K[57;1H                                  implicit rules.[K[58;1H[K[59;1HDefining and Redefining Pattern Rules[K[60;1H[K[61;1H* Pattern Intro::               An introduction to pattern rules.[61;1H[2;1HAdvanced Features for Reference to Variables[4;1H* Substitution Refs::           Referencing a variable with[5;1H                                  substitutions on the value.[6;1H* Computed Names::              Computing the name of the variable to refer to.[8;1HConditional Parts of Makefiles[10;1H* Conditional Example::         Example of a conditional[11;1H* Conditional Syntax::          The syntax of conditionals.[12;1H* Testing Flags::               Conditionals that test flags.[14;1HFunctions for Transforming Text[16;1H* Syntax of Functions::         How to write a function call.[17;1H* Text Functions::              General-purpose text manipulation functions.[18;1H* File Name Functions::         Functions for manipulating file names.[19;1H* Conditional Functions::       Functions that implement conditions.[20;1H* Foreach Function::            Repeat some text with controlled variation.[21;1H* Call Function::               Expand a user-defined function.[22;1H* Value Function::              Return the un-expanded value of a variable.[23;1H* Eval Function::               Evaluate the arguments as makefile syntax.[24;1H* Origin Function::             Find where a variable got its value.[25;1H* Flavor Function::             Find out the flavor of a variable.[26;1H* Shell Function::              Substitute the output of a shell command.[27;1H* Make Control Functions::      Functions that control how make runs.[29;1HHow to Run `make'[31;1H* Makefile Arguments::          How to specify which makefile to use.[32;1H* Goals::                       How to use goal arguments to specify which[33;1H                                  parts of the makefile to use.[34;1H* Instead of Execution::        How to use mode flags to specify what[35;1H                                  kind of thing to do with the recipes[36;1H                                  in the makefile other than simply[37;1H                                  execute them.[38;1H* Avoiding Compilation::        How to avoid recompiling certain files.[39;1H* Overriding::                  How to override a variable to specify[40;1H                                  an alternate compiler and other things.[41;1H* Testing::                     How to proceed past some errors, to[42;1H                                  test compilation.[43;1H* Options Summary::             Summary of Options[45;1HUsing Implicit Rules[47;1H* Using Implicit::              How to use an existing implicit rule[48;1H                                  to get the recipe for updating a file.[49;1H* Catalogue of Rules::          A list of built-in implicit rules.[50;1H* Implicit Variables::          How to change what predefined rules do.[51;1H* Chained Rules::               How to use a chain of implicit rules.[52;1H* Pattern Rules::               How to define new implicit rules.[53;1H* Last Resort::                 How to define a recipe for rules which[54;1H                                  cannot find any.[55;1H* Suffix Rules::                The old-fashioned style of implicit rule.[56;1H* Implicit Rule Search::        The precise algorithm for applying[57;1H                                  implicit rules.[59;1HDefining and Redefining Pattern Rules[61;1H* Pattern Intro::               An introduction to pattern rules.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --69%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1HAdvanced Features for Reference to Variables[2;1H[K[3;1H* Substitution Refs::           Referencing a variable with[4;1H                                  substitutions on the value.[5;1H* Computed Names::              Computing the name of the variable to refer to.[6;1H[K[7;1HConditional Parts of Makefiles[8;1H[K[9;1H* Conditional Example::         Example of a conditional[10;1H* Conditional Syntax::          The syntax of conditionals.[11;1H* Testing Flags::               Conditionals that test flags.[12;1H[K[13;1HFunctions for Transforming Text[14;1H[K[15;1H* Syntax of Functions::         How to write a function call.[61;1H[61;1H[1;1H[K[2;1H* Substitution Refs::           Referencing a variable with[3;1H                                  substitutions on the value.[4;1H* Computed Names::              Computing the name of the variable to refer to.[5;1H[K[6;1HConditional Parts of Makefiles[7;1H[K[61;1H[61;1H[1;1H* Substitution Refs::           Referencing a variable with[2;1H                                  substitutions on the value.[3;1H* Computed Names::              Computing the name of the variable to refer to.[4;1H[K[5;1HConditional Parts of Makefiles[6;1H[K[7;1H* Conditional Example::         Example of a conditional[8;1H* Conditional Syntax::          The syntax of conditionals.[9;1H* Testing Flags::               Conditionals that test flags.[10;1H[K[11;1HFunctions for Transforming Text[K[13;1H* Syntax of Functions::         How to write a function call.[14;1H* Text Functions::              General-purpose text manipulation functions.[15;1H* File Name Functions::         Functions for manipulating file names.[16;1H* Conditional Functions::       Functions that implement conditions.[17;1H* Foreach Function::            Repeat some text with controlled variation.[K[18;1H* Call Function::               Expand a user-defined function.[K[19;1H* Value Function::              Return the un-expanded value of a variable.[20;1H* Eval Function::               Evaluate the arguments as makefile syntax.[K[21;1H* Origin Function::             Find where a variable got its value.[22;1H* Flavor Function::             Find out the flavor of a variable.[K[23;1H* Shell Function::              Substitute the output of a shell command.[K[24;1H* Make Control Functions::      Functions that control how make runs.[25;1H[K[26;1HHow to Run `make'[K[27;1H[K[28;1H* Makefile Arguments::          How to specify which makefile to use.[29;1H* Goals::                       How to use goal arguments to specify which[30;1H                                  parts of the makefile to use.[31;1H* Instead of Execution::        How to use mode flags to specify what[32;1H                                  kind of thing to do with the recipes[K[33;1H                                  in the makefile other than simply[34;1H                                  execute them.[K[35;1H* Avoiding Compilation::        How to avoid recompiling certain files.[36;1H* Overriding::                  How to override a variable to specify[37;1H                                  an alternate compiler and other things.[38;1H* Testing::                     How to proceed past some errors, to[K[39;1H                                  test compilation.[K[40;1H* Options Summary::             Summary of Options[K[41;1H[K[42;1HUsing Implicit Rules[K[43;1H[K[44;1H* Using Implicit::              How to use an existing implicit rule[45;1H                                  to get the recipe for updating a file.[46;1H* Catalogue of Rules::          A list of built-in implicit rules.[47;1H* Implicit Variables::          How to change what predefined rules do.[48;1H* Chained Rules::               How to use a chain of implicit rules.[K[49;1H* Pattern Rules::               How to define new implicit rules.[K[50;1H* Last Resort::                 How to define a recipe for rules which[K[51;1H                                  cannot find any.[K[52;1H* Suffix Rules::                The old-fashioned style of implicit rule.[53;1H* Implicit Rule Search::        The precise algorithm for applying[K[54;1H                                  implicit rules.[K[55;1H[K[56;1HDefining and Redefining Pattern Rules[K[57;1H[K[58;1H* Pattern Intro::               An introduction to pattern rules.[59;1H* Pattern Examples::            Examples of pattern rules.[60;1H* Automatic Variables::         How to use automatic variables in the[61;1H                                  recipe of implicit rules.[K[61;1H[1;1H* Substitution Refs::           Referencing a variable with[2;1H                                  substitutions on the value.[61;1H[1;1H                                  substitutions on the value.[61;1H[61;1H[1;1H* Computed Names::              Computing the name of the variable to refer to.[2;1H[K[3;1HConditional Parts of Makefiles[K[5;1H* Conditional Example::         Example of a conditional[6;1H* Conditional Syntax::          The syntax of conditionals.[7;1H* Testing Flags::               Conditionals that test flags.[8;1H[K[9;1HFunctions for Transforming Text[K[11;1H* Syntax of Functions::         How to write a function call.[12;1H* Text Functions::              General-purpose text manipulation functions.[13;1H* File Name Functions::         Functions for manipulating file names.[61;1H[61;1H[1;1H[K[2;1HConditional Parts of Makefiles[3;1H[K[4;1H* Conditional Example::         Example of a conditional[5;1H* Conditional Syntax::          The syntax of conditionals.[6;1H* Testing Flags::               Conditionals that test flags.[7;1H[K[8;1HFunctions for Transforming Text[9;1H[K[10;1H* Syntax of Functions::         How to write a function call.[11;1H* Text Functions::              General-purpose text manipulation functions.[12;1H* File Name Functions::         Functions for manipulating file names.[K[13;1H* Conditional Functions::       Functions that implement conditions.[K[14;1H* Foreach Function::            Repeat some text with controlled variation.[K[15;1H* Call Function::               Expand a user-defined function.[K[16;1H* Value Function::              Return the un-expanded value of a variable.[17;1H* Eval Function::               Evaluate the arguments as makefile syntax.[K[18;1H* Origin Function::             Find where a variable got its value.[19;1H* Flavor Function::             Find out the flavor of a variable.[K[20;1H* Shell Function::              Substitute the output of a shell command.[K[21;1H* Make Control Functions::      Functions that control how make runs.[22;1H[K[23;1HHow to Run `make'[K[24;1H[K[25;1H* Makefile Arguments::          How to specify which makefile to use.[26;1H* Goals::                       How to use goal arguments to specify which[27;1H                                  parts of the makefile to use.[28;1H* Instead of Execution::        How to use mode flags to specify what[29;1H                                  kind of thing to do with the recipes[K[30;1H                                  in the makefile other than simply[61;1H[61;1H[1;1HConditional Parts of Makefiles[2;1H[K[3;1H* Conditional Example::         Example of a conditional[4;1H* Conditional Syntax::          The syntax of conditionals.[5;1H* Testing Flags::               Conditionals that test flags.[6;1H[K[7;1HFunctions for Transforming Text[8;1H[K[9;1H* Syntax of Functions::         How to write a function call.[10;1H* Text Functions::              General-purpose text manipulation functions.[11;1H* File Name Functions::         Functions for manipulating file names.[K[12;1H* Conditional Functions::       Functions that implement conditions.[K[13;1H* Foreach Function::            Repeat some text with controlled variation.[14;1H* Call Function::               Expand a user-defined function.[K[15;1H* Value Function::              Return the un-expanded value of a variable.[61;1H[61;1H[1;1H[K[61;1H[61;1H[1;1H* Conditional Example::         Example of a conditional[2;1H* Conditional Syntax::          The syntax of conditionals.[3;1H* Testing Flags::               Conditionals that test flags.[4;1H[K[5;1HFunctions for Transforming Text[K[7;1H* Syntax of Functions::         How to write a function call.[8;1H* Text Functions::              General-purpose text manipulation functions.[9;1H* File Name Functions::         Functions for manipulating file names.[10;1H* Conditional Functions::       Functions that implement conditions.[K[61;1H[61;1H[1;1H* Conditional Syntax::          The syntax of conditionals.[61;1H[61;1H[1;1H* Testing Flags::               Conditionals that test flags.[2;1H[K[3;1HFunctions for Transforming Text[K[5;1H* Syntax of Functions::         How to write a function call.[6;1H* Text Functions::              General-purpose text manipulation functions.[7;1H* File Name Functions::         Functions for manipulating file names.[8;1H* Conditional Functions::       Functions that implement conditions.[K[9;1H* Foreach Function::            Repeat some text with controlled variation.[10;1H* Call Function::               Expand a user-defined function.[K[11;1H* Value Function::              Return the un-expanded value of a variable.[12;1H* Eval Function::               Evaluate the arguments as makefile syntax.[13;1H* Origin Function::             Find where a variable got its value.[K[14;1H* Flavor Function::             Find out the flavor of a variable.[15;1H* Shell Function::              Substitute the output of a shell command.[K[16;1H* Make Control Functions::      Functions that control how make runs.[K[17;1H[K[18;1HHow to Run `make'[K[19;1H[K[20;1H* Makefile Arguments::          How to specify which makefile to use.[K[21;1H* Goals::                       How to use goal arguments to specify which[22;1H                                  parts of the makefile to use.[23;1H* Instead of Execution::        How to use mode flags to specify what[24;1H                                  kind of thing to do with the recipes[25;1H                                  in the makefile other than simply[K[26;1H                                  execute them.[K[27;1H* Avoiding Compilation::        How to avoid recompiling certain files.[28;1H* Overriding::                  How to override a variable to specify[29;1H                                  an alternate compiler and other things.[30;1H* Testing::                     How to proceed past some errors, to[31;1H                                  test compilation.[K[32;1H* Options Summary::             Summary of Options[K[33;1H[K[34;1HUsing Implicit Rules[K[35;1H[K[36;1H* Using Implicit::              How to use an existing implicit rule[K[37;1H                                  to get the recipe for updating a file.[K[38;1H* Catalogue of Rules::          A list of built-in implicit rules.[K[39;1H* Implicit Variables::          How to change what predefined rules do.[40;1H* Chained Rules::               How to use a chain of implicit rules.[41;1H* Pattern Rules::               How to define new implicit rules.[42;1H* Last Resort::                 How to define a recipe for rules which[43;1H                                  cannot find any.[44;1H* Suffix Rules::                The old-fashioned style of implicit rule.[45;1H* Implicit Rule Search::        The precise algorithm for applying[K[46;1H                                  implicit rules.[K[47;1H[K[48;1HDefining and Redefining Pattern Rules[K[49;1H[K[50;1H* Pattern Intro::               An introduction to pattern rules.[K[51;1H* Pattern Examples::            Examples of pattern rules.[52;1H* Automatic Variables::         How to use automatic variables in the[K[53;1H                                  recipe of implicit rules.[K[54;1H* Pattern Match::               How patterns match.[55;1H* Match-Anything Rules::        Precautions you should take prior to[56;1H                                  defining rules that can match any[57;1H                                  target file whatever.[58;1H* Canceling Rules::             How to override or cancel built-in rules.[59;1H[K[60;1HUsing `make' to Update Archive Files[K[61;1H[K[61;1H[1;1H* Testing Flags::               Conditionals that test flags.[3;1HFunctions for Transforming Text[5;1H* Syntax of Functions::         How to write a function call.[6;1H* Text Functions::              General-purpose text manipulation functions.[7;1H* File Name Functions::         Functions for manipulating file names.[8;1H* Conditional Functions::       Functions that implement conditions.[9;1H* Foreach Function::            Repeat some text with controlled variation.[10;1H* Call Function::               Expand a user-defined function.[11;1H* Value Function::              Return the un-expanded value of a variable.[12;1H* Eval Function::               Evaluate the arguments as makefile syntax.[13;1H* Origin Function::             Find where a variable got its value.[14;1H* Flavor Function::             Find out the flavor of a variable.[15;1H* Shell Function::              Substitute the output of a shell command.[16;1H* Make Control Functions::      Functions that control how make runs.[18;1HHow to Run `make'[20;1H* Makefile Arguments::          How to specify which makefile to use.[21;1H* Goals::                       How to use goal arguments to specify which[22;1H                                  parts of the makefile to use.[23;1H* Instead of Execution::        How to use mode flags to specify what[24;1H                                  kind of thing to do with the recipes[25;1H                                  in the makefile other than simply[26;1H                                  execute them.[27;1H* Avoiding Compilation::        How to avoid recompiling certain files.[28;1H* Overriding::                  How to override a variable to specify[29;1H                                  an alternate compiler and other things.[30;1H* Testing::                     How to proceed past some errors, to[31;1H                                  test compilation.[32;1H* Options Summary::             Summary of Options[34;1HUsing Implicit Rules[36;1H* Using Implicit::              How to use an existing implicit rule[37;1H                                  to get the recipe for updating a file.[38;1H* Catalogue of Rules::          A list of built-in implicit rules.[39;1H* Implicit Variables::          How to change what predefined rules do.[40;1H* Chained Rules::               How to use a chain of implicit rules.[41;1H* Pattern Rules::               How to define new implicit rules.[42;1H* Last Resort::                 How to define a recipe for rules which[43;1H                                  cannot find any.[44;1H* Suffix Rules::                The old-fashioned style of implicit rule.[45;1H* Implicit Rule Search::        The precise algorithm for applying[46;1H                                  implicit rules.[48;1HDefining and Redefining Pattern Rules[50;1H* Pattern Intro::               An introduction to pattern rules.[51;1H* Pattern Examples::            Examples of pattern rules.[52;1H* Automatic Variables::         How to use automatic variables in the[53;1H                                  recipe of implicit rules.[54;1H* Pattern Match::               How patterns match.[55;1H* Match-Anything Rules::        Precautions you should take prior to[56;1H                                  defining rules that can match any[57;1H                                  target file whatever.[58;1H* Canceling Rules::             How to override or cancel built-in rules.[60;1HUsing `make' to Update Archive Files[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --73%-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H[K[61;1H[61;1H[1;1HFunctions for Transforming Text[61;1H[61;1H[1;1H[K[2;1H* Syntax of Functions::         How to write a function call.[3;1H* Text Functions::              General-purpose text manipulation functions.[4;1H* File Name Functions::         Functions for manipulating file names.[5;1H* Conditional Functions::       Functions that implement conditions.[61;1H[61;1H[1;1H* Syntax of Functions::         How to write a function call.[2;1H* Text Functions::              General-purpose text manipulation functions.[3;1H* File Name Functions::         Functions for manipulating file names.[K[4;1H* Conditional Functions::       Functions that implement conditions.[K[5;1H* Foreach Function::            Repeat some text with controlled variation.[6;1H* Call Function::               Expand a user-defined function.[K[7;1H* Value Function::              Return the un-expanded value of a variable.[8;1H* Eval Function::               Evaluate the arguments as makefile syntax.[9;1H* Origin Function::             Find where a variable got its value.[K[10;1H* Flavor Function::             Find out the flavor of a variable.[11;1H* Shell Function::              Substitute the output of a shell command.[K[12;1H* Make Control Functions::      Functions that control how make runs.[K[13;1H[K[14;1HHow to Run `make'[K[15;1H[K[16;1H* Makefile Arguments::          How to specify which makefile to use.[17;1H* Goals::                       How to use goal arguments to specify which[18;1H                                  parts of the makefile to use.[19;1H* Instead of Execution::        How to use mode flags to specify what[20;1H                                  kind of thing to do with the recipes[21;1H                                  in the makefile other than simply[K[22;1H                                  execute them.[K[23;1H* Avoiding Compilation::        How to avoid recompiling certain files.[24;1H* Overriding::                  How to override a variable to specify[K[25;1H                                  an alternate compiler and other things.[26;1H* Testing::                     How to proceed past some errors, to[27;1H                                  test compilation.[K[28;1H* Options Summary::             Summary of Options[K[29;1H[K[30;1HUsing Implicit Rules[K[31;1H[K[32;1H* Using Implicit::              How to use an existing implicit rule[33;1H                                  to get the recipe for updating a file.[34;1H* Catalogue of Rules::          A list of built-in implicit rules.[35;1H* Implicit Variables::          How to change what predefined rules do.[36;1H* Chained Rules::               How to use a chain of implicit rules.[37;1H* Pattern Rules::               How to define new implicit rules.[K[38;1H* Last Resort::                 How to define a recipe for rules which[39;1H                                  cannot find any.[K[40;1H* Suffix Rules::                The old-fashioned style of implicit rule.[41;1H* Implicit Rule Search::        The precise algorithm for applying[42;1H                                  implicit rules.[K[43;1H[K[44;1HDefining and Redefining Pattern Rules[K[61;1H[61;1H[1;1H* Text Functions::              General-purpose text manipulation functions.[61;1H[61;1H[1;1H* File Name Functions::         Functions for manipulating file names.[K[2;1H* Conditional Functions::       Functions that implement conditions.[K[3;1H* Foreach Function::            Repeat some text with controlled variation.[4;1H* Call Function::               Expand a user-defined function.[K[5;1H* Value Function::              Return the un-expanded value of a variable.[6;1H* Eval Function::               Evaluate the arguments as makefile syntax.[7;1H* Origin Function::             Find where a variable got its value.[K[8;1H* Flavor Function::             Find out the flavor of a variable.[K[9;1H* Shell Function::              Substitute the output of a shell command.[10;1H* Make Control Functions::      Functions that control how make runs.[11;1H[K[12;1HHow to Run `make'[K[61;1H[61;1H[1;1H* Conditional Functions::       Functions that implement conditions.[K[61;1H[61;1H[1;1H* Foreach Function::            Repeat some text with controlled variation.[61;1H[61;1H[1;1H* Call Function::               Expand a user-defined function.[K[61;1H[61;1H[1;1H* Value Function::              Return the un-expanded value of a variable.[2;1H* Eval Function::               Evaluate the arguments as makefile syntax.[3;1H* Origin Function::             Find where a variable got its value.[K[4;1H* Flavor Function::             Find out the flavor of a variable.[5;1H* Shell Function::              Substitute the output of a shell command.[K[6;1H* Make Control Functions::      Functions that control how make runs.[K[7;1H[K[8;1HHow to Run `make'[K[9;1H[K[10;1H* Makefile Arguments::          How to specify which makefile to use.[11;1H* Goals::                       How to use goal arguments to specify which[12;1H                                  parts of the makefile to use.[13;1H* Instead of Execution::        How to use mode flags to specify what[14;1H                                  kind of thing to do with the recipes[15;1H                                  in the makefile other than simply[16;1H                                  execute them.[K[17;1H* Avoiding Compilation::        How to avoid recompiling certain files.[K[18;1H* Overriding::                  How to override a variable to specify[19;1H                                  an alternate compiler and other things.[20;1H* Testing::                     How to proceed past some errors, to[K[21;1H                                  test compilation.[K[22;1H* Options Summary::             Summary of Options[23;1H[K[24;1HUsing Implicit Rules[K[25;1H[K[26;1H* Using Implicit::              How to use an existing implicit rule[27;1H                                  to get the recipe for updating a file.[28;1H* Catalogue of Rules::          A list of built-in implicit rules.[29;1H* Implicit Variables::          How to change what predefined rules do.[30;1H* Chained Rules::               How to use a chain of implicit rules.[31;1H* Pattern Rules::               How to define new implicit rules.[32;1H* Last Resort::                 How to define a recipe for rules which[33;1H                                  cannot find any.[K[34;1H* Suffix Rules::                The old-fashioned style of implicit rule.[35;1H* Implicit Rule Search::        The precise algorithm for applying[K[36;1H                                  implicit rules.[K[37;1H[K[38;1HDefining and Redefining Pattern Rules[K[39;1H[K[40;1H* Pattern Intro::               An introduction to pattern rules.[K[41;1H* Pattern Examples::            Examples of pattern rules.[K[42;1H* Automatic Variables::         How to use automatic variables in the[43;1H                                  recipe of implicit rules.[44;1H* Pattern Match::               How patterns match.[45;1H* Match-Anything Rules::        Precautions you should take prior to[46;1H                                  defining rules that can match any[47;1H                                  target file whatever.[48;1H* Canceling Rules::             How to override or cancel built-in rules.[50;1HUsing `make' to Update Archive Files[K[51;1H[K[52;1H* Archive Members::             Archive members as targets.[K[53;1H* Archive Update::              The implicit rule for archive member targets.[54;1H* Archive Pitfalls::            Dangers to watch out for when using archives.[55;1H* Archive Suffix Rules::        You can write a special kind of suffix rule[56;1H                                  for updating archives.[K[57;1H[K[58;1HImplicit Rule for Archive Member Targets[K[60;1H* Archive Symbols::             How to update archive symbol directories.[61;1H[1;1H* Value Function::              Return the un-expanded value of a variable.[2;1H* Eval Function::               Evaluate the arguments as makefile syntax.[3;1H* Origin Function::             Find where a variable got its value.[4;1H* Flavor Function::             Find out the flavor of a variable.[5;1H* Shell Function::              Substitute the output of a shell command.[6;1H* Make Control Functions::      Functions that control how make runs.[8;1HHow to Run `make'[10;1H* Makefile Arguments::          How to specify which makefile to use.[11;1H* Goals::                       How to use goal arguments to specify which[12;1H                                  parts of the makefile to use.[13;1H* Instead of Execution::        How to use mode flags to specify what[14;1H                                  kind of thing to do with the recipes[15;1H                                  in the makefile other than simply[16;1H                                  execute them.[17;1H* Avoiding Compilation::        How to avoid recompiling certain files.[18;1H* Overriding::                  How to override a variable to specify[19;1H                                  an alternate compiler and other things.[20;1H* Testing::                     How to proceed past some errors, to[21;1H                                  test compilation.[22;1H* Options Summary::             Summary of Options[24;1HUsing Implicit Rules[26;1H* Using Implicit::              How to use an existing implicit rule[27;1H                                  to get the recipe for updating a file.[28;1H* Catalogue of Rules::          A list of built-in implicit rules.[29;1H* Implicit Variables::          How to change what predefined rules do.[30;1H* Chained Rules::               How to use a chain of implicit rules.[31;1H* Pattern Rules::               How to define new implicit rules.[32;1H* Last Resort::                 How to define a recipe for rules which[33;1H                                  cannot find any.[34;1H* Suffix Rules::                The old-fashioned style of implicit rule.[35;1H* Implicit Rule Search::        The precise algorithm for applying[36;1H                                  implicit rules.[38;1HDefining and Redefining Pattern Rules[40;1H* Pattern Intro::               An introduction to pattern rules.[41;1H* Pattern Examples::            Examples of pattern rules.[42;1H* Automatic Variables::         How to use automatic variables in the[43;1H                                  recipe of implicit rules.[44;1H* Pattern Match::               How patterns match.[45;1H* Match-Anything Rules::        Precautions you should take prior to[46;1H                                  defining rules that can match any[47;1H                                  target file whatever.[48;1H* Canceling Rules::             How to override or cancel built-in rules.[50;1HUsing `make' to Update Archive Files[52;1H* Archive Members::             Archive members as targets.[53;1H* Archive Update::              The implicit rule for archive member targets.[54;1H* Archive Pitfalls::            Dangers to watch out for when using archives.[55;1H* Archive Suffix Rules::        You can write a special kind of suffix rule[56;1H                                  for updating archives.[58;1HImplicit Rule for Archive Member Targets[60;1H* Archive Symbols::             How to update archive symbol directories.[62;1H[7m--zz-Info: (make.info.gz)Top, 266 lines --Bot-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[1;1H[1;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[2;1H[2;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[2;1H[K[3;1H1 Overview of `make'[K[4;1H********************[K[5;1H[K[6;1HThe `make' utility automatically determines which pieces of a large[K[7;1Hprogram need to be recompiled, and issues commands to recompile them.[8;1HThis manual describes GNU `make', which was implemented by Richard[9;1HStallman and Roland McGrath.  Development since Version 3.76 has been[3;1H[3;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[3;1H1 Overview of `make'[4;1H********************[6;1HThe `make' utility automatically determines which pieces of a large[7;1Hprogram need to be recompiled, and issues commands to recompile them.[8;1HThis manual describes GNU `make', which was implemented by Richard[9;1HStallman and Roland McGrath.  Development since Version 3.76 has been[10;1Hhandled by Paul D. Smith.[K[11;1H[K[12;1H   GNU `make' conforms to section 6.2 of `IEEE Standard 1003.2-1992'[4;1H[4;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[5;1H[5;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[3;1H1 Overview of `make'[4;1H********************[6;1HThe `make' utility automatically determines which pieces of a large[7;1Hprogram need to be recompiled, and issues commands to recompile them.[8;1HThis manual describes GNU `make', which was implemented by Richard[9;1HStallman and Roland McGrath.  Development since Version 3.76 has been[6;1H[6;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[3;1H1 Overview of `make'[4;1H********************[6;1HThe `make' utility automatically determines which pieces of a large[7;1Hprogram need to be recompiled, and issues commands to recompile them.[8;1HThis manual describes GNU `make', which was implemented by Richard[9;1HStallman and Roland McGrath.  Development since Version 3.76 has been[10;1Hhandled by Paul D. Smith.[12;1H   GNU `make' conforms to section 6.2 of `IEEE Standard 1003.2-1992'[13;1H(POSIX.2).  [K[14;1H[K[15;1H   Our examples show C programs, since they are most common, but you[16;1Hcan use `make' with any programming language whose compiler can be run[17;1Hwith a shell command.  Indeed, `make' is not limited to programs.  You[K[7;1H[7;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[8;1H[8;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[3;1H1 Overview of `make'[4;1H********************[6;1HThe `make' utility automatically determines which pieces of a large[7;1Hprogram need to be recompiled, and issues commands to recompile them.[8;1HThis manual describes GNU `make', which was implemented by Richard[9;1HStallman and Roland McGrath.  Development since Version 3.76 has been[10;1Hhandled by Paul D. Smith.[12;1H   GNU `make' conforms to section 6.2 of `IEEE Standard 1003.2-1992'[13;1H(POSIX.2).  [15;1H   Our examples show C programs, since they are most common, but you[16;1Hcan use `make' with any programming language whose compiler can be run[17;1Hwith a shell command.  Indeed, `make' is not limited to programs.  You[18;1Hcan use it to describe any task where some files must be updated[K[19;1Hautomatically from others whenever the others change.[K[20;1H[K[21;1H* Menu:[K[22;1H[K[23;1H* Preparing::                   Preparing and Running Make[24;1H* Reading::                     On Reading this Text[25;1H* Bugs::                        Problems and Bugs[26;1H[K[9;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[3;1H1 Overview of `make'[9;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[3;1H1 Overview of `make'[4;1H********************[6;1HThe `make' utility automatically determines which pieces of a large[7;1Hprogram need to be recompiled, and issues commands to recompile them.[8;1HThis manual describes GNU `make', which was implemented by Richard[9;1HStallman and Roland McGrath.  Development since Version 3.76 has been[10;1Hhandled by Paul D. Smith.[12;1H   GNU `make' conforms to section 6.2 of `IEEE Standard 1003.2-1992'[13;1H(POSIX.2).  [15;1H   Our examples show C programs, since they are most common, but you[16;1Hcan use `make' with any programming language whose compiler can be run[17;1Hwith a shell command.  Indeed, `make' is not limited to programs.  You[18;1Hcan use it to describe any task where some files must be updated[19;1Hautomatically from others whenever the others change.[21;1H* Menu:[23;1H* Preparing::                   Preparing and Running Make[24;1H* Reading::                     On Reading this Text[25;1H* Bugs::                        Problems and Bugs[10;1H[1;1HFile: make.info,  Node: Overview,  Next: Introduction,  Prev: Top,  Up: Top[3;1H1 Overview of `make'[4;1H********************[6;1HThe `make' utility automatically determines which pieces of a large[7;1Hprogram need to be recompiled, and issues commands to recompile them.[8;1HThis manual describes GNU `make', which was implemented by Richard[9;1HStallman and Roland McGrath.  Development since Version 3.76 has been[10;1Hhandled by Paul D. Smith.[12;1H   GNU `make' conforms to section 6.2 of `IEEE Standard 1003.2-1992'[13;1H(POSIX.2).  [15;1H   Our examples show C programs, since they are most common, but you[16;1Hcan use `make' with any programming language whose compiler can be run[17;1Hwith a shell command.  Indeed, `make' is not limited to programs.  You[18;1Hcan use it to describe any task where some files must be updated[19;1Hautomatically from others whenever the others change.[21;1H* Menu:[23;1H* Preparing::                   Preparing and Running Make[24;1H* Reading::                     On Reading this Text[25;1H* Bugs::                        Problems and Bugs[27;1H[K[28;1H[K[29;1H[K[30;1H[K[31;1H[K[32;1H[K[33;1H[K[34;1H[K[35;1H[K[36;1H[K[38;1H[K[40;1H[K[41;1H[K[42;1H[K[43;1H[K[44;1H[K[45;1H[K[46;1H[K[47;1H[K[48;1H[K[50;1H[K[52;1H[K[53;1H[K[54;1H[K[55;1H[K[56;1H[K[58;1H[K[60;1H[K[62;1H[7m--zz-Info: (make.info.gz)Overview, 26 lines --All-- Subfile: make.info-1.gz---------------------------------------------------------------------------------------------------------------------------------[0m[10;1H[11;1H[11;1H[12;1H[12;1H[13;1H[13;1H[14;1H[14;1H[15;1H[15;1H[16;1H[16;1H[17;1H[17;1H[18;1H[18;1H[19;1H[19;1H[20;1H[20;1H[21;1H[21;1H[22;1H[22;1H[23;1H[23;1H[24;1H[24;1H[25;1H[25;1H[26;1H[26;1H[1;1HFile: make.info,  Node: Preparing,  Next: Reading,  Prev: Overview,  Up: Overview[3;1HPreparing and Running Make[4;1H==========================[1;1H[1;1H[1;1HFile: make.info,  Node: Preparing,  Next: Reading,  Prev: Overview,  Up: Overview[3;1HPreparing and Running Make[4;1H==========================[6;1H   To prepare to use `make', you must write a file called the[K[7;1H"makefile" that describes the relationships among files in your program[8;1Hand provides commands for updating each file.  In a program, typically,[9;1Hthe executable file is updated from object files, which are in turn[K[10;1Hmade by compiling source files.[12;1H   Once a suitable makefile exists, each time you change some source[13;1Hfiles, this simple shell command:[15;1H     make[K[16;1H[K[17;1Hsuffices to perform all necessary recompilations.  The `make' program[K[18;1Huses the makefile data base and the last-modification times of the[19;1Hfiles to decide which of the files need to be updated.  For each of[20;1Hthose files, it issues the recipes recorded in the data base.[21;1H[K[22;1H   You can provide command line arguments to `make' to control which[23;1Hfiles should be recompiled, or how.  *Note How to Run `make': Running.[24;1H[K[2;1H[1;1HFile: make.info,  Node: Preparing,  Next: Reading,  Prev: Overview,  Up: Overview[3;1HPreparing and Running Make[4;1H==========================[6;1H   To prepare to use `make', you must write a file called the[7;1H"makefile" that describes the relationships among files in your program[8;1Hand provides commands for updating each file.  In a program, typically,[9;1Hthe executable file is updated from object files, which are in turn[10;1Hmade by compiling source files.[12;1H   Once a suitable makefile exists, each time you change some source[13;1Hfiles, this simple shell command:[15;1H     make[17;1Hsuffices to perform all necessary recompilations.  The `make' program[18;1Huses the makefile data base and the last-modification times of the[19;1Hfiles to decide which of the files need to be updated.  For each of[20;1Hthose files, it issues the recipes recorded in the data base.[22;1H   You can provide command line arguments to `make' to control which[23;1Hfiles should be recompiled, or how.  *Note How to Run `make': Running.[25;1H[K[62;1H[7m--zz-Info: (make.info.gz)Preparing, 24 lines --All-- Subfile: make.info-1.gz--------------------------------------------------------------------------------------------------------------------------------[0m[2;1H[3;1H[3;1H[4;1H[4;1H[5;1H[5;1H[6;1H[6;1H[7;1H[7;1H[8;1H[8;1H[9;1H[9;1H[10;1H[10;1H[11;1H[11;1H[12;1H[12;1H[13;1H[13;1H[14;1H[14;1H[15;1H[15;1H[16;1H[16;1H[17;1H[17;1H[18;1H[18;1H[19;1H[19;1H[20;1H[20;1H[21;1H[21;1H[22;1H[22;1H[23;1H[23;1H[24;1H[24;1H[1;1HFile: make.info,  Node: Reading,  Next: Bugs,  Prev: Preparing,  Up: Overview[K[3;1H1.1 How to Read This Manual[4;1H===========================[6;1HIf you are new to `make', or are looking for a general introduction,[7;1Hread the first few sections of each chapter, skipping the later[K[8;1Hsections.  In each chapter, the first few sections contain introductory[9;1Hor general information and the later sections contain specialized or[10;1Htechnical information.  The exception is the second chapter, *note An[11;1HIntroduction to Makefiles: Introduction, all of which is introductory.[12;1H[K[13;1H   If you are familiar with other `make' programs, see *note Features[14;1Hof GNU `make': Features, which lists the enhancements GNU `make' has,[15;1Hand *note Incompatibilities and Missing Features: Missing, which[16;1Hexplains the few things GNU `make' lacks that others have.[17;1H[K[18;1H   For a quick summary, see *note Options Summary::, *note Quick[K[19;1HReference::, and *note Special Targets::.[K[20;1H[K[22;1H[K[23;1H[K[62;1H[7m--zz-Info: (make.info.gz)Reading, 20 lines --All-- Subfile: make.info-1.gz----------------------------------------------------------------------------------------------------------------------------------[0m[1;1H[1;1H[2;1H[2;1H[3;1H[3;1H[4;1H[4;1H[5;1H[5;1H[6;1H[6;1H[7;1H[7;1H[8;1H[8;1H[9;1H[9;1H[10;1H[10;1H[11;1H[11;1H[12;1H[12;1H[13;1H[13;1H[14;1H[14;1H[15;1H[15;1H[16;1H[16;1H[17;1H[17;1H[18;1H[18;1H[19;1H[19;1H[20;1H[20;1H[1;1HFile: make.info,  Node: Bugs,  Prev: Reading,  Up: Overview[K[1;1H[1;1H[1;1HFile: make.info,  Node: Bugs,  Prev: Reading,  Up: Overview[3;1H1.2 Problems and Bugs[K[4;1H=====================[K[6;1HIf you have problems with GNU `make' or think you've found a bug,[K[7;1Hplease report it to the developers; we cannot promise to do anything but[8;1Hwe might well want to fix it.[K[9;1H[K[10;1H   Before reporting a bug, make sure you've actually found a real bug.[11;1HCarefully reread the documentation and see if it really says you can do[12;1Hwhat you're trying to do.  If it's not clear whether you should be able[13;1Hto do something or not, report that too; it's a bug in the[K[14;1Hdocumentation![K[15;1H[K[16;1H   Before reporting a bug or trying to fix it yourself, try to isolate[17;1Hit to the smallest possible makefile that reproduces the problem.  Then[18;1Hsend us the makefile and the exact results `make' gave you, including[19;1Hany error or warning messages.  Please don't paraphrase these messages:[20;1Hit's best to cut and paste them into your report.  When generating this[21;1Hsmall makefile, be sure to not use any non-free or unusual tools in[22;1Hyour recipes: you can almost always emulate what such a tool would do[23;1Hwith simple shell commands.  Finally, be sure to explain what you[24;1Hexpected to occur; this will help us decide whether the problem was[25;1Hreally in the documentation.[27;1H   Once you have a precise problem you can report it in one of two ways.[28;1HEither send electronic mail to:[30;1H         bug-make@gnu.org[32;1Hor use our Web-based project management tool, at:[34;1H         http://savannah.gnu.org/projects/make/[36;1HIn addition to the information above, please be careful to include the[2;1H[2;1H[1;1HFile: make.info,  Node: Bugs,  Prev: Reading,  Up: Overview[3;1H[3;1H[1;1HFile: make.info,  Node: Bugs,  Prev: Reading,  Up: Overview[4;1H[4;1H[1;1HFile: make.info,  Node: Bugs,  Prev: Reading,  Up: Overview[5;1H[5;1H[1;1HFile: make.info,  Node: Bugs,  Prev: Reading,  Up: Overview[3;1H1.2 Problems and Bugs[4;1H=====================[6;1HIf you have problems with GNU `make' or think you've found a bug,[7;1Hplease report it to the developers; we cannot promise to do anything but[8;1Hwe might well want to fix it.[10;1H   Before reporting a bug, make sure you've actually found a real bug.[11;1HCarefully reread the documentation and see if it really says you can do[12;1Hwhat you're trying to do.  If it's not clear whether you should be able[13;1Hto do something or not, report that too; it's a bug in the[14;1Hdocumentation![16;1H   Before reporting a bug or trying to fix it yourself, try to isolate[17;1Hit to the smallest possible makefile that reproduces the problem.  Then[18;1Hsend us the makefile and the exact results `make' gave you, including[19;1Hany error or warning messages.  Please don't paraphrase these messages:[20;1Hit's best to cut and paste them into your report.  When generating this[21;1Hsmall makefile, be sure to not use any non-free or unusual tools in[22;1Hyour recipes: you can almost always emulate what such a tool would do[23;1Hwith simple shell commands.  Finally, be sure to explain what you[24;1Hexpected to occur; this will help us decide whether the problem was[25;1Hreally in the documentation.[27;1H   Once you have a precise problem you can report it in one of two ways.[28;1HEither send electronic mail to:[30;1H         bug-make@gnu.org[32;1Hor use our Web-based project management tool, at:[34;1H         http://savannah.gnu.org/projects/make/[36;1HIn addition to the information above, please be careful to include the[37;1Hversion number of `make' you are using.  You can get this information[38;1Hwith the command `make --version'.  Be sure also to include the type of[39;1Hmachine and operating system you are using.  One way to obtain this[40;1Hinformation is by looking at the final lines of output from the command[41;1H`make --help'.[6;1H[1;1HFile: make.info,  Node: Bugs,  Prev: Reading,  Up: Overview[3;1H1.2 Problems and Bugs[4;1H=====================[6;1HIf you have problems with GNU `make' or think you've found a bug,[7;1Hplease report it to the developers; we cannot promise to do anything but[8;1Hwe might well want to fix it.[10;1H   Before reporting a bug, make sure you've actually found a real bug.[11;1HCarefully reread the documentation and see if it really says you can do[12;1Hwhat you're trying to do.  If it's not clear whether you should be able[13;1Hto do something or not, report that too; it's a bug in the[14;1Hdocumentation![16;1H   Before reporting a bug or trying to fix it yourself, try to isolate[17;1Hit to the smallest possible makefile that reproduces the problem.  Then[18;1Hsend us the makefile and the exact results `make' gave you, including[19;1Hany error or warning messages.  Please don't paraphrase these messages:[20;1Hit's best to cut and paste them into your report.  When generating this[21;1Hsmall makefile, be sure to not use any non-free or unusual tools in[22;1Hyour recipes: you can almost always emulate what such a tool would do[23;1Hwith simple shell commands.  Finally, be sure to explain what you[24;1Hexpected to occur; this will help us decide whether the problem was[25;1Hreally in the documentation.[27;1H   Once you have a precise problem you can report it in one of two ways.[28;1HEither send electronic mail to:[30;1H         bug-make@gnu.org[32;1Hor use our Web-based project management tool, at:[34;1H         http://savannah.gnu.org/projects/make/[36;1HIn addition to the information above, please be careful to include the[37;1Hversion number of `make' you are using.  You can get this information[38;1Hwith the command `make --version'.  Be sure also to include the type of[39;1Hmachine and operating system you are using.  One way to obtain this[40;1Hinformation is by looking at the final lines of output from the command[41;1H`make --help'.[62;1H[7m--zz-Info: (make.info.gz)Bugs, 42 lines --All-- Subfile: make.info-1.gz-------------------------------------------------------------------------------------------------------------------------------------[0m[6;1H[7;1H[7;1H[8;1H[8;1H[9;1H[9;1H[10;1H[10;1H[11;1H[11;1H[12;1H[12;1H[13;1H[13;1H[14;1H[14;1H[15;1H[15;1H[16;1H[16;1H[17;1H[17;1H[18;1H[18;1H[19;1H[19;1H[20;1H[20;1H[21;1H[21;1H[22;1H[22;1H[23;1H[23;1H[24;1H[24;1H[25;1H[25;1H[26;1H[26;1H[27;1H[27;1H[28;1H[28;1H[29;1H[29;1H[30;1H[30;1H[31;1H[31;1H[32;1H[32;1H[33;1H[33;1H[34;1H[34;1H[35;1H[35;1H[36;1H[36;1H[37;1H[37;1H[38;1H[38;1H[39;1H[39;1H[40;1H[40;1H[41;1H[41;1H[42;1H[42;1H[1;1HFile: make.info,  Node: Introduction,  Next: Makefiles,  Prev: Overview,  Up: Top[3;1H2 An Introduction to Makefiles[4;1H******************************[6;1HYou need a file called a "makefile" to tell `make' what to do.  Most[7;1Hoften, the makefile tells `make' how to compile and link a program.  [K[8;1H[K[9;1H   In this chapter, we will discuss a simple makefile that describes[10;1Hhow to compile and link a text editor which consists of eight C source[11;1Hfiles and three header files.  The makefile can also tell `make' how to[12;1Hrun miscellaneous commands when explicitly asked (for example, to remove[13;1Hcertain files as a clean-up operation).  To see a more complex example[14;1Hof a makefile, see *note Complex Makefile::.[16;1H   When `make' recompiles the editor, each changed C source file must[K[17;1Hbe recompiled.  If a header file has changed, each C source file that[K[18;1Hincludes the header file must be recompiled to be safe.  Each[K[19;1Hcompilation produces an object file corresponding to the source file.[K[20;1HFinally, if any source file has been recompiled, all the object files,[K[21;1Hwhether newly made or saved from previous compilations, must be linked[22;1Htogether to produce the new executable editor.  [K[23;1H[K[24;1H* Menu:[K[25;1H[K[26;1H* Rule Introduction::           What a rule looks like.[27;1H* Simple Makefile::             A Simple Makefile[K[28;1H* How Make Works::              How `make' Processes This Makefile[29;1H* Variables Simplify::          Variables Make Makefiles Simpler[30;1H* make Deduces::                Letting `make' Deduce the Recipes[31;1H* Combine By Prerequisite::     Another Style of Makefile[32;1H* Cleanup::                     Rules for Cleaning the Directory[34;1H[K[36;1H[K[37;1H[K[38;1H[K[39;1H[K[40;1H[K[41;1H[K[62;1H[7m--zz-Info: (make.info.gz)Introduction, 33 lines --All-- Subfile: make.info-1.gz-----------------------------------------------------------------------------------------------------------------------------[0m[1;1H[1;1H[2;1H[2;1H[3;1H[3;1H[4;1H[4;1H[5;1H[5;1H[6;1H[6;1H[7;1H[7;1H[8;1H[8;1H[9;1H[9;1H[10;1H[10;1H[11;1H[11;1H[12;1H[12;1H[13;1H[13;1H[14;1H[14;1H[15;1H[15;1H[16;1H[16;1H[17;1H[17;1H[18;1H[18;1H[19;1H[19;1H[20;1H[20;1H[21;1H[21;1H[22;1H[22;1H[23;1H[23;1H[24;1H[24;1H[25;1H[25;1H[26;1H[26;1H[27;1H[27;1H[28;1H[28;1H[29;1H[29;1H[30;1H[30;1H[31;1H[31;1H[32;1H[32;1H[33;1H[33;1H[1;1HFile: make.info,  Node: Rule Introduction,  Next: Simple Makefile,  Prev: Introduction,  Up: Introduction[3;1H2.1 What a Rule Looks Like[K[4;1H==========================[K[6;1HA simple makefile consists of "rules" with the following shape:[K[7;1H[K[8;1H     TARGET ... : PREREQUISITES ...[9;1H             RECIPE[K[10;1H             ...[K[11;1H             ...[K[12;1H[K[13;1H   A "target" is usually the name of a file that is generated by a[K[14;1Hprogram; examples of targets are executable or object files.  A target[15;1Hcan also be the name of an action to carry out, such as `clean' (*note[16;1HPhony Targets::).[K[17;1H[K[18;1H   A "prerequisite" is a file that is used as input to create the[19;1Htarget.  A target often depends on several files.[K[20;1H[K[21;1H   A "recipe" is an action that `make' carries out.  A recipe may have[22;1Hmore than one command, either on the same line or each on its own line.[23;1H*Please note:* you need to put a tab character at the beginning of[24;1Hevery recipe line!  This is an obscurity that catches the unwary.  If[25;1Hyou prefer to prefix your recipes with a character other than tab, you[26;1Hcan set the `.RECIPEPREFIX' variable to an alternate character (*note[27;1HSpecial Variables::).[K[28;1H[K[29;1H   Usually a recipe is in a rule with prerequisites and serves to[30;1Hcreate a target file if any of the prerequisites change.  However, the[31;1Hrule that specifies a recipe for the target need not have[32;1Hprerequisites.  For example, the rule containing the delete command[33;1Hassociated with the target `clean' does not have prerequisites.[35;1H   A "rule", then, explains how and when to remake certain files which[36;1Hare the targets of the particular rule.  `make' carries out the recipe[37;1Hon the prerequisites to create or update the target.  A rule can also[38;1Hexplain how and when to carry out an action.  *Note Writing Rules:[39;1HRules.[41;1H   A makefile may contain other text besides rules, but a simple[42;1Hmakefile need only contain rules.  Rules may look somewhat more[43;1Hcomplicated than shown in this template, but all fit the pattern more[44;1Hor less.[62;1H[7m--zz-Info: (make.info.gz)Rule Introduction, 45 lines --All-- Subfile: make.info-1.gz------------------------------------------------------------------------------------------------------------------------[0m[1;1H[1;1H[2;1H[2;1H[3;1H[3;1H[4;1H[4;1H[5;1H[5;1H[6;1H[6;1H[7;1H[7;1H[8;1H[8;1H[9;1H[9;1H[10;1H[10;1H[11;1H[11;1H[12;1H[12;1H[13;1H[13;1H[14;1H[14;1H[15;1H[15;1H[16;1H[16;1H[17;1H[17;1H[18;1H[18;1H[19;1H[19;1H[20;1H[20;1H[21;1H[21;1H[22;1H[22;1H[23;1H[23;1H[24;1H[24;1H[25;1H[25;1H[26;1H[26;1H[27;1H[27;1H[28;1H[28;1H[29;1H[29;1H[30;1H[30;1H[31;1H[31;1H[32;1H[32;1H[33;1H[33;1H[34;1H[34;1H[35;1H[35;1H[36;1H[36;1H[37;1H[37;1H[38;1H[38;1H[39;1H[39;1H[40;1H[40;1H[41;1H[41;1H[42;1H[42;1H[43;1H[43;1H[44;1H[44;1H[45;1H[45;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[1;1H[1;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[2;1H[2;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H[3;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[4;1H[4;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[5;1H[5;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[6;1H[6;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[7;1H[7;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[8;1H[8;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[9;1H[9;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[10;1H[10;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[11;1H[11;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[12;1H[12;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[13;1H[13;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[14;1H[14;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[15;1H[15;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[16;1H[16;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[17;1H[17;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[18;1H[18;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[19;1H[19;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[20;1H[20;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[21;1H[21;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[22;1H[22;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[23;1H[23;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[24;1H[24;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[K[4;1H=====================[K[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[9;1H[K[10;1H   In this example, all the C files include `defs.h', but only those[11;1Hdefining editing commands include `command.h', and only low level files[12;1Hthat change the editor buffer include `buffer.h'.[13;1H[K[14;1H     edit : main.o kbd.o command.o display.o \[K[15;1H            insert.o search.o files.o utils.o[K[16;1H             cc -o edit main.o kbd.o command.o display.o \[17;1H                        insert.o search.o files.o utils.o[18;1H[K[19;1H     main.o : main.c defs.h[K[20;1H             cc -c main.c[21;1H     kbd.o : kbd.c defs.h command.h[K[22;1H             cc -c kbd.c[K[23;1H     command.o : command.c defs.h command.h[K[24;1H             cc -c command.c[K[25;1H     display.o : display.c defs.h buffer.h[K[26;1H             cc -c display.c[K[27;1H     insert.o : insert.c defs.h buffer.h[28;1H             cc -c insert.c[29;1H     search.o : search.c defs.h buffer.h[K[30;1H             cc -c search.c[K[31;1H     files.o : files.c defs.h buffer.h command.h[K[32;1H             cc -c files.c[K[33;1H     utils.o : utils.c defs.h[K[34;1H             cc -c utils.c[35;1H     clean :[K[36;1H             rm edit main.o kbd.o command.o display.o \[K[37;1H                insert.o search.o files.o utils.o[K[38;1H[K[39;1HWe split each long line into two lines using backslash-newline; this is[40;1Hlike using one long line, but is easier to read.  [41;1H[K[42;1H   To use this makefile to create the executable file called `edit',[43;1Htype:[K[44;1H[K[45;1H     make[47;1H   To use this makefile to delete the executable file and all the object[48;1Hfiles from the directory, type:[50;1H     make clean[52;1H   In the example makefile, the targets include the executable file[53;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[54;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[55;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[56;1H`cc -c kbd.c'.[58;1H   When a target is a file, it needs to be recompiled or relinked if any[59;1Hof its prerequisites change.  In addition, any prerequisites that are[60;1Hthemselves automatically generated should be updated first.  In this[61;1Hexample, `edit' depends on each of the eight object files; the object[25;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[11;1Hdefining editing commands include `command.h', and only low level files[12;1Hthat change the editor buffer include `buffer.h'.[14;1H     edit : main.o kbd.o command.o display.o \[15;1H            insert.o search.o files.o utils.o[16;1H             cc -o edit main.o kbd.o command.o display.o \[17;1H                        insert.o search.o files.o utils.o[19;1H     main.o : main.c defs.h[20;1H             cc -c main.c[21;1H     kbd.o : kbd.c defs.h command.h[22;1H             cc -c kbd.c[23;1H     command.o : command.c defs.h command.h[24;1H             cc -c command.c[25;1H     display.o : display.c defs.h buffer.h[26;1H             cc -c display.c[27;1H     insert.o : insert.c defs.h buffer.h[28;1H             cc -c insert.c[29;1H     search.o : search.c defs.h buffer.h[30;1H             cc -c search.c[31;1H     files.o : files.c defs.h buffer.h command.h[32;1H             cc -c files.c[33;1H     utils.o : utils.c defs.h[34;1H             cc -c utils.c[35;1H     clean :[36;1H             rm edit main.o kbd.o command.o display.o \[37;1H                insert.o search.o files.o utils.o[39;1HWe split each long line into two lines using backslash-newline; this is[40;1Hlike using one long line, but is easier to read.  [42;1H   To use this makefile to create the executable file called `edit',[43;1Htype:[45;1H     make[47;1H   To use this makefile to delete the executable file and all the object[48;1Hfiles from the directory, type:[50;1H     make clean[52;1H   In the example makefile, the targets include the executable file[53;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[25;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[11;1Hdefining editing commands include `command.h', and only low level files[12;1Hthat change the editor buffer include `buffer.h'.[14;1H     edit : main.o kbd.o command.o display.o \[15;1H            insert.o search.o files.o utils.o[16;1H             cc -o edit main.o kbd.o command.o display.o \[17;1H                        insert.o search.o files.o utils.o[19;1H     main.o : main.c defs.h[20;1H             cc -c main.c[21;1H     kbd.o : kbd.c defs.h command.h[22;1H             cc -c kbd.c[23;1H     command.o : command.c defs.h command.h[24;1H             cc -c command.c[25;1H     display.o : display.c defs.h buffer.h[26;1H             cc -c display.c[27;1H     insert.o : insert.c defs.h buffer.h[28;1H             cc -c insert.c[29;1H     search.o : search.c defs.h buffer.h[30;1H             cc -c search.c[31;1H     files.o : files.c defs.h buffer.h command.h[32;1H             cc -c files.c[33;1H     utils.o : utils.c defs.h[34;1H             cc -c utils.c[35;1H     clean :[36;1H             rm edit main.o kbd.o command.o display.o \[37;1H                insert.o search.o files.o utils.o[39;1HWe split each long line into two lines using backslash-newline; this is[40;1Hlike using one long line, but is easier to read.  [42;1H   To use this makefile to create the executable file called `edit',[43;1Htype:[45;1H     make[47;1H   To use this makefile to delete the executable file and all the object[48;1Hfiles from the directory, type:[50;1H     make clean[52;1H   In the example makefile, the targets include the executable file[53;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[54;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[55;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[56;1H`cc -c kbd.c'.[58;1H   When a target is a file, it needs to be recompiled or relinked if any[59;1Hof its prerequisites change.  In addition, any prerequisites that are[60;1Hthemselves automatically generated should be updated first.  In this[26;1H[26;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[11;1Hdefining editing commands include `command.h', and only low level files[12;1Hthat change the editor buffer include `buffer.h'.[14;1H     edit : main.o kbd.o command.o display.o \[15;1H            insert.o search.o files.o utils.o[16;1H             cc -o edit main.o kbd.o command.o display.o \[17;1H                        insert.o search.o files.o utils.o[19;1H     main.o : main.c defs.h[20;1H             cc -c main.c[21;1H     kbd.o : kbd.c defs.h command.h[22;1H             cc -c kbd.c[23;1H     command.o : command.c defs.h command.h[24;1H             cc -c command.c[25;1H     display.o : display.c defs.h buffer.h[26;1H             cc -c display.c[27;1H     insert.o : insert.c defs.h buffer.h[28;1H             cc -c insert.c[29;1H     search.o : search.c defs.h buffer.h[30;1H             cc -c search.c[31;1H     files.o : files.c defs.h buffer.h command.h[32;1H             cc -c files.c[33;1H     utils.o : utils.c defs.h[34;1H             cc -c utils.c[35;1H     clean :[36;1H             rm edit main.o kbd.o command.o display.o \[37;1H                insert.o search.o files.o utils.o[39;1HWe split each long line into two lines using backslash-newline; this is[40;1Hlike using one long line, but is easier to read.  [42;1H   To use this makefile to create the executable file called `edit',[43;1Htype:[45;1H     make[47;1H   To use this makefile to delete the executable file and all the object[48;1Hfiles from the directory, type:[50;1H     make clean[52;1H   In the example makefile, the targets include the executable file[53;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[54;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[55;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[56;1H`cc -c kbd.c'.[58;1H   When a target is a file, it needs to be recompiled or relinked if any[59;1Hof its prerequisites change.  In addition, any prerequisites that are[60;1Hthemselves automatically generated should be updated first.  In this[61;1Hexample, `edit' depends on each of the eight object files; the object[27;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[27;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[11;1Hdefining editing commands include `command.h', and only low level files[12;1Hthat change the editor buffer include `buffer.h'.[14;1H     edit : main.o kbd.o command.o display.o \[15;1H            insert.o search.o files.o utils.o[16;1H             cc -o edit main.o kbd.o command.o display.o \[17;1H                        insert.o search.o files.o utils.o[19;1H     main.o : main.c defs.h[20;1H             cc -c main.c[21;1H     kbd.o : kbd.c defs.h command.h[22;1H             cc -c kbd.c[23;1H     command.o : command.c defs.h command.h[24;1H             cc -c command.c[25;1H     display.o : display.c defs.h buffer.h[26;1H             cc -c display.c[27;1H     insert.o : insert.c defs.h buffer.h[28;1H             cc -c insert.c[29;1H     search.o : search.c defs.h buffer.h[30;1H             cc -c search.c[31;1H     files.o : files.c defs.h buffer.h command.h[32;1H             cc -c files.c[33;1H     utils.o : utils.c defs.h[34;1H             cc -c utils.c[35;1H     clean :[36;1H             rm edit main.o kbd.o command.o display.o \[37;1H                insert.o search.o files.o utils.o[39;1HWe split each long line into two lines using backslash-newline; this is[40;1Hlike using one long line, but is easier to read.  [42;1H   To use this makefile to create the executable file called `edit',[43;1Htype:[45;1H     make[47;1H   To use this makefile to delete the executable file and all the object[48;1Hfiles from the directory, type:[50;1H     make clean[52;1H   In the example makefile, the targets include the executable file[53;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[54;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[55;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[56;1H`cc -c kbd.c'.[58;1H   When a target is a file, it needs to be recompiled or relinked if any[59;1Hof its prerequisites change.  In addition, any prerequisites that are[60;1Hthemselves automatically generated should be updated first.  In this[61;1Hexample, `edit' depends on each of the eight object files; the object[28;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[11;1Hdefining editing commands include `command.h', and only low level files[28;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[11;1Hdefining editing commands include `command.h', and only low level files[12;1Hthat change the editor buffer include `buffer.h'.[14;1H     edit : main.o kbd.o command.o display.o \[15;1H            insert.o search.o files.o utils.o[16;1H             cc -o edit main.o kbd.o command.o display.o \[17;1H                        insert.o search.o files.o utils.o[19;1H     main.o : main.c defs.h[20;1H             cc -c main.c[21;1H     kbd.o : kbd.c defs.h command.h[22;1H             cc -c kbd.c[23;1H     command.o : command.c defs.h command.h[24;1H             cc -c command.c[25;1H     display.o : display.c defs.h buffer.h[26;1H             cc -c display.c[27;1H     insert.o : insert.c defs.h buffer.h[28;1H             cc -c insert.c[29;1H     search.o : search.c defs.h buffer.h[30;1H             cc -c search.c[31;1H     files.o : files.c defs.h buffer.h command.h[32;1H             cc -c files.c[33;1H     utils.o : utils.c defs.h[34;1H             cc -c utils.c[35;1H     clean :[36;1H             rm edit main.o kbd.o command.o display.o \[37;1H                insert.o search.o files.o utils.o[39;1HWe split each long line into two lines using backslash-newline; this is[40;1Hlike using one long line, but is easier to read.  [42;1H   To use this makefile to create the executable file called `edit',[43;1Htype:[45;1H     make[47;1H   To use this makefile to delete the executable file and all the object[48;1Hfiles from the directory, type:[50;1H     make clean[52;1H   In the example makefile, the targets include the executable file[53;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[54;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[55;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[56;1H`cc -c kbd.c'.[58;1H   When a target is a file, it needs to be recompiled or relinked if any[59;1Hof its prerequisites change.  In addition, any prerequisites that are[60;1Hthemselves automatically generated should be updated first.  In this[61;1Hexample, `edit' depends on each of the eight object files; the object[29;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[29;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[11;1Hdefining editing commands include `command.h', and only low level files[12;1Hthat change the editor buffer include `buffer.h'.[14;1H     edit : main.o kbd.o command.o display.o \[15;1H            insert.o search.o files.o utils.o[16;1H             cc -o edit main.o kbd.o command.o display.o \[17;1H                        insert.o search.o files.o utils.o[19;1H     main.o : main.c defs.h[20;1H             cc -c main.c[21;1H     kbd.o : kbd.c defs.h command.h[22;1H             cc -c kbd.c[23;1H     command.o : command.c defs.h command.h[24;1H             cc -c command.c[25;1H     display.o : display.c defs.h buffer.h[26;1H             cc -c display.c[27;1H     insert.o : insert.c defs.h buffer.h[28;1H             cc -c insert.c[29;1H     search.o : search.c defs.h buffer.h[30;1H             cc -c search.c[31;1H     files.o : files.c defs.h buffer.h command.h[32;1H             cc -c files.c[33;1H     utils.o : utils.c defs.h[34;1H             cc -c utils.c[35;1H     clean :[36;1H             rm edit main.o kbd.o command.o display.o \[37;1H                insert.o search.o files.o utils.o[39;1HWe split each long line into two lines using backslash-newline; this is[40;1Hlike using one long line, but is easier to read.  [42;1H   To use this makefile to create the executable file called `edit',[43;1Htype:[45;1H     make[47;1H   To use this makefile to delete the executable file and all the object[48;1Hfiles from the directory, type:[50;1H     make clean[52;1H   In the example makefile, the targets include the executable file[53;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[54;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[55;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[56;1H`cc -c kbd.c'.[58;1H   When a target is a file, it needs to be recompiled or relinked if any[59;1Hof its prerequisites change.  In addition, any prerequisites that are[60;1Hthemselves automatically generated should be updated first.  In this[61;1Hexample, `edit' depends on each of the eight object files; the object[30;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[30;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[11;1Hdefining editing commands include `command.h', and only low level files[12;1Hthat change the editor buffer include `buffer.h'.[14;1H     edit : main.o kbd.o command.o display.o \[15;1H            insert.o search.o files.o utils.o[16;1H             cc -o edit main.o kbd.o command.o display.o \[17;1H                        insert.o search.o files.o utils.o[19;1H     main.o : main.c defs.h[20;1H             cc -c main.c[21;1H     kbd.o : kbd.c defs.h command.h[22;1H             cc -c kbd.c[23;1H     command.o : command.c defs.h command.h[24;1H             cc -c command.c[25;1H     display.o : display.c defs.h buffer.h[26;1H             cc -c display.c[27;1H     insert.o : insert.c defs.h buffer.h[28;1H             cc -c insert.c[29;1H     search.o : search.c defs.h buffer.h[30;1H             cc -c search.c[31;1H     files.o : files.c defs.h buffer.h command.h[32;1H             cc -c files.c[33;1H     utils.o : utils.c defs.h[34;1H             cc -c utils.c[35;1H     clean :[36;1H             rm edit main.o kbd.o command.o display.o \[37;1H                insert.o search.o files.o utils.o[39;1HWe split each long line into two lines using backslash-newline; this is[40;1Hlike using one long line, but is easier to read.  [42;1H   To use this makefile to create the executable file called `edit',[43;1Htype:[45;1H     make[47;1H   To use this makefile to delete the executable file and all the object[48;1Hfiles from the directory, type:[50;1H     make clean[52;1H   In the example makefile, the targets include the executable file[53;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[54;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[55;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[56;1H`cc -c kbd.c'.[58;1H   When a target is a file, it needs to be recompiled or relinked if any[59;1Hof its prerequisites change.  In addition, any prerequisites that are[60;1Hthemselves automatically generated should be updated first.  In this[61;1Hexample, `edit' depends on each of the eight object files; the object[31;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[31;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[32;1H[32;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[11;1Hdefining editing commands include `command.h', and only low level files[12;1Hthat change the editor buffer include `buffer.h'.[14;1H     edit : main.o kbd.o command.o display.o \[15;1H            insert.o search.o files.o utils.o[16;1H             cc -o edit main.o kbd.o command.o display.o \[17;1H                        insert.o search.o files.o utils.o[19;1H     main.o : main.c defs.h[20;1H             cc -c main.c[21;1H     kbd.o : kbd.c defs.h command.h[22;1H             cc -c kbd.c[23;1H     command.o : command.c defs.h command.h[24;1H             cc -c command.c[25;1H     display.o : display.c defs.h buffer.h[26;1H             cc -c display.c[27;1H     insert.o : insert.c defs.h buffer.h[28;1H             cc -c insert.c[29;1H     search.o : search.c defs.h buffer.h[30;1H             cc -c search.c[31;1H     files.o : files.c defs.h buffer.h command.h[32;1H             cc -c files.c[33;1H     utils.o : utils.c defs.h[34;1H             cc -c utils.c[35;1H     clean :[36;1H             rm edit main.o kbd.o command.o display.o \[37;1H                insert.o search.o files.o utils.o[39;1HWe split each long line into two lines using backslash-newline; this is[40;1Hlike using one long line, but is easier to read.  [42;1H   To use this makefile to create the executable file called `edit',[43;1Htype:[45;1H     make[47;1H   To use this makefile to delete the executable file and all the object[48;1Hfiles from the directory, type:[50;1H     make clean[52;1H   In the example makefile, the targets include the executable file[53;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[54;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[55;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[56;1H`cc -c kbd.c'.[58;1H   When a target is a file, it needs to be recompiled or relinked if any[59;1Hof its prerequisites change.  In addition, any prerequisites that are[60;1Hthemselves automatically generated should be updated first.  In this[61;1Hexample, `edit' depends on each of the eight object files; the object[33;1H[1;1HFile: make.info,  Node: Simple Makefile,  Next: How Make Works,  Prev: Rule Introduction,  Up: Introduction[3;1H2.2 A Simple Makefile[4;1H=====================[6;1HHere is a straightforward makefile that describes the way an executable[7;1Hfile called `edit' depends on eight object files which, in turn, depend[8;1Hon eight C source and three header files.[10;1H   In this example, all the C files include `defs.h', but only those[11;1Hdefining editing commands include `command.h', and only low level files[12;1Hthat change the editor buffer include `buffer.h'.[14;1H     edit : main.o kbd.o command.o display.o \[15;1H            insert.o search.o files.o utils.o[16;1H             cc -o edit main.o kbd.o command.o display.o \[17;1H                        insert.o search.o files.o utils.o[19;1H     main.o : main.c defs.h[20;1H             cc -c main.c[21;1H     kbd.o : kbd.c defs.h command.h[22;1H             cc -c kbd.c[23;1H     command.o : command.c defs.h command.h[24;1H             cc -c command.c[25;1H     display.o : display.c defs.h buffer.h[26;1H             cc -c display.c[27;1H     insert.o : insert.c defs.h buffer.h[28;1H             cc -c insert.c[29;1H     search.o : search.c defs.h buffer.h[30;1H             cc -c search.c[31;1H     files.o : files.c defs.h buffer.h command.h[32;1H             cc -c files.c[33;1H     utils.o : utils.c defs.h[34;1H             cc -c utils.c[35;1H     clean :[36;1H             rm edit main.o kbd.o command.o display.o \[37;1H                insert.o search.o files.o utils.o[39;1HWe split each long line into two lines using backslash-newline; this is[40;1Hlike using one long line, but is easier to read.  [42;1H   To use this makefile to create the executable file called `edit',[43;1Htype:[45;1H     make[47;1H   To use this makefile to delete the executable file and all the object[48;1Hfiles from the directory, type:[50;1H     make clean[52;1H   In the example makefile, the targets include the executable file[53;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[54;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[55;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[56;1H`cc -c kbd.c'.[58;1H   When a target is a file, it needs to be recompiled or relinked if any[59;1Hof its prerequisites change.  In addition, any prerequisites that are[60;1Hthemselves automatically generated should be updated first.  In this[61;1Hexample, `edit' depends on each of the eight object files; the object[62;1H[7m--zz-Info: (make.info.gz)Simple Makefile, 85 lines --Top-- Subfile: make.info-1.gz--------------------------------------------------------------------------------------------------------------------------[0m[33;1H[34;1H[34;1H[35;1H[35;1H[36;1H[36;1H[37;1H[37;1H[38;1H[38;1H[39;1H[39;1H[40;1H[40;1H[41;1H[41;1H[42;1H[42;1H[43;1H[43;1H[44;1H[44;1H[45;1H[45;1H[46;1H[46;1H[47;1H[47;1H[48;1H[48;1H[49;1H[49;1H[50;1H[50;1H[51;1H[51;1H[52;1H[52;1H[53;1H[53;1H[54;1H[54;1H[55;1H[55;1H[56;1H[56;1H[57;1H[57;1H[58;1H[58;1H[59;1H[59;1H[60;1H[60;1H[61;1H[61;1H[1;1H[K[61;1H[61;1H[1;1H2.2 A Simple Makefile[2;1H=====================[3;1H[K[4;1HHere is a straightforward makefile that describes the way an executable[5;1Hfile called `edit' depends on eight object files which, in turn, depend[6;1Hon eight C source and three header files.[K[7;1H[K[8;1H   In this example, all the C files include `defs.h', but only those[61;1H[61;1H[1;1H=====================[2;1H[K[3;1HHere is a straightforward makefile that describes the way an executable[4;1Hfile called `edit' depends on eight object files which, in turn, depend[5;1Hon eight C source and three header files.[K[6;1H[K[7;1H   In this example, all the C files include `defs.h', but only those[8;1Hdefining editing commands include `command.h', and only low level files[9;1Hthat change the editor buffer include `buffer.h'.[10;1H[K[11;1H     edit : main.o kbd.o command.o display.o \[K[12;1H            insert.o search.o files.o utils.o[K[13;1H             cc -o edit main.o kbd.o command.o display.o \[14;1H                        insert.o search.o files.o utils.o[15;1H[K[16;1H     main.o : main.c defs.h[K[17;1H             cc -c main.c[K[18;1H     kbd.o : kbd.c defs.h command.h[19;1H             cc -c kbd.c[K[20;1H     command.o : command.c defs.h command.h[21;1H             cc -c command.c[K[22;1H     display.o : display.c defs.h buffer.h[23;1H             cc -c display.c[K[24;1H     insert.o : insert.c defs.h buffer.h[25;1H             cc -c insert.c[K[26;1H     search.o : search.c defs.h buffer.h[27;1H             cc -c search.c[K[28;1H     files.o : files.c defs.h buffer.h command.h[29;1H             cc -c files.c[K[30;1H     utils.o : utils.c defs.h[31;1H             cc -c utils.c[K[32;1H     clean :[K[33;1H             rm edit main.o kbd.o command.o display.o \[34;1H                insert.o search.o files.o utils.o[35;1H[K[36;1HWe split each long line into two lines using backslash-newline; this is[37;1Hlike using one long line, but is easier to read.  [39;1H   To use this makefile to create the executable file called `edit',[K[40;1Htype:[K[42;1H     make[K[43;1H[K[44;1H   To use this makefile to delete the executable file and all the object[45;1Hfiles from the directory, type:[47;1H     make clean[K[48;1H[K[49;1H   In the example makefile, the targets include the executable file[50;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[51;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[52;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[53;1H`cc -c kbd.c'.[K[54;1H[K[55;1H   When a target is a file, it needs to be recompiled or relinked if any[56;1Hof its prerequisites change.  In addition, any prerequisites that are[57;1Hthemselves automatically generated should be updated first.  In this[58;1Hexample, `edit' depends on each of the eight object files; the object[K[59;1Hfile `main.o' depends on the source file `main.c' and on the header[K[60;1Hfile `defs.h'.[K[61;1H[K[61;1H[1;1H=====================[3;1HHere is a straightforward makefile that describes the way an executable[4;1Hfile called `edit' depends on eight object files which, in turn, depend[5;1Hon eight C source and three header files.[7;1H   In this example, all the C files include `defs.h', but only those[8;1Hdefining editing commands include `command.h', and only low level files[9;1Hthat change the editor buffer include `buffer.h'.[11;1H     edit : main.o kbd.o command.o display.o \[12;1H            insert.o search.o files.o utils.o[13;1H             cc -o edit main.o kbd.o command.o display.o \[14;1H                        insert.o search.o files.o utils.o[16;1H     main.o : main.c defs.h[17;1H             cc -c main.c[18;1H     kbd.o : kbd.c defs.h command.h[19;1H             cc -c kbd.c[20;1H     command.o : command.c defs.h command.h[21;1H             cc -c command.c[22;1H     display.o : display.c defs.h buffer.h[23;1H             cc -c display.c[24;1H     insert.o : insert.c defs.h buffer.h[25;1H             cc -c insert.c[26;1H     search.o : search.c defs.h buffer.h[27;1H             cc -c search.c[28;1H     files.o : files.c defs.h buffer.h command.h[29;1H             cc -c files.c[30;1H     utils.o : utils.c defs.h[31;1H             cc -c utils.c[32;1H     clean :[33;1H             rm edit main.o kbd.o command.o display.o \[34;1H                insert.o search.o files.o utils.o[36;1HWe split each long line into two lines using backslash-newline; this is[37;1Hlike using one long line, but is easier to read.  [39;1H   To use this makefile to create the executable file called `edit',[40;1Htype:[42;1H     make[44;1H   To use this makefile to delete the executable file and all the object[45;1Hfiles from the directory, type:[47;1H     make clean[49;1H   In the example makefile, the targets include the executable file[50;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[51;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[52;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[53;1H`cc -c kbd.c'.[55;1H   When a target is a file, it needs to be recompiled or relinked if any[56;1Hof its prerequisites change.  In addition, any prerequisites that are[57;1Hthemselves automatically generated should be updated first.  In this[58;1Hexample, `edit' depends on each of the eight object files; the object[59;1Hfile `main.o' depends on the source file `main.c' and on the header[60;1Hfile `defs.h'.[62;1H[7m--zz-Info: (make.info.gz)Simple Makefile, 85 lines -- 3%-- Subfile: make.info-1.gz--------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H[K[2;1HHere is a straightforward makefile that describes the way an executable[3;1Hfile called `edit' depends on eight object files which, in turn, depend[4;1Hon eight C source and three header files.[K[5;1H[K[6;1H   In this example, all the C files include `defs.h', but only those[7;1Hdefining editing commands include `command.h', and only low level files[8;1Hthat change the editor buffer include `buffer.h'.[K[9;1H[K[10;1H     edit : main.o kbd.o command.o display.o \[11;1H            insert.o search.o files.o utils.o[K[12;1H             cc -o edit main.o kbd.o command.o display.o \[13;1H                        insert.o search.o files.o utils.o[K[14;1H[K[15;1H     main.o : main.c defs.h[16;1H             cc -c main.c[K[17;1H     kbd.o : kbd.c defs.h command.h[18;1H             cc -c kbd.c[K[61;1H[61;1H[1;1HHere is a straightforward makefile that describes the way an executable[2;1Hfile called `edit' depends on eight object files which, in turn, depend[3;1Hon eight C source and three header files.[K[4;1H[K[5;1H   In this example, all the C files include `defs.h', but only those[6;1Hdefining editing commands include `command.h', and only low level files[7;1Hthat change the editor buffer include `buffer.h'.[K[8;1H[K[9;1H     edit : main.o kbd.o command.o display.o \[10;1H            insert.o search.o files.o utils.o[K[11;1H             cc -o edit main.o kbd.o command.o display.o \[12;1H                        insert.o search.o files.o utils.o[K[13;1H[K[14;1H     main.o : main.c defs.h[15;1H             cc -c main.c[K[16;1H     kbd.o : kbd.c defs.h command.h[17;1H             cc -c kbd.c[K[18;1H     command.o : command.c defs.h command.h[19;1H             cc -c command.c[20;1H     display.o : display.c defs.h buffer.h[K[21;1H             cc -c display.c[22;1H     insert.o : insert.c defs.h buffer.h[K[23;1H             cc -c insert.c[K[24;1H     search.o : search.c defs.h buffer.h[25;1H             cc -c search.c[26;1H     files.o : files.c defs.h buffer.h command.h[27;1H             cc -c files.c[K[28;1H     utils.o : utils.c defs.h[K[29;1H             cc -c utils.c[30;1H     clean :[K[31;1H             rm edit main.o kbd.o command.o display.o \[32;1H                insert.o search.o files.o utils.o[33;1H[K[34;1HWe split each long line into two lines using backslash-newline; this is[35;1Hlike using one long line, but is easier to read.  [36;1H[K[37;1H   To use this makefile to create the executable file called `edit',[61;1H[61;1H[1;1Hfile called `edit' depends on eight object files which, in turn, depend[2;1Hon eight C source and three header files.[K[3;1H[K[4;1H   In this example, all the C files include `defs.h', but only those[5;1Hdefining editing commands include `command.h', and only low level files[6;1Hthat change the editor buffer include `buffer.h'.[K[7;1H[K[8;1H     edit : main.o kbd.o command.o display.o \[9;1H            insert.o search.o files.o utils.o[K[10;1H             cc -o edit main.o kbd.o command.o display.o \[11;1H                        insert.o search.o files.o utils.o[K[12;1H[K[13;1H     main.o : main.c defs.h[61;1H[61;1H[1;1Hon eight C source and three header files.[K[2;1H[K[3;1H   In this example, all the C files include `defs.h', but only those[4;1Hdefining editing commands include `command.h', and only low level files[5;1Hthat change the editor buffer include `buffer.h'.[K[6;1H[K[7;1H     edit : main.o kbd.o command.o display.o \[8;1H            insert.o search.o files.o utils.o[K[9;1H             cc -o edit main.o kbd.o command.o display.o \[10;1H                        insert.o search.o files.o utils.o[K[11;1H[K[12;1H     main.o : main.c defs.h[13;1H             cc -c main.c[K[61;1H[61;1H[1;1H[K[2;1H   In this example, all the C files include `defs.h', but only those[3;1Hdefining editing commands include `command.h', and only low level files[4;1Hthat change the editor buffer include `buffer.h'.[K[5;1H[K[6;1H     edit : main.o kbd.o command.o display.o \[7;1H            insert.o search.o files.o utils.o[K[8;1H             cc -o edit main.o kbd.o command.o display.o \[9;1H                        insert.o search.o files.o utils.o[K[10;1H[K[11;1H     main.o : main.c defs.h[12;1H             cc -c main.c[K[13;1H     kbd.o : kbd.c defs.h command.h[14;1H             cc -c kbd.c[K[15;1H     command.o : command.c defs.h command.h[16;1H             cc -c command.c[K[17;1H     display.o : display.c defs.h buffer.h[18;1H             cc -c display.c[K[19;1H     insert.o : insert.c defs.h buffer.h[20;1H             cc -c insert.c[K[21;1H     search.o : search.c defs.h buffer.h[22;1H             cc -c search.c[K[23;1H     files.o : files.c defs.h buffer.h command.h[24;1H             cc -c files.c[K[25;1H     utils.o : utils.c defs.h[26;1H             cc -c utils.c[K[27;1H     clean :[K[61;1H[61;1H[1;1H   In this example, all the C files include `defs.h', but only those[61;1H[61;1H[1;1Hdefining editing commands include `command.h', and only low level files[2;1Hthat change the editor buffer include `buffer.h'.[K[3;1H[K[4;1H     edit : main.o kbd.o command.o display.o \[K[5;1H            insert.o search.o files.o utils.o[6;1H             cc -o edit main.o kbd.o command.o display.o \[7;1H                        insert.o search.o files.o utils.o[8;1H[K[9;1H     main.o : main.c defs.h[K[10;1H             cc -c main.c[11;1H     kbd.o : kbd.c defs.h command.h[61;1H[61;1H[1;1Hthat change the editor buffer include `buffer.h'.[K[2;1H[K[3;1H     edit : main.o kbd.o command.o display.o \[4;1H            insert.o search.o files.o utils.o[K[5;1H             cc -o edit main.o kbd.o command.o display.o \[6;1H                        insert.o search.o files.o utils.o[K[7;1H[K[8;1H     main.o : main.c defs.h[9;1H             cc -c main.c[K[10;1H     kbd.o : kbd.c defs.h command.h[11;1H             cc -c kbd.c[K[12;1H     command.o : command.c defs.h command.h[13;1H             cc -c command.c[K[61;1H[61;1H[1;1H[K[2;1H     edit : main.o kbd.o command.o display.o \[3;1H            insert.o search.o files.o utils.o[K[4;1H             cc -o edit main.o kbd.o command.o display.o \[5;1H                        insert.o search.o files.o utils.o[K[6;1H[K[7;1H     main.o : main.c defs.h[8;1H             cc -c main.c[K[9;1H     kbd.o : kbd.c defs.h command.h[10;1H             cc -c kbd.c[K[11;1H     command.o : command.c defs.h command.h[12;1H             cc -c command.c[K[13;1H     display.o : display.c defs.h buffer.h[14;1H             cc -c display.c[15;1H     insert.o : insert.c defs.h buffer.h[K[16;1H             cc -c insert.c[K[17;1H     search.o : search.c defs.h buffer.h[K[18;1H             cc -c search.c[K[19;1H     files.o : files.c defs.h buffer.h command.h[20;1H             cc -c files.c[K[21;1H     utils.o : utils.c defs.h[K[22;1H             cc -c utils.c[K[23;1H     clean :[K[24;1H             rm edit main.o kbd.o command.o display.o \[25;1H                insert.o search.o files.o utils.o[26;1H[K[27;1HWe split each long line into two lines using backslash-newline; this is[28;1Hlike using one long line, but is easier to read.  [29;1H[K[30;1H   To use this makefile to create the executable file called `edit',[31;1Htype:[K[32;1H[K[33;1H     make[34;1H[K[35;1H   To use this makefile to delete the executable file and all the object[36;1Hfiles from the directory, type:[37;1H[K[38;1H     make clean[39;1H[K[40;1H   In the example makefile, the targets include the executable file[41;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[42;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[43;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[44;1H`cc -c kbd.c'.[K[45;1H[K[46;1H   When a target is a file, it needs to be recompiled or relinked if any[47;1Hof its prerequisites change.  In addition, any prerequisites that are[48;1Hthemselves automatically generated should be updated first.  In this[49;1Hexample, `edit' depends on each of the eight object files; the object[50;1Hfile `main.o' depends on the source file `main.c' and on the header[K[51;1Hfile `defs.h'.[K[52;1H[K[53;1H   A recipe may follow each line that contains a target and[54;1Hprerequisites.  These recipes say how to update the target file.  A tab[55;1Hcharacter (or whatever character is specified by the `.RECIPEPREFIX'[K[56;1Hvariable; *note Special Variables::) must come at the beginning of[K[57;1Hevery line in the recipe to distinguish recipes from other lines in the[58;1Hmakefile.  (Bear in mind that `make' does not know anything about how[59;1Hthe recipes work.  It is up to you to supply recipes that will update[60;1Hthe target file properly.  All `make' does is execute the recipe you[61;1Hhave specified when the target file needs to be updated.)  [61;1H[2;1H     edit : main.o kbd.o command.o display.o \[3;1H            insert.o search.o files.o utils.o[4;1H             cc -o edit main.o kbd.o command.o display.o \[5;1H                        insert.o search.o files.o utils.o[7;1H     main.o : main.c defs.h[8;1H             cc -c main.c[9;1H     kbd.o : kbd.c defs.h command.h[10;1H             cc -c kbd.c[11;1H     command.o : command.c defs.h command.h[12;1H             cc -c command.c[13;1H     display.o : display.c defs.h buffer.h[14;1H             cc -c display.c[15;1H     insert.o : insert.c defs.h buffer.h[16;1H             cc -c insert.c[17;1H     search.o : search.c defs.h buffer.h[18;1H             cc -c search.c[19;1H     files.o : files.c defs.h buffer.h command.h[20;1H             cc -c files.c[21;1H     utils.o : utils.c defs.h[22;1H             cc -c utils.c[23;1H     clean :[24;1H             rm edit main.o kbd.o command.o display.o \[25;1H                insert.o search.o files.o utils.o[27;1HWe split each long line into two lines using backslash-newline; this is[28;1Hlike using one long line, but is easier to read.  [30;1H   To use this makefile to create the executable file called `edit',[31;1Htype:[33;1H     make[35;1H   To use this makefile to delete the executable file and all the object[36;1Hfiles from the directory, type:[38;1H     make clean[40;1H   In the example makefile, the targets include the executable file[41;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[42;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[43;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[44;1H`cc -c kbd.c'.[46;1H   When a target is a file, it needs to be recompiled or relinked if any[47;1Hof its prerequisites change.  In addition, any prerequisites that are[48;1Hthemselves automatically generated should be updated first.  In this[49;1Hexample, `edit' depends on each of the eight object files; the object[50;1Hfile `main.o' depends on the source file `main.c' and on the header[51;1Hfile `defs.h'.[53;1H   A recipe may follow each line that contains a target and[54;1Hprerequisites.  These recipes say how to update the target file.  A tab[55;1Hcharacter (or whatever character is specified by the `.RECIPEPREFIX'[56;1Hvariable; *note Special Variables::) must come at the beginning of[57;1Hevery line in the recipe to distinguish recipes from other lines in the[58;1Hmakefile.  (Bear in mind that `make' does not know anything about how[59;1Hthe recipes work.  It is up to you to supply recipes that will update[60;1Hthe target file properly.  All `make' does is execute the recipe you[61;1Hhave specified when the target file needs to be updated.)  [62;1H[7m--zz-Info: (make.info.gz)Simple Makefile, 85 lines --14%-- Subfile: make.info-1.gz--------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H     edit : main.o kbd.o command.o display.o \[2;1H            insert.o search.o files.o utils.o[K[3;1H             cc -o edit main.o kbd.o command.o display.o \[4;1H                        insert.o search.o files.o utils.o[K[5;1H[K[6;1H     main.o : main.c defs.h[7;1H             cc -c main.c[K[8;1H     kbd.o : kbd.c defs.h command.h[9;1H             cc -c kbd.c[K[10;1H     command.o : command.c defs.h command.h[11;1H             cc -c command.c[K[12;1H     display.o : display.c defs.h buffer.h[13;1H             cc -c display.c[K[14;1H     insert.o : insert.c defs.h buffer.h[15;1H             cc -c insert.c[K[16;1H     search.o : search.c defs.h buffer.h[17;1H             cc -c search.c[K[18;1H     files.o : files.c defs.h buffer.h command.h[19;1H             cc -c files.c[K[20;1H     utils.o : utils.c defs.h[61;1H[61;1H[1;1H            insert.o search.o files.o utils.o[K[2;1H             cc -o edit main.o kbd.o command.o display.o \[3;1H                        insert.o search.o files.o utils.o[K[4;1H[K[5;1H     main.o : main.c defs.h[6;1H             cc -c main.c[K[7;1H     kbd.o : kbd.c defs.h command.h[8;1H             cc -c kbd.c[K[9;1H     command.o : command.c defs.h command.h[61;1H[61;1H[1;1H             cc -o edit main.o kbd.o command.o display.o \[2;1H                        insert.o search.o files.o utils.o[K[3;1H[K[4;1H     main.o : main.c defs.h[5;1H             cc -c main.c[K[6;1H     kbd.o : kbd.c defs.h command.h[7;1H             cc -c kbd.c[K[8;1H     command.o : command.c defs.h command.h[9;1H             cc -c command.c[K[10;1H     display.o : display.c defs.h buffer.h[K[11;1H             cc -c display.c[12;1H     insert.o : insert.c defs.h buffer.h[K[13;1H             cc -c insert.c[K[61;1H[61;1H[1;1H                        insert.o search.o files.o utils.o[K[2;1H[K[3;1H     main.o : main.c defs.h[4;1H             cc -c main.c[K[5;1H     kbd.o : kbd.c defs.h command.h[6;1H             cc -c kbd.c[K[7;1H     command.o : command.c defs.h command.h[8;1H             cc -c command.c[K[9;1H     display.o : display.c defs.h buffer.h[10;1H             cc -c display.c[K[11;1H     insert.o : insert.c defs.h buffer.h[12;1H             cc -c insert.c[K[13;1H     search.o : search.c defs.h buffer.h[61;1H[61;1H[1;1H[K[2;1H     main.o : main.c defs.h[3;1H             cc -c main.c[K[4;1H     kbd.o : kbd.c defs.h command.h[5;1H             cc -c kbd.c[K[6;1H     command.o : command.c defs.h command.h[7;1H             cc -c command.c[K[8;1H     display.o : display.c defs.h buffer.h[9;1H             cc -c display.c[K[10;1H     insert.o : insert.c defs.h buffer.h[11;1H             cc -c insert.c[K[12;1H     search.o : search.c defs.h buffer.h[13;1H             cc -c search.c[K[14;1H     files.o : files.c defs.h buffer.h command.h[15;1H             cc -c files.c[K[16;1H     utils.o : utils.c defs.h[K[17;1H             cc -c utils.c[K[18;1H     clean :[K[19;1H             rm edit main.o kbd.o command.o display.o \[20;1H                insert.o search.o files.o utils.o[21;1H[K[22;1HWe split each long line into two lines using backslash-newline; this is[23;1Hlike using one long line, but is easier to read.  [24;1H[K[25;1H   To use this makefile to create the executable file called `edit',[26;1Htype:[27;1H[K[28;1H     make[K[61;1H[61;1H[1;1H     main.o : main.c defs.h[2;1H             cc -c main.c[K[3;1H     kbd.o : kbd.c defs.h command.h[4;1H             cc -c kbd.c[K[5;1H     command.o : command.c defs.h command.h[6;1H             cc -c command.c[K[7;1H     display.o : display.c defs.h buffer.h[8;1H             cc -c display.c[K[9;1H     insert.o : insert.c defs.h buffer.h[10;1H             cc -c insert.c[K[11;1H     search.o : search.c defs.h buffer.h[12;1H             cc -c search.c[K[13;1H     files.o : files.c defs.h buffer.h command.h[61;1H[61;1H[1;1H             cc -c main.c[K[2;1H     kbd.o : kbd.c defs.h command.h[3;1H             cc -c kbd.c[K[4;1H     command.o : command.c defs.h command.h[5;1H             cc -c command.c[K[6;1H     display.o : display.c defs.h buffer.h[7;1H             cc -c display.c[K[8;1H     insert.o : insert.c defs.h buffer.h[9;1H             cc -c insert.c[K[10;1H     search.o : search.c defs.h buffer.h[11;1H             cc -c search.c[K[12;1H     files.o : files.c defs.h buffer.h command.h[13;1H             cc -c files.c[K[61;1H[61;1H[1;1H     kbd.o : kbd.c defs.h command.h[2;1H             cc -c kbd.c[K[3;1H     command.o : command.c defs.h command.h[4;1H             cc -c command.c[K[5;1H     display.o : display.c defs.h buffer.h[6;1H             cc -c display.c[K[7;1H     insert.o : insert.c defs.h buffer.h[8;1H             cc -c insert.c[K[9;1H     search.o : search.c defs.h buffer.h[10;1H             cc -c search.c[K[11;1H     files.o : files.c defs.h buffer.h command.h[12;1H             cc -c files.c[K[13;1H     utils.o : utils.c defs.h[61;1H[61;1H[1;1H             cc -c kbd.c[K[2;1H     command.o : command.c defs.h command.h[3;1H             cc -c command.c[K[4;1H     display.o : display.c defs.h buffer.h[5;1H             cc -c display.c[K[6;1H     insert.o : insert.c defs.h buffer.h[7;1H             cc -c insert.c[K[8;1H     search.o : search.c defs.h buffer.h[9;1H             cc -c search.c[K[10;1H     files.o : files.c defs.h buffer.h command.h[11;1H             cc -c files.c[K[12;1H     utils.o : utils.c defs.h[13;1H             cc -c utils.c[K[14;1H     clean :[K[15;1H             rm edit main.o kbd.o command.o display.o \[16;1H                insert.o search.o files.o utils.o[17;1H[K[18;1HWe split each long line into two lines using backslash-newline; this is[19;1Hlike using one long line, but is easier to read.  [K[20;1H[K[21;1H   To use this makefile to create the executable file called `edit',[22;1Htype:[K[23;1H[K[24;1H     make[25;1H[K[26;1H   To use this makefile to delete the executable file and all the object[27;1Hfiles from the directory, type:[28;1H[K[29;1H     make clean[30;1H[K[31;1H   In the example makefile, the targets include the executable file[32;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[33;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[34;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[35;1H`cc -c kbd.c'.[K[36;1H[K[37;1H   When a target is a file, it needs to be recompiled or relinked if any[38;1Hof its prerequisites change.  In addition, any prerequisites that are[39;1Hthemselves automatically generated should be updated first.  In this[40;1Hexample, `edit' depends on each of the eight object files; the object[41;1Hfile `main.o' depends on the source file `main.c' and on the header[K[42;1Hfile `defs.h'.[K[43;1H[K[44;1H   A recipe may follow each line that contains a target and[45;1Hprerequisites.  These recipes say how to update the target file.  A tab[46;1Hcharacter (or whatever character is specified by the `.RECIPEPREFIX'[K[47;1Hvariable; *note Special Variables::) must come at the beginning of[K[48;1Hevery line in the recipe to distinguish recipes from other lines in the[49;1Hmakefile.  (Bear in mind that `make' does not know anything about how[50;1Hthe recipes work.  It is up to you to supply recipes that will update[51;1Hthe target file properly.  All `make' does is execute the recipe you[52;1Hhave specified when the target file needs to be updated.)  [53;1H[K[54;1H   The target `clean' is not a file, but merely the name of an action.[K[55;1HSince you normally do not want to carry out the actions in this rule,[56;1H`clean' is not a prerequisite of any other rule.  Consequently, `make'[57;1Hnever does anything with it unless you tell it specifically.  Note that[58;1Hthis rule not only is not a prerequisite, it also does not have any[K[59;1Hprerequisites, so the only purpose of the rule is to run the specified[60;1Hrecipe.  Targets that do not refer to files but are just actions are[61;1Hcalled "phony targets".  *Note Phony Targets::, for information about[61;1H[1;1H             cc -c kbd.c[2;1H     command.o : command.c defs.h command.h[3;1H             cc -c command.c[4;1H     display.o : display.c defs.h buffer.h[5;1H             cc -c display.c[6;1H     insert.o : insert.c defs.h buffer.h[7;1H             cc -c insert.c[8;1H     search.o : search.c defs.h buffer.h[9;1H             cc -c search.c[10;1H     files.o : files.c defs.h buffer.h command.h[11;1H             cc -c files.c[12;1H     utils.o : utils.c defs.h[13;1H             cc -c utils.c[14;1H     clean :[15;1H             rm edit main.o kbd.o command.o display.o \[16;1H                insert.o search.o files.o utils.o[18;1HWe split each long line into two lines using backslash-newline; this is[19;1Hlike using one long line, but is easier to read.  [21;1H   To use this makefile to create the executable file called `edit',[22;1Htype:[24;1H     make[26;1H   To use this makefile to delete the executable file and all the object[27;1Hfiles from the directory, type:[29;1H     make clean[31;1H   In the example makefile, the targets include the executable file[32;1H`edit', and the object files `main.o' and `kbd.o'.  The prerequisites[33;1Hare files such as `main.c' and `defs.h'.  In fact, each `.o' file is[34;1Hboth a target and a prerequisite.  Recipes include `cc -c main.c' and[35;1H`cc -c kbd.c'.[37;1H   When a target is a file, it needs to be recompiled or relinked if any[38;1Hof its prerequisites change.  In addition, any prerequisites that are[39;1Hthemselves automatically generated should be updated first.  In this[40;1Hexample, `edit' depends on each of the eight object files; the object[41;1Hfile `main.o' depends on the source file `main.c' and on the header[42;1Hfile `defs.h'.[44;1H   A recipe may follow each line that contains a target and[45;1Hprerequisites.  These recipes say how to update the target file.  A tab[46;1Hcharacter (or whatever character is specified by the `.RECIPEPREFIX'[47;1Hvariable; *note Special Variables::) must come at the beginning of[48;1Hevery line in the recipe to distinguish recipes from other lines in the[49;1Hmakefile.  (Bear in mind that `make' does not know anything about how[50;1Hthe recipes work.  It is up to you to supply recipes that will update[51;1Hthe target file properly.  All `make' does is execute the recipe you[52;1Hhave specified when the target file needs to be updated.)  [54;1H   The target `clean' is not a file, but merely the name of an action.[55;1HSince you normally do not want to carry out the actions in this rule,[56;1H`clean' is not a prerequisite of any other rule.  Consequently, `make'[57;1Hnever does anything with it unless you tell it specifically.  Note that[58;1Hthis rule not only is not a prerequisite, it also does not have any[59;1Hprerequisites, so the only purpose of the rule is to run the specified[60;1Hrecipe.  Targets that do not refer to files but are just actions are[61;1Hcalled "phony targets".  *Note Phony Targets::, for information about[62;1H[7m--zz-Info: (make.info.gz)Simple Makefile, 85 lines --24%-- Subfile: make.info-1.gz--------------------------------------------------------------------------------------------------------------------------[0m[61;1H[1;1H     command.o : command.c defs.h command.h[61;1H[61;1H[1;1H             cc -c command.c[K[61;1H[61;1H[1;1H     display.o : display.c defs.h buffer.h[2;1H             cc -c display.c[K[3;1H     insert.o : insert.c defs.h buffer.h[4;1H             cc -c insert.c[K[5;1H     search.o : search.c defs.h buffer.h[6;1H             cc -c search.c[K[61;1H[61;1H[1;1HFile: make.info,  Node: How Make Works,  Next: Variables Simplify,  Prev: Simple Makefile,  Up: Introduction[1;1H[1;1H[1;1HFile: make.info,  Node: How Make Works,  Next: Variables Simplify,  Prev: Simple Makefile,  Up: Introduction[2;1H[K[3;1H2.3 How `make' Processes a Makefile[K[4;1H===================================[5;1H[K[6;1HBy default, `make' starts with the first target (not targets whose[7;1Hnames start with `.').  This is called the "default goal".  ("Goals"[8;1Hare the targets that `make' strives ultimately to update.    You can[9;1Hoverride this behavior using the command line (*note Arguments to[10;1HSpecify the Goals: Goals.) or with the `.DEFAULT_GOAL' special variable[11;1H(*note Other Special Variables: Special Variables.).  [12;1H[K[13;1H   In the simple example of the previous section, the default goal is to[14;1Hupdate the executable program `edit'; therefore, we put that rule first.[15;1H[K[16;1H   Thus, when you give the command:[K[18;1H     make[K[19;1H[K[20;1H`make' reads the makefile in the current directory and begins by[21;1Hprocessing the first rule.  In the example, this rule is for relinking[22;1H`edit'; but before `make' can fully process this rule, it must process[23;1Hthe rules for the files that `edit' depends on, which in this case are[24;1Hthe object files.  Each of these files is processed according to its[25;1Hown rule.  These rules say to update each `.o' file by compiling its[26;1Hsource file.  The recompilation must be done if the source file, or any[K[27;1Hof the header files named as prerequisites, is more recent than the[28;1Hobject file, or if the object file does not exist.[29;1H[K[30;1H   The other rules are processed because their targets appear as[31;1Hprerequisites of the goal.  If some other rule is not depended on by the[32;1Hgoal (or anything it depends on, etc.), that rule is not processed,[K[2;1H[2;1H[1;1HFile: make.info,  Node: How Make Works,  Next: Variables Simplify,  Prev: Simple Makefile,  Up: Introduction[3;1H[3;1H[1;1HFile: make.info,  Node: How Make Works,  Next: Variables Simplify,  Prev: Simple Makefile,  Up: Introduction[3;1H2.3 How `make' Processes a Makefile[4;1H===================================[6;1HBy default, `make' starts with the first target (not targets whose[7;1Hnames start with `.').  This is called the "default goal".  ("Goals"[8;1Hare the targets that `make' strives ultimately to update.    You can[9;1Hoverride this behavior using the command line (*note Arguments to[10;1HSpecify the Goals: Goals.) or with the `.DEFAULT_GOAL' special variable[11;1H(*note Other Special Variables: Special Variables.).  [13;1H   In the simple example of the previous section, the default goal is to[4;1H[4;1H[1;1HFile: make.info,  Node: How Make Works,  Next: Variables Simplify,  Prev: Simple Makefile,  Up: Introduction[3;1H2.3 How `make' Processes a Makefile[4;1H===================================[6;1HBy default, `make' starts with the first target (not targets whose[7;1Hnames start with `.').  This is called the "default goal".  ("Goals"[8;1Hare the targets that `make' strives ultimately to update.    You can[9;1Hoverride this behavior using the command line (*note Arguments to[10;1HSpecify the Goals: Goals.) or with the `.DEFAULT_GOAL' special variable[11;1H(*note Other Special Variables: Special Variables.).  [13;1H   In the simple example of the previous section, the default goal is to[14;1Hupdate the executable program `edit'; therefore, we put that rule first.[16;1H   Thus, when you give the command:[18;1H     make[20;1H`make' reads the makefile in the current directory and begins by[21;1Hprocessing the first rule.  In the example, this rule is for relinking[22;1H`edit'; but before `make' can fully process this rule, it must process[23;1Hthe rules for the files that `edit' depends on, which in this case are[24;1Hthe object files.  Each of these files is processed according to its[25;1Hown rule.  These rules say to update each `.o' file by compiling its[26;1Hsource file.  The recompilation must be done if the source file, or any[27;1Hof the header files named as prerequisites, is more recent than the[28;1Hobject file, or if the object file does not exist.[30;1H   The other rules are processed because their targets appear as[31;1Hprerequisites of the goal.  If some other rule is not depended on by the[32;1Hgoal (or anything it depends on, etc.), that rule is not processed,[33;1Hunless you tell `make' to do so (with a command such as `make clean').[34;1H[K[35;1H   Before recompiling an object file, `make' considers updating its[36;1Hprerequisites, the source file and header files.  This makefile does not[37;1Hspecify anything to be done for them--the `.c' and `.h' files are not[K[38;1Hthe targets of any rules--so `make' does nothing for these files.  But[39;1H`make' would update automatically generated C programs, such as those[40;1Hmade by Bison or Yacc, by their own rules at this time.[K[41;1H[K[42;1H   After recompiling whichever object files need it, `make' decides[43;1Hwhether to relink `edit'.  This must be done if the file `edit' does[44;1Hnot exist, or if any of the object files are newer than it.  If an[45;1Hobject file was just recompiled, it is now newer than `edit', so `edit'[46;1His relinked.  [K[47;1H[K[48;1H   Thus, if we change the file `insert.c' and run `make', `make' will[K[49;1Hcompile that file to update `insert.o', and then link `edit'.  If we[K[50;1Hchange the file `command.h' and run `make', `make' will recompile the[51;1Hobject files `kbd.o', `command.o' and `files.o' and then link the file[52;1H`edit'.[K[5;1H[1;1HFile: make.info,  Node: How Make Works,  Next: Variables Simplify,  Prev: Simple Makefile,  Up: Introduction[3;1H2.3 How `make' Processes a Makefile[4;1H===================================[6;1HBy default, `make' starts with the first target (not targets whose[7;1Hnames start with `.').  This is called the "default goal".  ("Goals"[8;1Hare the targets that `make' strives ultimately to update.    You can[9;1Hoverride this behavior using the command line (*note Arguments to[10;1HSpecify the Goals: Goals.) or with the `.DEFAULT_GOAL' special variable[11;1H(*note Other Special Variables: Special Variables.).  [13;1H   In the simple example of the previous section, the default goal is to[14;1Hupdate the executable program `edit'; therefore, we put that rule first.[16;1H   Thus, when you give the command:[18;1H     make[20;1H`make' reads the makefile in the current directory and begins by[21;1Hprocessing the first rule.  In the example, this rule is for relinking[22;1H`edit'; but before `make' can fully process this rule, it must process[23;1Hthe rules for the files that `edit' depends on, which in this case are[24;1Hthe object files.  Each of these files is processed according to its[25;1Hown rule.  These rules say to update each `.o' file by compiling its[26;1Hsource file.  The recompilation must be done if the source file, or any[27;1Hof the header files named as prerequisites, is more recent than the[28;1Hobject file, or if the object file does not exist.[30;1H   The other rules are processed because their targets appear as[31;1Hprerequisites of the goal.  If some other rule is not depended on by the[32;1Hgoal (or anything it depends on, etc.), that rule is not processed,[33;1Hunless you tell `make' to do so (with a command such as `make clean').[35;1H   Before recompiling an object file, `make' considers updating its[36;1Hprerequisites, the source file and header files.  This makefile does not[37;1Hspecify anything to be done for them--the `.c' and `.h' files are not[38;1Hthe targets of any rules--so `make' does nothing for these files.  But[39;1H`make' would update automatically generated C programs, such as those[40;1Hmade by Bison or Yacc, by their own rules at this time.[42;1H   After recompiling whichever object files need it, `make' decides[43;1Hwhether to relink `edit'.  This must be done if the file `edit' does[44;1Hnot exist, or if any of the object files are newer than it.  If an[45;1Hobject file was just recompiled, it is now newer than `edit', so `edit'[46;1His relinked.  [48;1H   Thus, if we change the file `insert.c' and run `make', `make' will[49;1Hcompile that file to update `insert.o', and then link `edit'.  If we[50;1Hchange the file `command.h' and run `make', `make' will recompile the[51;1Hobject files `kbd.o', `command.o' and `files.o' and then link the file[52;1H`edit'.[54;1H[K[55;1H[K[56;1H[K[57;1H[K[58;1H[K[59;1H[K[60;1H[K[61;1H[K[62;1H[7m--zz-Info: (make.info.gz)How Make Works, 53 lines --All-- Subfile: make.info-1.gz---------------------------------------------------------------------------------------------------------------------------[0m[5;1H[6;1H[6;1H[7;1H[7;1H[8;1H[8;1H[9;1H[9;1H[10;1H[10;1H[11;1H[11;1H[12;1H[12;1H[13;1H[13;1H[14;1H[14;1H[15;1H[15;1H[16;1H[16;1H[17;1H[17;1H[18;1H[18;1H[19;1H[19;1H[20;1H[20;1H[21;1H[21;1H[22;1H[22;1H[23;1H[23;1H[24;1H[24;1H[25;1H[25;1H[26;1H[26;1H[27;1H[27;1H[28;1H[28;1H[29;1H[29;1H[30;1H[30;1H[31;1H[31;1H[32;1H[32;1H[33;1H[33;1H[34;1H[34;1H[35;1H[35;1H[36;1H[36;1H[37;1H[37;1H[38;1H[38;1H[39;1H[39;1H[40;1H[40;1H[41;1H[41;1H[42;1H[42;1H[43;1H[43;1H[44;1H[44;1H[45;1H[45;1H[46;1H[46;1H[47;1H[47;1H[48;1H[48;1H[49;1H[49;1H[50;1H[50;1H[51;1H[51;1H[52;1H[52;1H[53;1H[53;1H[1;1HFile: make.info,  Node: Variables Simplify,  Next: make Deduces,  Prev: How Make Works,  Up: Introduction[K[1;1H[1;1H[1;1HFile: make.info,  Node: Variables Simplify,  Next: make Deduces,  Prev: How Make Works,  Up: Introduction[3;1H2.4 Variables Make Makefiles Simpler[4;1H====================================[6;1HIn our example, we had to list all the object files twice in the rule[7;1Hfor `edit' (repeated here):[K[8;1H[K[9;1H     edit : main.o kbd.o command.o display.o \[K[10;1H                   insert.o search.o files.o utils.o[K[11;1H             cc -o edit main.o kbd.o command.o display.o \[12;1H                        insert.o search.o files.o utils.o[13;1H[K[14;1H   Such duplication is error-prone; if a new object file is added to the[15;1Hsystem, we might add it to one list and forget the other.  We can[16;1Heliminate the risk and simplify the makefile by using a variable.[17;1H"Variables" allow a text string to be defined once and substituted in[18;1Hmultiple places later (*note How to Use Variables: Using Variables.).[20;1H   It is standard practice for every makefile to have a variable named[21;1H`objects', `OBJECTS', `objs', `OBJS', `obj', or `OBJ' which is a list[K[22;1Hof all object file names.  We would define such a variable `objects'[K[23;1Hwith a line like this in the makefile:[K[24;1H[K[25;1H     objects = main.o kbd.o command.o display.o \[K[26;1H               insert.o search.o files.o utils.o[K[27;1H[K[28;1HThen, each place we want to put a list of the object file names, we can[29;1Hsubstitute the variable's value by writing `$(objects)' (*note How to[30;1HUse Variables: Using Variables.).[K[31;1H[K[32;1H   Here is how the complete simple makefile looks when you use a[K[33;1Hvariable for the object files:[K[35;1H     objects = main.o kbd.o command.o display.o \[K[36;1H               insert.o search.o files.o utils.o[K[37;1H[K[38;1H     edit : $(objects)[K[39;1H             cc -o edit $(objects)[K[40;1H     main.o : main.c defs.h[K[41;1H             cc -c main.c[42;1H     kbd.o : kbd.c defs.h command.h[K[43;1H             cc -c kbd.c[K[44;1H     command.o : command.c defs.h command.h[K[45;1H             cc -c command.c[K[46;1H     display.o : display.c defs.h buffer.h[47;1H             cc -c display.c[48;1H     insert.o : insert.c defs.h buffer.h[K[49;1H             cc -c insert.c[K[50;1H     search.o : search.c defs.h buffer.h[K[51;1H             cc -c search.c[K[52;1H     files.o : files.c defs.h buffer.h command.h[53;1H             cc -c files.c[54;1H     utils.o : utils.c defs.h[55;1H             cc -c utils.c[56;1H     clean :[57;1H             rm edit $(objects)[2;1H[1;1HFile: make.info,  Node: Variables Simplify,  Next: make Deduces,  Prev: How Make Works,  Up: Introduction[3;1H2.4 Variables Make Makefiles Simpler[4;1H====================================[6;1HIn our example, we had to list all the object files twice in the rule[7;1Hfor `edit' (repeated here):[9;1H     edit : main.o kbd.o command.o display.o \[10;1H                   insert.o search.o files.o utils.o[11;1H             cc -o edit main.o kbd.o command.o display.o \[12;1H                        insert.o search.o files.o utils.o[14;1H   Such duplication is error-prone; if a new object file is added to the[15;1Hsystem, we might add it to one list and forget the other.  We can[16;1Heliminate the risk and simplify the makefile by using a variable.[17;1H"Variables" allow a text string to be defined once and substituted in[18;1Hmultiple places later (*note How to Use Variables: Using Variables.).[20;1H   It is standard practice for every makefile to have a variable named[21;1H`objects', `OBJECTS', `objs', `OBJS', `obj', or `OBJ' which is a list[22;1Hof all object file names.  We would define such a variable `objects'[23;1Hwith a line like this in the makefile:[25;1H     objects = main.o kbd.o command.o display.o \[26;1H               insert.o search.o files.o utils.o[28;1HThen, each place we want to put a list of the object file names, we can[29;1Hsubstitute the variable's value by writing `$(objects)' (*note How to[30;1HUse Variables: Using Variables.).[32;1H   Here is how the complete simple makefile looks when you use a[33;1Hvariable for the object files:[35;1H     objects = main.o kbd.o command.o display.o \[36;1H               insert.o search.o files.o utils.o[38;1H     edit : $(objects)[39;1H             cc -o edit $(objects)[40;1H     main.o : main.c defs.h[41;1H             cc -c main.c[42;1H     kbd.o : kbd.c defs.h command.h[43;1H             cc -c kbd.c[44;1H     command.o : command.c defs.h command.h[45;1H             cc -c command.c[46;1H     display.o : display.c defs.h buffer.h[47;1H             cc -c display.c[48;1H     insert.o : insert.c defs.h buffer.h[49;1H             cc -c insert.c[50;1H     search.o : search.c defs.h buffer.h[51;1H             cc -c search.c[52;1H     files.o : files.c defs.h buffer.h command.h[53;1H             cc -c files.c[54;1H     utils.o : utils.c defs.h[55;1H             cc -c utils.c[56;1H     clean :[57;1H             rm edit $(objects)[62;1H[7m--zz-Info: (make.info.gz)Variables Simplify, 58 lines --All-- Subfile: make.info-1.gz-----------------------------------------------------------------------------------------------------------------------[0m[2;1H[3;1H[3;1H[4;1H[4;1H[5;1H[5;1H[6;1H[6;1H[7;1H[7;1H[8;1H[8;1H[9;1H[9;1H[10;1H[10;1H[11;1H[11;1H[12;1H[12;1H[13;1H[13;1H[14;1H[14;1H[15;1H[15;1H[16;1H[16;1H[17;1H[17;1H[18;1H[18;1H[19;1H[19;1H[20;1H[20;1H[21;1H[21;1H[22;1H[22;1H[23;1H[23;1H[24;1H[24;1H[25;1H[25;1H[26;1H[26;1H[27;1H[27;1H[28;1H[28;1H[29;1H[29;1H[30;1H[30;1H[31;1H[31;1H[32;1H[32;1H[33;1H[33;1H[34;1H[34;1H[35;1H[35;1H[36;1H[36;1H[37;1H[37;1H[38;1H[38;1H[39;1H[39;1H[40;1H[40;1H[41;1H[41;1H[42;1H[42;1H[43;1H[43;1H[44;1H[44;1H[45;1H[45;1H[46;1H[46;1H[47;1H[47;1H[48;1H[48;1H[49;1H[49;1H[50;1H[50;1H[51;1H[51;1H[52;1H[52;1H[53;1H[53;1H[54;1H[54;1H[55;1H[55;1H[54;30H[54;30H[63;1HC-x-[54;30H[63;1HUnknown command (C-x C-x).[63;1HUnknown command (C-x C-x).[54;30H[63;1H[K[63;1HCannot delete the last window.[63;1HCannot delete the last window.[54;30H[63;1H[K[54;29H[54;29H[55;27H[55;27H[56;13H[56;13H[57;29H[57;29H[58;1H[58;1H[1;1HFile: make.info,  Node: make Deduces,  Next: Combine By Prerequisite,  Prev: Variables Simplify,  Up: Introduction[3;1H2.5 Letting `make' Deduce the Recipes[4;1H=====================================[6;1HIt is not necessary to spell out the recipes for compiling the[K[7;1Hindividual C source files, because `make' can figure them out: it has an[8;1H"implicit rule" for updating a `.o' file from a correspondingly named[9;1H`.c' file using a `cc -c' command.  For example, it will use the recipe[10;1H`cc -c main.c -o main.o' to compile `main.c' into `main.o'.  We can[11;1Htherefore omit the recipes from the rules for the object files.  *Note[12;1HUsing Implicit Rules: Implicit Rules.[K[14;1H   When a `.c' file is used automatically in this way, it is also[K[15;1Hautomatically added to the list of prerequisites.  We can therefore omit[16;1Hthe `.c' files from the prerequisites, provided we omit the recipe.[17;1H[K[18;1H   Here is the entire example, with both of these changes, and a[K[19;1Hvariable `objects' as suggested above:[20;1H[K[21;1H     objects = main.o kbd.o command.o display.o \[K[22;1H               insert.o search.o files.o utils.o[K[23;1H[K[24;1H     edit : $(objects)[25;1H             cc -o edit $(objects)[K[26;1H[K[27;1H     main.o : defs.h[28;1H     kbd.o : defs.h command.h[K[29;1H     command.o : defs.h command.h[K[30;1H     display.o : defs.h buffer.h[K[31;1H     insert.o : defs.h buffer.h[32;1H     search.o : defs.h buffer.h[K[33;1H     files.o : defs.h buffer.h command.h[34;1H     utils.o : defs.h[35;1H[K[36;1H     .PHONY : clean[K[37;1H     clean :[38;1H             rm edit $(objects)[39;1H[K[40;1HThis is how we would write the makefile in actual practice.  (The[41;1Hcomplications associated with `clean' are described elsewhere.  See[42;1H*note Phony Targets::, and *note Errors in Recipes: Errors.)[43;1H[K[44;1H   Because implicit rules are so convenient, they are important.  You[45;1Hwill see them used frequently.[46;1H[K[47;1H[K[48;1H[K[49;1H[K[50;1H[K[51;1H[K[52;1H[K[53;1H[K[54;1H[K[55;1H[K[56;1H[K[57;1H[K[62;1H[7m--zz-Info: (make.info.gz)make Deduces, 46 lines --All-- Subfile: make.info-1.gz-----------------------------------------------------------------------------------------------------------------------------[0m[1;29H[1;29H[2;1H[2;1H[3;29H[3;29H[4;29H[4;29H[5;1H[5;1H[6;29H[6;29H[7;29H[7;29H[8;29H[8;29H[9;29H[9;29H[10;29H[10;29H[11;29H[11;29H[12;29H[12;29H[13;1H[13;1H[14;29H[14;29H[15;29H[15;29H[16;29H[16;29H[17;1H[17;1H[18;29H[18;29H[19;29H[19;29H[20;1H[20;1H[21;29H[21;29H[22;29H[22;29H[23;1H[23;1H[24;23H[24;23H[25;29H[25;29H[26;1H[26;1H[27;21H[27;21H[28;29H[28;29H[29;29H[29;29H[30;29H[30;29H[31;29H[31;29H[32;29H[32;29H[33;29H[33;29H[34;22H[34;22H[35;1H[35;1H[36;20H[36;20H[37;13H[37;13H[38;29H[38;29H[39;1H[39;1H[40;29H[40;29H[41;29H[41;29H[42;29H[42;29H[43;1H[43;1H[44;29H[44;29H[45;29H[45;29H[46;1H[46;1H[1;1HFile: make.info,  Node: Combine By Prerequisite,  Next: Cleanup,  Prev: make Deduces,  Up: Introduction[K[1;29H[1;29H[1;1HFile: make.info,  Node: Combine By Prerequisite,  Next: Cleanup,  Prev: make Deduces,  Up: Introduction[3;1H2.6 Another Style of Makefile[K[4;1H=============================[K[6;1HWhen the objects of a makefile are created only by implicit rules, an[7;1Halternative style of makefile is possible.  In this style of makefile,[K[8;1Hyou group entries by their prerequisites instead of by their targets.[9;1HHere is what one looks like:[K[10;1H[K[11;1H     objects = main.o kbd.o command.o display.o \[K[12;1H               insert.o search.o files.o utils.o[14;1H     edit : $(objects)[K[15;1H             cc -o edit $(objects)[K[16;1H[K[17;1H     $(objects) : defs.h[18;1H     kbd.o command.o files.o : command.h[K[19;1H     display.o insert.o search.o files.o : buffer.h[21;1HHere `defs.h' is given as a prerequisite of all the object files;[22;1H`command.h' and `buffer.h' are prerequisites of the specific object[23;1Hfiles listed for them.[24;1H[K[25;1H   Whether this is better is a matter of taste: it is more compact, but[26;1Hsome people dislike it because they find it clearer to put all the[27;1Hinformation about each target in one place.[28;1H[K[2;1H[1;1HFile: make.info,  Node: Combine By Prerequisite,  Next: Cleanup,  Prev: make Deduces,  Up: Introduction[3;1H2.6 Another Style of Makefile[4;1H=============================[6;1HWhen the objects of a makefile are created only by implicit rules, an[7;1Halternative style of makefile is possible.  In this style of makefile,[8;1Hyou group entries by their prerequisites instead of by their targets.[9;1HHere is what one looks like:[11;1H     objects = main.o kbd.o command.o display.o \[12;1H               insert.o search.o files.o utils.o[14;1H     edit : $(objects)[15;1H             cc -o edit $(objects)[17;1H     $(objects) : defs.h[18;1H     kbd.o command.o files.o : command.h[19;1H     display.o insert.o search.o files.o : buffer.h[21;1HHere `defs.h' is given as a prerequisite of all the object files;[22;1H`command.h' and `buffer.h' are prerequisites of the specific object[23;1Hfiles listed for them.[25;1H   Whether this is better is a matter of taste: it is more compact, but[26;1Hsome people dislike it because they find it clearer to put all the[27;1Hinformation about each target in one place.[29;1H[K[30;1H[K[31;1H[K[32;1H[K[33;1H[K[34;1H[K[36;1H[K[37;1H[K[38;1H[K[40;1H[K[41;1H[K[42;1H[K[44;1H[K[45;1H[K[62;1H[7m--zz-Info: (make.info.gz)Combine By Prerequisite, 28 lines --All-- Subfile: make.info-1.gz------------------------------------------------------------------------------------------------------------------[0m[2;1H[3;29H[3;29H[4;29H[4;29H[5;1H[5;1H[6;29H[6;29H[7;29H[7;29H[8;29H[8;29H[9;29H[9;29H[10;1H[10;1H[11;29H[11;29H[12;29H[12;29H[13;1H[13;1H[14;23H[14;23H[15;29H[15;29H[16;1H[16;1H[17;25H[17;25H[18;29H[18;29H[19;29H[19;29H[20;1H[20;1H[21;29H[21;29H[22;29H[22;29H[23;23H[23;23H[24;1H[24;1H[25;29H[25;29H[26;29H[26;29H[27;29H[27;29H[28;1H[28;1H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[K[1;29H[1;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[2;1H[2;1H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[3;29H[3;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[4;29H[4;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[5;1H[5;1H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[6;29H[6;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[7;29H[7;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[8;29H[8;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[9;29H[9;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[10;1H[10;1H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[11;29H[11;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[12;8H[12;8H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[13;1H[13;1H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[14;12H[14;12H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[15;29H[15;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[16;1H[16;1H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[17;29H[17;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[18;29H[18;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[19;6H[19;6H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[20;1H[20;1H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[21;20H[21;20H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[22;13H[22;13H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[23;29H[23;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[24;1H[24;1H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[25;29H[25;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[26;29H[26;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[27;29H[27;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[28;1H[28;1H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[29;29H[29;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[30;29H[30;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[31;29H[31;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[32;29H[32;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[33;1H[33;1H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[34;29H[34;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[35;29H[35;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[36;29H[36;29H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[37;17H[37;17H[1;1HFile: make.info,  Node: Cleanup,  Prev: Combine By Prerequisite,  Up: Introduction[38;1H[38;1H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[K[1;29H[1;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[2;1H[2;1H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[3;20H[3;20H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[4;20H[4;20H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[5;1H[5;1H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[6;29H[6;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[7;29H[7;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[8;1H[8;1H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[9;8H[9;8H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[10;1H[10;1H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[11;29H[11;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[12;29H[12;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[13;29H[13;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[14;29H[14;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[15;29H[15;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[16;29H[16;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[17;29H[17;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[18;29H[18;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[19;29H[19;29H[1;1HFile: make.info,  Node: Makefiles,  Next: Rules,  Prev: Introduction,  Up: Top[20;1H[20;1H[1;1HFile: make.info,  Node: Makefile Contents,  Next: Makefile Names,  Prev: Makefiles,  Up: Makefiles[1;29H[1;29H[1;1HFile: make.info,  Node: Makefile Contents,  Next: Makefile Names,  Prev: Makefiles,  Up: Makefiles[2;1H[2;1H[1;1HFile: make.info,  Node: Makefile Contents,  Next: Makefile Names,  Prev: Makefiles,  Up: Makefiles[3;27H[3;27H[1;1HFile: make.info,  Node: Makefile Contents,  Next: Makefile Names,  Prev: Makefiles,  Up: Makefiles[4;27H[4;27H[1;1HFile: make.info,  Node: Makefile Contents,  Next: Makefile Names,  Prev: Makefiles,  Up: Makefiles[5;1H[5;1H[1;1HFile: make.info,  Node: Makefile Contents,  Next: Makefile Names,  Prev: Makefiles,  Up: Makefiles[6;29H[6;29H[1;1HFile: make.info,  Node: Makefile Contents,  Next: Makefile Names,  Prev: Makefiles,  Up: Makefiles[7;29H[7;29H[1;1HFile: make.info,  Node: Makefile Contents,  Next: Makefile Names,  Prev: Makefiles,  Up: Makefiles[8;29H[8;29H[1;1HFile: make.info,  Node: Makefile Contents,  Next: Makefile Names,  Prev: Makefiles,  Up: Makefiles[9;1H[9;1H[1;1HFile: make.info,  Node: Makefile Contents,  Next: Makefile Names,  Prev: Makefiles,  Up: Makefiles[3;1H3.1 What Makefiles Contain[K[4;1H==========================[K[6;1HMakefiles contain five kinds of things: "explicit rules", "implicit[K[7;1Hrules", "variable definitions", "directives", and "comments".  Rules,[K[8;1Hvariables, and directives are described at length in later chapters.[K[9;1H[K[10;1H   * An "explicit rule" says when and how to remake one or more files,[11;1H     called the rule's "targets".  It lists the other files that the[12;1H     targets depend on, called the "prerequisites" of the target, and[13;1H     may also give a recipe to use to create or update the targets.[14;1H     *Note Writing Rules: Rules.[15;1H[K[16;1H   * An "implicit rule" says when and how to remake a class of files[17;1H     based on their names.  It describes how a target may depend on a[18;1H     file with a name similar to the target and gives a recipe to[19;1H     create or update such a target.  *Note Using Implicit Rules:[20;1H     Implicit Rules.[21;1H[K[22;1H   * A "variable definition" is a line that specifies a text string[23;1H     value for a variable that can be substituted into the text later.[24;1H     The simple makefile example shows a variable definition for[25;1H     `objects' as a list of all object files (*note Variables Make[K[26;1H     Makefiles Simpler: Variables Simplify.).[K[27;1H[K[28;1H   * A "directive" is an instruction for `make' to do something special[29;1H     while reading the makefile.  These include:[31;1H        * Reading another makefile (*note Including Other Makefiles:[32;1H          Include.).[34;1H        * Deciding (based on the values of variables) whether to use or[35;1H          ignore a part of the makefile (*note Conditional Parts of[36;1H          Makefiles: Conditionals.).[38;1H        * Defining a variable from a verbatim string containing[39;1H          multiple lines (*note Defining Multi-Line Variables:[40;1H          Multi-Line.).[42;1H   * `#' in a line of a makefile starts a "comment".  It and the rest[43;1H     of the line are ignored, except that a trailing backslash not[44;1H     escaped by another backslash will continue the comment across[45;1H     multiple lines.  A line containing just a comment (with perhaps[46;1H     spaces before it) is effectively blank, and is ignored.  If you[47;1H     want a literal `#', escape it with a backslash (e.g., `\#').[48;1H     Comments may appear on any line in the makefile, although they are[49;1H     treated specially in certain situations.[51;1H     You cannot use comments within variable references or function[52;1H     calls: any instance of `#' will be treated literally (rather than[53;1H     as the start of a comment) inside a variable reference or function[54;1H     call.[56;1H     Comments within a recipe are passed to the shell, just as with any[57;1H     other recipe text.  The shell decides how to interpret it: whether[58;1H     or not this is a comment is up to the shell.[60;1H     Within a `define' directive, comments are not ignored during the[61;1H     definition of the variable, but rather kept intact in the value of[10;29H[1;1HFile: make.info,  Node: Makefile Contents,  Next: Makefile Names,  Prev: Makefiles,  Up: Makefiles[3;1H3.1 What Makefiles Contain[4;1H==========================[6;1HMakefiles contain five kinds of things: "explicit rules", "implicit[7;1Hrules", "variable definitions", "directives", and "comments".  Rules,[8;1Hvariables, and directives are described at length in later chapters.[10;1H   * An "explicit rule" says when and how to remake one or more files,[11;1H     called the rule's "targets".  It lists the other files that the[12;1H     targets depend on, called the "prerequisites" of the target, and[13;1H     may also give a recipe to use to create or update the targets.[14;1H     *Note Writing Rules: Rules.[16;1H   * An "implicit rule" says when and how to remake a class of files[17;1H     based on their names.  It describes how a target may depend on a[18;1H     file with a name similar to the target and gives a recipe to[19;1H     create or update such a target.  *Note Using Implicit Rules:[20;1H     Implicit Rules.[22;1H   * A "variable definition" is a line that specifies a text string[23;1H     value for a variable that can be substituted into the text later.[24;1H     The simple makefile example shows a variable definition for[25;1H     `objects' as a list of all object files (*note Variables Make[26;1H     Makefiles Simpler: Variables Simplify.).[28;1H   * A "directive" is an instruction for `make' to do something special[29;1H     while reading the makefile.  These include:[31;1H        * Reading another makefile (*note Including Other Makefiles:[32;1H          Include.).[34;1H        * Deciding (based on the values of variables) whether to use or[35;1H          ignore a part of the makefile (*note Conditional Parts of[36;1H          Makefiles: Conditionals.).[38;1H        * Defining a variable from a verbatim string containing[39;1H          multiple lines (*note Defining Multi-Line Variables:[40;1H          Multi-Line.).[42;1H   * `#' in a line of a makefile starts a "comment".  It and the rest[43;1H     of the line are ignored, except that a trailing backslash not[44;1H     escaped by another backslash will continue the comment across[45;1H     multiple lines.  A line containing just a comment (with perhaps[46;1H     spaces before it) is effectively blank, and is ignored.  If you[47;1H     want a literal `#', escape it with a backslash (e.g., `\#').[48;1H     Comments may appear on any line in the makefile, although they are[49;1H     treated specially in certain situations.[51;1H     You cannot use comments within variable references or function[52;1H     calls: any instance of `#' will be treated literally (rather than[53;1H     as the start of a comment) inside a variable reference or function[54;1H     call.[56;1H     Comments within a recipe are passed to the shell, just as with any[57;1H     other recipe text.  The shell decides how to interpret it: whether[58;1H     or not this is a comment is up to the shell.[60;1H     Within a `define' directive, comments are not ignored during the[61;1H     definition of the variable, but rather kept intact in the value of[62;1H[7m--zz-Info: (make.info.gz)Makefile Contents, 65 lines --Top-- Subfile: make.info-1.gz------------------------------------------------------------------------------------------------------------------------[0m[10;29H[11;29H[11;29H[63;1HUnknown command (c).[63;1HUnknown command (c).[11;29H[63;1H[K[1;1HFile: dir       Node: Top       This is the top of the INFO tree[K[3;1H  This (the Directory node) gives a menu of major topics. [4;1H  Typing "q" exits, "?" lists all Info commands, "d" returns here,[5;1H  "h" gives a primer for first-timers,[6;1H  "mEmacs<Return>" visits the Emacs topic, etc.[K[7;1H[K[8;1H  In Emacs, you can click mouse button 2 on a menu item or cross reference[9;1H  to select it.[10;1H[K[11;1H* Menu: [K[12;1H[K[13;1HArchiving[K[14;1H* Cpio: (cpio).                 Copy-in-copy-out archiver to tape or disk.[15;1H* Tar: (tar).                   Making tape (or disk) archives.[16;1H[K[17;1HBasics[K[18;1H* Common options: (coreutils)Common options.[K[19;1H* Coreutils: (coreutils).       Core GNU (file, text, shell) utilities.[20;1H* Date input formats: (coreutils)Date input formats.[21;1H* File permissions: (coreutils)File permissions.[22;1H                                Access modes.[K[23;1H* Finding files: (find).        Operating on files matching certain criteria.[24;1H* ed: (ed).                     The GNU Line Editor.[K[25;1H[K[26;1HC++ libraries[K[27;1H* autosprintf: (autosprintf).   Support for printf format strings in C++.[28;1H[K[29;1HCompression[K[30;1H* Gzip: (gzip).                 General (de)compression of files (lzw).[31;1H[K[32;1HEditors[K[33;1H* nano: (nano).                 Small and friendly text editor.[34;1H[K[35;1HEmacs[K[36;1H* IDN Library: (libidn)Emacs API.[K[37;1H                                Emacs API for IDN functions.[38;1H[K[39;1HEncryption[K[40;1H* Nettle: (nettle).             A low-level cryptographic library.[42;1HGeneral Commands[K[43;1H* screen: (screen).             Terminal multiplexer.[K[44;1H[K[45;1HGNU C library functions and macros[K[46;1H* ALTWERASE: (libc)Local Modes.[K[47;1H* ARGP_ERR_UNKNOWN: (libc)Argp Parser Functions.[K[48;1H* ARG_MAX: (libc)General Limits.[K[49;1H* BC_BASE_MAX: (libc)Utility Limits.[K[50;1H* BC_DIM_MAX: (libc)Utility Limits.[51;1H* BC_SCALE_MAX: (libc)Utility Limits.[K[52;1H* BC_STRING_MAX: (libc)Utility Limits.[K[53;1H* BRKINT: (libc)Input Modes.[K[54;1H* BUFSIZ: (libc)Controlling Buffering.[55;1H* CCTS_OFLOW: (libc)Control Modes.[56;1H* CHILD_MAX: (libc)General Limits.[K[57;1H* CIGNORE: (libc)Control Modes.[K[58;1H* CLK_TCK: (libc)Processor Time.[K[59;1H* CLOCAL: (libc)Control Modes.[60;1H* CLOCKS_PER_SEC: (libc)CPU Time.[K[61;1H* COLL_WEIGHTS_MAX: (libc)Utility Limits.[K[62;1H[7m-----Info: (dir)Top, 2093 lines --Top-----------------------------------------------------------------------------------------------------------------------------------------------------------------------[0m[1;1H[63;1HUnknown command (c).[63;1HUnknown command (c).[1;1H[63;1H[K[1;1HFile: dir       Node: Top       This is the top of the INFO tree[3;1H  This (the Directory node) gives a menu of major topics. [4;1H  Typing "q" exits, "?" lists all Info commands, "d" returns here,[5;1H  "h" gives a primer for first-timers,[6;1H  "mEmacs<Return>" visits the Emacs topic, etc.[8;1H  In Emacs, you can click mouse button 2 on a menu item or cross reference[9;1H  to select it.[11;1H* Menu: [13;1HArchiving[14;1H* Cpio: (cpio).                 Copy-in-copy-out archiver to tape or disk.[15;1H* Tar: (tar).                   Making tape (or disk) archives.[17;1HBasics[18;1H* Common options: (coreutils)Common options.[19;1H* Coreutils: (coreutils).       Core GNU (file, text, shell) utilities.[20;1H* Date input formats: (coreutils)Date input formats.[21;1H* File permissions: (coreutils)File permissions.[22;1H                                Access modes.[23;1H* Finding files: (find).        Operating on files matching certain criteria.[24;1H* ed: (ed).                     The GNU Line Editor.[26;1HC++ libraries[27;1H* autosprintf: (autosprintf).   Support for printf format strings in C++.[29;1HCompression[30;1H* Gzip: (gzip).                 General (de)compression of files (lzw).[32;1HEditors[33;1H* nano: (nano).                 Small and friendly text editor.[35;1HEmacs[36;1H* IDN Library: (libidn)Emacs API.[37;1H                                Emacs API for IDN functions.[39;1HEncryption[40;1H* Nettle: (nettle).             A low-level cryptographic library.[42;1HGeneral Commands[43;1H* screen: (screen).             Terminal multiplexer.[45;1HGNU C library functions and macros[46;1H* ALTWERASE: (libc)Local Modes.[47;1H* ARGP_ERR_UNKNOWN: (libc)Argp Parser Functions.[48;1H* ARG_MAX: (libc)General Limits.[49;1H* BC_BASE_MAX: (libc)Utility Limits.[50;1H* BC_DIM_MAX: (libc)Utility Limits.[51;1H* BC_SCALE_MAX: (libc)Utility Limits.[52;1H* BC_STRING_MAX: (libc)Utility Limits.[53;1H* BRKINT: (libc)Input Modes.[54;1H* BUFSIZ: (libc)Controlling Buffering.[55;1H* CCTS_OFLOW: (libc)Control Modes.[56;1H* CHILD_MAX: (libc)General Limits.[57;1H* CIGNORE: (libc)Control Modes.[58;1H* CLK_TCK: (libc)Processor Time.[59;1H* CLOCAL: (libc)Control Modes.[60;1H* CLOCKS_PER_SEC: (libc)CPU Time.[61;1H* COLL_WEIGHTS_MAX: (libc)Utility Limits.[1;1H[63;1HUnknown command (c).[63;1HUnknown command (c).[1;1H[63;1H[K[1;1HFile: dir       Node: Top       This is the top of the INFO tree[3;1H  This (the Directory node) gives a menu of major topics. [4;1H  Typing "q" exits, "?" lists all Info commands, "d" returns here,[5;1H  "h" gives a primer for first-timers,[6;1H  "mEmacs<Return>" visits the Emacs topic, etc.[8;1H  In Emacs, you can click mouse button 2 on a menu item or cross reference[9;1H  to select it.[11;1H* Menu: [13;1HArchiving[14;1H* Cpio: (cpio).                 Copy-in-copy-out archiver to tape or disk.[15;1H* Tar: (tar).                   Making tape (or disk) archives.[17;1HBasics[18;1H* Common options: (coreutils)Common options.[19;1H* Coreutils: (coreutils).       Core GNU (file, text, shell) utilities.[20;1H* Date input formats: (coreutils)Date input formats.[21;1H* File permissions: (coreutils)File permissions.[22;1H                                Access modes.[23;1H* Finding files: (find).        Operating on files matching certain criteria.[24;1H* ed: (ed).                     The GNU Line Editor.[26;1HC++ libraries[27;1H* autosprintf: (autosprintf).   Support for printf format strings in C++.[29;1HCompression[30;1H* Gzip: (gzip).                 General (de)compression of files (lzw).[32;1HEditors[33;1H* nano: (nano).                 Small and friendly text editor.[35;1HEmacs[36;1H* IDN Library: (libidn)Emacs API.[37;1H                                Emacs API for IDN functions.[39;1HEncryption[40;1H* Nettle: (nettle).             A low-level cryptographic library.[42;1HGeneral Commands[43;1H* screen: (screen).             Terminal multiplexer.[45;1HGNU C library functions and macros[46;1H* ALTWERASE: (libc)Local Modes.[47;1H* ARGP_ERR_UNKNOWN: (libc)Argp Parser Functions.[48;1H* ARG_MAX: (libc)General Limits.[49;1H* BC_BASE_MAX: (libc)Utility Limits.[50;1H* BC_DIM_MAX: (libc)Utility Limits.[51;1H* BC_SCALE_MAX: (libc)Utility Limits.[52;1H* BC_STRING_MAX: (libc)Utility Limits.[53;1H* BRKINT: (libc)Input Modes.[54;1H* BUFSIZ: (libc)Controlling Buffering.[55;1H* CCTS_OFLOW: (libc)Control Modes.[56;1H* CHILD_MAX: (libc)General Limits.[57;1H* CIGNORE: (libc)Control Modes.[58;1H* CLK_TCK: (libc)Processor Time.[59;1H* CLOCAL: (libc)Control Modes.[60;1H* CLOCKS_PER_SEC: (libc)CPU Time.[61;1H* COLL_WEIGHTS_MAX: (libc)Utility Limits.[1;1H[63;1HUnknown command (;).[63;1HUnknown command (;).[1;1H[63;1H[K[63;1HRegexp search []: [63;19H[63;1HRegexp search []: [63;19H[63;1HRegexp search []: [63;19H[63;1HRegexp search []: [63;19H[63;1HRegexp search []: [63;19H[63;1HRegexp search []: [63;19H[63;1HRegexp search []:  [`ESC ESC ESC' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H[63;1HRegexp search []: [K[63;19H[63;19H[63;1HRegexp search []:  [`ESC O b' is invalid][63;19H